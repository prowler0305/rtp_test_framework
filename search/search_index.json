{
    "docs": [
        {
            "location": "/",
            "text": "Introduction \n\n\nWelcome to the CA Real Time Performance Test Project.\n\n\nThe goal of this project is to provide comprehensive automated functional and regression testing for the Real Time Performance products.\n\n\nRTPJ\n\n\nA Java based driver designed to easily generate distributed workloads against DB2 for z/OS databases.\n\n\nRTPPY\n\n\nA Python based framework for testing the CA RTP suite of products.\n\n\nSee the \nGetting Started\n page for information on setting up the RTPJ and RTTPY projects.\n\n\nFeedback\n\n\nIssues\n\n\nSee our guide on \nhow to create an issue\n.\n\n\nEnhancements\n\n\nHave an idea for a new feature or enhancement? See what's on the board already or open one here: \nhttps://github-isl-01.ca.com/DBMgmtModernization/RTP/projects",
            "title": "Introduction"
        },
        {
            "location": "/#introduction",
            "text": "Welcome to the CA Real Time Performance Test Project.  The goal of this project is to provide comprehensive automated functional and regression testing for the Real Time Performance products.",
            "title": "Introduction"
        },
        {
            "location": "/#rtpj",
            "text": "A Java based driver designed to easily generate distributed workloads against DB2 for z/OS databases.",
            "title": "RTPJ"
        },
        {
            "location": "/#rtppy",
            "text": "A Python based framework for testing the CA RTP suite of products. \nSee the  Getting Started  page for information on setting up the RTPJ and RTTPY projects.",
            "title": "RTPPY"
        },
        {
            "location": "/#feedback",
            "text": "",
            "title": "Feedback"
        },
        {
            "location": "/#issues",
            "text": "See our guide on  how to create an issue .",
            "title": "Issues"
        },
        {
            "location": "/#enhancements",
            "text": "Have an idea for a new feature or enhancement? See what's on the board already or open one here:  https://github-isl-01.ca.com/DBMgmtModernization/RTP/projects",
            "title": "Enhancements"
        },
        {
            "location": "/getting-started/",
            "text": "Getting Started\n\n\nFollow the instructions to get access to the project source control, install the Intellij IDEA IDE (Integrated\nDevelopment Environment), and finally import the source code into that environment.\n\n\nThe RTP test framework makes use of the PTG2 test framework, and therefore follows a very similar installation.\n\n\nInstall PTG2\n\n\nThe process for installing Python, third party libraries, the Intellij IDEA IDE, and PTG2 itself is documented on CA Wiki.\n\n\nNote You can do the steps manually as written on the page or use the installation package link, if you are running\nwindows,that simplifies the process into one installation setup wizard setup.exe file.\n\n\nFollow these instructions: \nInstalling PTG2\n\nup to the following step:\n\n\n3. Getting the Source Code of DB2 Tools QA Automation Project to Your Computer\n\n\n\nInstalling the Java JDK\n\n\nThe RTPJ Project requires a Java JDK to be installed on the local system.  Both 1.7 and 1.8 are currently supported,\nthough 1.8 is recommended.\n\n\nThe Java JDK is typically installed under the \nC:\\Program Files\\Java\n or \nC:\\Program Files (x86)\\Java\n directories.\n\n\nIf a JDK is not already present on your machine one can be downloaded from Oracle's website here: \nhttp://www.oracle.com/technetwork/java/javase/downloads/index.html\n.\n\n\nOnce you have found the location of the Java JDK save the path as it will be used in a later step.\n\n\nGet the RTP project source code\n\n\nFollow these steps to import the RTP GitHub project into Intellij.\n\n\nStep 1: Use Intellij to check out from Version Control using GitHub\n\n\n\n\nStep 2: Clone the Repository\n\n\n1.) Enter this Git Repository URL:  \nhttps://github-isl-01.ca.com/bergr05/RTP.git\n\n\n2.) Use the Test button to verify that you can access the repository.\n\n\n\n\n3.) Press the \n...\n button to the right of the Parent Directory line to create a new root directory.\n\n\n\n\n4.) Create a new folder name IdeaProjects.\n\n\n\n\n5.) Set the Directory Name to rtp.\n\n\n\n\n6.) Back on the Clone Repository window click \nClone\n.\n\n\nStep 3: Configure the Project\n\n\n1.) Go to \nFile -> Project Structure\n.\n\n\n2.) Select Project under Project Settings.\n\n\n3.) Set the project SDK by clicking on the \nNew...\n button.\n\n\n\n\nNote: Python may already be set as the project SDK, which for the RTP Python Automation Framework you are done.\n\nClick here\n to go to the documenation for the RTPPY frameworkIf you are trying to setup Intellij for the RTP Java\nFramework on you local machine then continue to follow the instructions as normal.\n\n\n4.) Then navigate to the location of the Java SDK i.e.(C:\\Program Files\\Java\\jdk1.8.0_74) and select the JDK.\nThen click \nOK\n.\n\n\n\n\n4.) Then set the project compiler path by clicking the \n...\n and navigating to the location of your IdeaProjects folder.\n\n\n\n\n5.) Click the \nNew Folder\n button to create the compiler output folder.\n\n\n\n\n6.) Name the new folder \nrtp_compiler_output\n then click \nOK\n.\n\n\n\n\n7.) Select Modules under Project Settings.\n\n\n8.) Select Module RTPJ and click on the \nDependencies\n tab.  Then set the SDK to the same Java version as was previously set for the Project.\nThen click \nApply\n.\n\n\n\n\n9.) Select Module rtpj_udf and click on the \nDependencies\n tab.  Then set the SDK to the same Java version as was previously set for the RTPJ module.\nThen click \nApply\n.\n\n\n\n\n10.) Select Module rtppy and click on the \nDependencies\n tab.  Then set the SDK to the location of the local Python.exe file.\nIf this does not already exist click New and add the SDK to Intellij.  Name the added Python SDK as \"Python\".\nThen click \nApply\n.\n\n\n\n\nStep 4: Adding Maven Projects\n\n\n1.) Click \nView -> Tool Windows -> Maven Projects\n. This will display the Maven Projects window, usually to the right of the workspace.\n\n\n\n\n2.) Then click the \n+\n symbol to Add Maven Projects.\n\n\n\n\n3.) Navigate to the project directory and select both pom.xml files under the \nrtpj\n and \nrtpj_udf\n directories. Then click OK.\n\n\n\n\nStep 5: Setup RTPJ\n\n\n1.) Next follow the instructions located \nhere\n for setting up the RTPJ project.\n\n\nGitHub Repository Information\n\n\nThis project uses Git as its source code repository.\n\n\nCA GitHub Enterprise: \nhttps://github-isl-01.ca.com\n\n\nRTP Git Repository website: \nhttps://github-isl-01.ca.com/bergr05/RTP\n\n\nRTP Git Repository: \nhttps://github-isl-01.ca.com/bergr05/RTP.git",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#getting-started",
            "text": "Follow the instructions to get access to the project source control, install the Intellij IDEA IDE (Integrated\nDevelopment Environment), and finally import the source code into that environment.  The RTP test framework makes use of the PTG2 test framework, and therefore follows a very similar installation.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#install-ptg2",
            "text": "The process for installing Python, third party libraries, the Intellij IDEA IDE, and PTG2 itself is documented on CA Wiki.  Note You can do the steps manually as written on the page or use the installation package link, if you are running\nwindows,that simplifies the process into one installation setup wizard setup.exe file.  Follow these instructions:  Installing PTG2 \nup to the following step:  3. Getting the Source Code of DB2 Tools QA Automation Project to Your Computer",
            "title": "Install PTG2"
        },
        {
            "location": "/getting-started/#installing-the-java-jdk",
            "text": "The RTPJ Project requires a Java JDK to be installed on the local system.  Both 1.7 and 1.8 are currently supported,\nthough 1.8 is recommended.  The Java JDK is typically installed under the  C:\\Program Files\\Java  or  C:\\Program Files (x86)\\Java  directories.  If a JDK is not already present on your machine one can be downloaded from Oracle's website here:  http://www.oracle.com/technetwork/java/javase/downloads/index.html .  Once you have found the location of the Java JDK save the path as it will be used in a later step.",
            "title": "Installing the Java JDK"
        },
        {
            "location": "/getting-started/#get-the-rtp-project-source-code",
            "text": "Follow these steps to import the RTP GitHub project into Intellij.",
            "title": "Get the RTP project source code"
        },
        {
            "location": "/getting-started/#step-1-use-intellij-to-check-out-from-version-control-using-github",
            "text": "",
            "title": "Step 1: Use Intellij to check out from Version Control using GitHub"
        },
        {
            "location": "/getting-started/#step-2-clone-the-repository",
            "text": "1.) Enter this Git Repository URL:   https://github-isl-01.ca.com/bergr05/RTP.git  2.) Use the Test button to verify that you can access the repository.   3.) Press the  ...  button to the right of the Parent Directory line to create a new root directory.   4.) Create a new folder name IdeaProjects.   5.) Set the Directory Name to rtp.   6.) Back on the Clone Repository window click  Clone .",
            "title": "Step 2: Clone the Repository"
        },
        {
            "location": "/getting-started/#step-3-configure-the-project",
            "text": "1.) Go to  File -> Project Structure .  2.) Select Project under Project Settings.  3.) Set the project SDK by clicking on the  New...  button.   Note: Python may already be set as the project SDK, which for the RTP Python Automation Framework you are done. Click here  to go to the documenation for the RTPPY frameworkIf you are trying to setup Intellij for the RTP Java\nFramework on you local machine then continue to follow the instructions as normal.  4.) Then navigate to the location of the Java SDK i.e.(C:\\Program Files\\Java\\jdk1.8.0_74) and select the JDK.\nThen click  OK .   4.) Then set the project compiler path by clicking the  ...  and navigating to the location of your IdeaProjects folder.   5.) Click the  New Folder  button to create the compiler output folder.   6.) Name the new folder  rtp_compiler_output  then click  OK .   7.) Select Modules under Project Settings.  8.) Select Module RTPJ and click on the  Dependencies  tab.  Then set the SDK to the same Java version as was previously set for the Project.\nThen click  Apply .   9.) Select Module rtpj_udf and click on the  Dependencies  tab.  Then set the SDK to the same Java version as was previously set for the RTPJ module.\nThen click  Apply .   10.) Select Module rtppy and click on the  Dependencies  tab.  Then set the SDK to the location of the local Python.exe file.\nIf this does not already exist click New and add the SDK to Intellij.  Name the added Python SDK as \"Python\".\nThen click  Apply .",
            "title": "Step 3: Configure the Project"
        },
        {
            "location": "/getting-started/#step-4-adding-maven-projects",
            "text": "1.) Click  View -> Tool Windows -> Maven Projects . This will display the Maven Projects window, usually to the right of the workspace.   2.) Then click the  +  symbol to Add Maven Projects.   3.) Navigate to the project directory and select both pom.xml files under the  rtpj  and  rtpj_udf  directories. Then click OK.",
            "title": "Step 4: Adding Maven Projects"
        },
        {
            "location": "/getting-started/#step-5-setup-rtpj",
            "text": "1.) Next follow the instructions located  here  for setting up the RTPJ project.",
            "title": "Step 5: Setup RTPJ"
        },
        {
            "location": "/getting-started/#github-repository-information",
            "text": "This project uses Git as its source code repository.  CA GitHub Enterprise:  https://github-isl-01.ca.com  RTP Git Repository website:  https://github-isl-01.ca.com/bergr05/RTP  RTP Git Repository:  https://github-isl-01.ca.com/bergr05/RTP.git",
            "title": "GitHub Repository Information"
        },
        {
            "location": "/rtpj/build-instructions/",
            "text": "Build Instructions\n\n\nStep 1: DB2 for z/OS JDBC Drivers\n\n\nIn order to build the \nrtpj-1.0-SNAPSHOT.jar\n, the following DB2 JDBC drivers must be present on the target\nsystem.  If you do not have these drivers they are available with the free version of IBM Data Studio.\n\n\ndb2jcc_license_cisuz.jar\ndb2jcc4.jar\n\n\n\nThe drivers are also hosted on CA11 in the following USS directory:\n/u/users/db2mf20/jdbc\n\n\nOnce you have downloaded or located the .jar files, copy both files to a new folder or directory.  The exact location\ndoes not matter only that they are the only two files located there. Take note of the chosen location as an environment\nvariable will be created using that path in the next step.\n\n\nStep 2: Set OS environment variables\n\n\nSet the following environment variables.  See \nHow to set Environment Variables\n for\nadditional help.\n\n\n1.) JDBC_DRIVERS=\n[path to the above JDBC driver .jar files]\n\n\nImportant!: The directory of the \nJDBC_DRIVERS cannot\n have the type-2 \ndb2jcc.jar\n file present in the directory or rtpj will fail to run properly.\n\n\n2.) RTP_HOME=\n[path to the RTP project directory]\n\n\n3.) MAVEN_HOME=\n[path to the maven directory]\n  Intellij includes a copy of Maven, the path should be similar to:\n\n\nC:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 2016.1\\plugins\\maven\\lib\\maven3\n\n\n\n4.) Modify the System \nPATH=\n variable to include the path to the Maven \\bin directory.  This should be similar to:\n\n\nC:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 2016.1\\plugins\\maven\\lib\\maven3\\bin\n\n\n\n5.) JAVA_HOME= \n[path to the jdk 1.7/1.8]\n \ni.e. (C:\\Program Files\\Java\\jdk1.8.0_74)\n\n\n6.) Validate the Maven and Java settings by issuing the following commands from OS command prompt:\n\n\nTest Java Version: \njava -version\n\nThe output should be similar to:\n\n\njava version \"1.8.0_91\"\nJava(TM) SE Runtime Environment (build 1.8.0_91-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)\n\n\n\nTest Maven Version: \nmvn -version\n\nThe output should be similar to:\n\n\nApache Maven 3.0.4 (r1232337; 2012-01-17 02:44:56-0600)\nMaven home: C:\\Maven\\apache-maven-3.0.4\\bin\\..\nJava version: 1.7.0_03, vendor: Oracle Corporation\nJava home: C:\\Program Files\\Java\\jdk1.7.0_03\\jre\nDefault locale: en_US, platform encoding: Cp1252\nOS name: \"windows 7\", version: \"6.1\", arch: \"amd64\", family: \"windows\"\n\n\n\nStep 3: Set Intellij environment variables\n\n\n1.) Go to File -> Settings.\n\n\n2.) In the search window type: Path Variables.\n\n\n3.) Click the green \"+\" on the far right to add a new Path Variable to Intellij.\n\n\n4.) Add a new variable named JDBC_DRIVERS, and set the value to the path of the DB2 for z/OS JDBC drivers.\n\n\n\n\nStep 4: Build the Jar file\n\n\n1.) Navigate to the \n/RTP/rtpj\n project directory.\n\n\n2.) Execute the maven command from the OS command prompt:\n\n\nmvn clean package\n\n\n\n3.) After a successful build, the jar file will be located here: \n/RTP/rtpj/target/rtpj-1.0-SNAPSHOT.jar\n\n\nSee \nRunning Tests\n for steps on executing tests.",
            "title": "Build Instructions"
        },
        {
            "location": "/rtpj/build-instructions/#build-instructions",
            "text": "",
            "title": "Build Instructions"
        },
        {
            "location": "/rtpj/build-instructions/#step-1-db2-for-zos-jdbc-drivers",
            "text": "In order to build the  rtpj-1.0-SNAPSHOT.jar , the following DB2 JDBC drivers must be present on the target\nsystem.  If you do not have these drivers they are available with the free version of IBM Data Studio.  db2jcc_license_cisuz.jar\ndb2jcc4.jar  The drivers are also hosted on CA11 in the following USS directory:\n/u/users/db2mf20/jdbc  Once you have downloaded or located the .jar files, copy both files to a new folder or directory.  The exact location\ndoes not matter only that they are the only two files located there. Take note of the chosen location as an environment\nvariable will be created using that path in the next step.",
            "title": "Step 1: DB2 for z/OS JDBC Drivers"
        },
        {
            "location": "/rtpj/build-instructions/#step-2-set-os-environment-variables",
            "text": "Set the following environment variables.  See  How to set Environment Variables  for\nadditional help.  1.) JDBC_DRIVERS= [path to the above JDBC driver .jar files]  Important!: The directory of the  JDBC_DRIVERS cannot  have the type-2  db2jcc.jar  file present in the directory or rtpj will fail to run properly.  2.) RTP_HOME= [path to the RTP project directory]  3.) MAVEN_HOME= [path to the maven directory]   Intellij includes a copy of Maven, the path should be similar to:  C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 2016.1\\plugins\\maven\\lib\\maven3  4.) Modify the System  PATH=  variable to include the path to the Maven \\bin directory.  This should be similar to:  C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 2016.1\\plugins\\maven\\lib\\maven3\\bin  5.) JAVA_HOME=  [path to the jdk 1.7/1.8]   i.e. (C:\\Program Files\\Java\\jdk1.8.0_74)  6.) Validate the Maven and Java settings by issuing the following commands from OS command prompt:  Test Java Version:  java -version \nThe output should be similar to:  java version \"1.8.0_91\"\nJava(TM) SE Runtime Environment (build 1.8.0_91-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)  Test Maven Version:  mvn -version \nThe output should be similar to:  Apache Maven 3.0.4 (r1232337; 2012-01-17 02:44:56-0600)\nMaven home: C:\\Maven\\apache-maven-3.0.4\\bin\\..\nJava version: 1.7.0_03, vendor: Oracle Corporation\nJava home: C:\\Program Files\\Java\\jdk1.7.0_03\\jre\nDefault locale: en_US, platform encoding: Cp1252\nOS name: \"windows 7\", version: \"6.1\", arch: \"amd64\", family: \"windows\"",
            "title": "Step 2: Set OS environment variables"
        },
        {
            "location": "/rtpj/build-instructions/#step-3-set-intellij-environment-variables",
            "text": "1.) Go to File -> Settings.  2.) In the search window type: Path Variables.  3.) Click the green \"+\" on the far right to add a new Path Variable to Intellij.  4.) Add a new variable named JDBC_DRIVERS, and set the value to the path of the DB2 for z/OS JDBC drivers.",
            "title": "Step 3: Set Intellij environment variables"
        },
        {
            "location": "/rtpj/build-instructions/#step-4-build-the-jar-file",
            "text": "1.) Navigate to the  /RTP/rtpj  project directory.  2.) Execute the maven command from the OS command prompt:  mvn clean package  3.) After a successful build, the jar file will be located here:  /RTP/rtpj/target/rtpj-1.0-SNAPSHOT.jar  See  Running Tests  for steps on executing tests.",
            "title": "Step 4: Build the Jar file"
        },
        {
            "location": "/rtpj/running-tests/",
            "text": "Running Tests\n\n\nThe JsonTestRunner Class\n\n\nThe java class com.ca.rtp.core.JsonTestRunner is the main test driver and entry point for the RTPJ framework.  This\nclass oversees the execution of all tests specified via the command line arguments.  As such the JsonTestRunner\nclass will be specified on each command used to execute the framework.\n\n\nExecute Commands\n\n\nThe following commands can be used to execute tests using the rtpj-1.0-SNAPSHOT.jar file:\n\n\nIncluding CLASSPATH:\njava -cp <class-path-info> com.ca.rtp.core.JsonTestRunner <tests> <options>\n\nCLASSPATH set previously:\njava com.ca.rtp.core.JsonTestRunner <tests> <options>\n\n\n\nNote: The examples below make use of certain environment variables.  It is recommended that these be setup prior\nto executing the jar file. See \nBuild Instructions - Step 2: Set OS environment variables\n for details.\n\n\nSetting the CLASSPATH\n\n\nThe CLASSPATH must either be set before or be specified inline as part of the command.\n\n\nUsing the -cp command line option:\n\n\nThe -cp command line option can be used to set or modify the current CLASSPATH before execution of the jar.\n\n\nExample (using environment variables):\n\n\njava -cp \"%JDBC_DRIVERS%\\*\";\"%RTP_HOME%\\rtpj\\target\\rtpj-1.0-SNAPSHOT.jar\" com.ca.rtp.core.JsonTestRunner <tests> <options>\n\n\n\nSetting the CLASSPATH environment variable:\n\n\nThe CLASSPATH environment variable can be set before executing the jar file.  This has the benefit of making the execution\ncommand much shorter.\n\n\nWindows\n\n\nset CLASSPATH=%JDBC_DRIVERS%\\*;%RTP_HOME%\\rtpj\\target\\rtpj-1.0-SNAPSHOT.jar;%CLASSPATH%\n\n\n\nUnix\n\n\nexport CLASSPATH=$JDBC_DRIVERS\\*;%RTP_HOME%\\rtpj\\target\\rtpj-1.0-SNAPSHOT.jar;$CLASSPATH\n\n\n\nCommand Line Options\n\n\nOptions are prefixed with \n--\n and will override default framework behavior.\n\n\nSSID\n\n\nThe SSID to be used for test execution can be overridden using the \nSSID\n option.\n\n\nExample:\n\n\n--SSID=D11A\n\n\n\nLPAR\n\n\nThe LPAR to be used for test execution can be overridden using the \nLPAR\n option.  The LPAR option is only\nused when the -SSID parameter is also present.\n\n\nExample:\n\n\n--LPAR=CA11\n\n\n\nUSERID\n\n\nThe USERID parameter to be used for test execution can be overridden using the \nUSERID\n option.\n\n\nExample:\n\n\n--USERID=QADBA01\n\n\n\nOrder of precedence is as follows: (USERID command line option, Test Suite \nConnection\n Parameter, Test \nConnection\n Parameter).\n\n\nLOG\n\n\nThe LOG parameter can be used to override the default log4j2 log level.\n\n\n--LOG=OFF\n      FATAL\n      ERROR\n      WARN\n      INFO\n      DEBUG - Additionally displays framework diagnostic information.\n      TRACE - Additionally displays DB2 query output.\n      ALL\n\n\n\nLIBRARY\n\n\nBy default, the framework uses internal library of tests located within the jar.\nThis can be overridden to specify a different directory to be searched.\n\n\nExample:\n\n\n--LIBRARY=C:\\Users\\qadba01\\mylib\\\n\n\n\nInside of the directory \nmylib\n JSON test files and suites can be placed and referenced as \nTest Arguments\n.\nCurrently, the framework does not allow subdirectories in an external library.\n\n\nInternal Test Library\n\n\nThe RTPJ framework uses an internal test library for executing most tests.\n\n\nThe Internal Test library is located here: \n/rtpj/src/main/resources/test_library\n\n\nSpecifying Tests\n\n\nTest arguments specify the \nTest Suites\n and \nSingle File Tests\n to be executed.\nMultiple test arguments can be specified; note that \noptions\n apply to all tests in the command.\n\n\nExample 1:\n Execute the \nCommon_Table_Expression_Test.JSON\n test from the internal test library.\n\n\njava com.ca.rtp.core.JsonTestRunner Common_Table_Expression_Test.JSON\n\n\n\nExample 2:\n Execute the \nBasic_Test_Suite.JSON\n test suite from the internal test library.\n\n\n java com.ca.rtp.core.JsonTestRunner Basic_Test_Suite.JSON\n\n\n\nExample 3:\n Execute the \nBasic_Test_Suite.JSON\n test suite from the internal test library and override the SSID and USERID values.\n\n\n java com.ca.rtp.core.JsonTestRunner Basic_Test_Suite.JSON --SSID=D10A --USERID=<pmfkey>\n\n\n\nExample 4:\n Execute the \nBasic_external_test.JSON\n test from an external location (example only, not executable).\n\n\n java com.ca.rtp.core.JsonTestRunner Basic_external_test.JSON --LIBRARY=C:\\Users\\<pmfkey>\\test_lib\n\n\n\n*Note: Examples assume the CLASSPATH was set before command execution.\n\n\nScripts\n\n\nThere are helpful windows batch scripts located here: \nrtpj/scripts\n\n\nThe \nrun.bat\n script can be used to execute the rtpj-1.0-SNAPSHOT.jar file.\nThe script will set the classpath based on the existing environment variables.\n\n\nThere are two additional variables set in the script, modify these values before executing:\n\n\nRTP_TEST=<test file to execute>\n\nRTP_PARMS=<optional command line test parameters>",
            "title": "Running Tests"
        },
        {
            "location": "/rtpj/running-tests/#running-tests",
            "text": "",
            "title": "Running Tests"
        },
        {
            "location": "/rtpj/running-tests/#the-jsontestrunner-class",
            "text": "The java class com.ca.rtp.core.JsonTestRunner is the main test driver and entry point for the RTPJ framework.  This\nclass oversees the execution of all tests specified via the command line arguments.  As such the JsonTestRunner\nclass will be specified on each command used to execute the framework.",
            "title": "The JsonTestRunner Class"
        },
        {
            "location": "/rtpj/running-tests/#execute-commands",
            "text": "The following commands can be used to execute tests using the rtpj-1.0-SNAPSHOT.jar file:  Including CLASSPATH:\njava -cp <class-path-info> com.ca.rtp.core.JsonTestRunner <tests> <options>\n\nCLASSPATH set previously:\njava com.ca.rtp.core.JsonTestRunner <tests> <options>  Note: The examples below make use of certain environment variables.  It is recommended that these be setup prior\nto executing the jar file. See  Build Instructions - Step 2: Set OS environment variables  for details.",
            "title": "Execute Commands"
        },
        {
            "location": "/rtpj/running-tests/#setting-the-classpath",
            "text": "The CLASSPATH must either be set before or be specified inline as part of the command.",
            "title": "Setting the CLASSPATH"
        },
        {
            "location": "/rtpj/running-tests/#using-the-cp-command-line-option",
            "text": "The -cp command line option can be used to set or modify the current CLASSPATH before execution of the jar.  Example (using environment variables):  java -cp \"%JDBC_DRIVERS%\\*\";\"%RTP_HOME%\\rtpj\\target\\rtpj-1.0-SNAPSHOT.jar\" com.ca.rtp.core.JsonTestRunner <tests> <options>",
            "title": "Using the -cp command line option:"
        },
        {
            "location": "/rtpj/running-tests/#setting-the-classpath-environment-variable",
            "text": "The CLASSPATH environment variable can be set before executing the jar file.  This has the benefit of making the execution\ncommand much shorter.",
            "title": "Setting the CLASSPATH environment variable:"
        },
        {
            "location": "/rtpj/running-tests/#windows",
            "text": "set CLASSPATH=%JDBC_DRIVERS%\\*;%RTP_HOME%\\rtpj\\target\\rtpj-1.0-SNAPSHOT.jar;%CLASSPATH%",
            "title": "Windows"
        },
        {
            "location": "/rtpj/running-tests/#unix",
            "text": "export CLASSPATH=$JDBC_DRIVERS\\*;%RTP_HOME%\\rtpj\\target\\rtpj-1.0-SNAPSHOT.jar;$CLASSPATH",
            "title": "Unix"
        },
        {
            "location": "/rtpj/running-tests/#command-line-options",
            "text": "Options are prefixed with  --  and will override default framework behavior.",
            "title": "Command Line Options"
        },
        {
            "location": "/rtpj/running-tests/#ssid",
            "text": "The SSID to be used for test execution can be overridden using the  SSID  option.  Example:  --SSID=D11A",
            "title": "SSID"
        },
        {
            "location": "/rtpj/running-tests/#lpar",
            "text": "The LPAR to be used for test execution can be overridden using the  LPAR  option.  The LPAR option is only\nused when the -SSID parameter is also present.  Example:  --LPAR=CA11",
            "title": "LPAR"
        },
        {
            "location": "/rtpj/running-tests/#userid",
            "text": "The USERID parameter to be used for test execution can be overridden using the  USERID  option.  Example:  --USERID=QADBA01  Order of precedence is as follows: (USERID command line option, Test Suite  Connection  Parameter, Test  Connection  Parameter).",
            "title": "USERID"
        },
        {
            "location": "/rtpj/running-tests/#log",
            "text": "The LOG parameter can be used to override the default log4j2 log level.  --LOG=OFF\n      FATAL\n      ERROR\n      WARN\n      INFO\n      DEBUG - Additionally displays framework diagnostic information.\n      TRACE - Additionally displays DB2 query output.\n      ALL",
            "title": "LOG"
        },
        {
            "location": "/rtpj/running-tests/#library",
            "text": "By default, the framework uses internal library of tests located within the jar.\nThis can be overridden to specify a different directory to be searched.  Example:  --LIBRARY=C:\\Users\\qadba01\\mylib\\  Inside of the directory  mylib  JSON test files and suites can be placed and referenced as  Test Arguments .\nCurrently, the framework does not allow subdirectories in an external library.",
            "title": "LIBRARY"
        },
        {
            "location": "/rtpj/running-tests/#internal-test-library",
            "text": "The RTPJ framework uses an internal test library for executing most tests.  The Internal Test library is located here:  /rtpj/src/main/resources/test_library",
            "title": "Internal Test Library"
        },
        {
            "location": "/rtpj/running-tests/#specifying-tests",
            "text": "Test arguments specify the  Test Suites  and  Single File Tests  to be executed.\nMultiple test arguments can be specified; note that  options  apply to all tests in the command.  Example 1:  Execute the  Common_Table_Expression_Test.JSON  test from the internal test library.  java com.ca.rtp.core.JsonTestRunner Common_Table_Expression_Test.JSON  Example 2:  Execute the  Basic_Test_Suite.JSON  test suite from the internal test library.   java com.ca.rtp.core.JsonTestRunner Basic_Test_Suite.JSON  Example 3:  Execute the  Basic_Test_Suite.JSON  test suite from the internal test library and override the SSID and USERID values.   java com.ca.rtp.core.JsonTestRunner Basic_Test_Suite.JSON --SSID=D10A --USERID=<pmfkey>  Example 4:  Execute the  Basic_external_test.JSON  test from an external location (example only, not executable).   java com.ca.rtp.core.JsonTestRunner Basic_external_test.JSON --LIBRARY=C:\\Users\\<pmfkey>\\test_lib  *Note: Examples assume the CLASSPATH was set before command execution.",
            "title": "Specifying Tests"
        },
        {
            "location": "/rtpj/running-tests/#scripts",
            "text": "There are helpful windows batch scripts located here:  rtpj/scripts  The  run.bat  script can be used to execute the rtpj-1.0-SNAPSHOT.jar file.\nThe script will set the classpath based on the existing environment variables.  There are two additional variables set in the script, modify these values before executing:  RTP_TEST=<test file to execute>\n\nRTP_PARMS=<optional command line test parameters>",
            "title": "Scripts"
        },
        {
            "location": "/rtpj/test-tracker/",
            "text": "Test Tracker\n\n\nThe test tracker is a short report printed at the end of the log. It is used to tell you how many tests \npassed\n, were \nskipped\n, or \nfailed\n. It also contains the timed \nduration\n of the test.\n\n\nWhen executing a \nsingle file JSON test\n the tracker will it as one \ntest\n. Therfore, if multiple \nsingle file JSON test\n are passed in as parameters, each will count as one test.\n\n\nWhen executing a \nJSON test suite\n the tracker will count submit each test as though it was specified as a separate argument. Therefore, if only one suite is to be executed, the number of tests executed will be equal to the number of tests specified in the parameter.\n\n\nPassed Test Summary\n\n\n\n\nFailed Test Summary\n\n\nWhen a test has failed the final test output will contain a \"Details\" section that will contain additional information\nabout each failure.  The section will include a list of failed tests, in addition each failed test will contain\ninformation about which statement failed and the cause.\n\n\nIn the example below 4 tests have failed.  The first failed test had problems executing statements 2 and 3 receiving a -601\nand -117 SQLCODES respectively.\n\n\n\n\nSkipped Test Summary\n\n\nIf there are no failed tests, but a test was skipped because it could not be executed, the summary will show a \nFAILED*\n\nstatus.\n\n\n\n\nWhen has a test \"Passed\"\n\n\nA test is considered passed when all statement in a \nsingle file JSON test\n have been executed and the DB2 connection has been closed. If a \nthreading\n parameter is present, the test will only be considered \npassed\n if all threads complete successfully.\n\n\nWhy would a test be \"Skipped\"\n\n\nA test is skipped when...\n\n\n\n\nThe JSON file can not be read or does not exist\n\n\nThe JSON file is missing a \ntest\n or \nsuite\n parameter\n\n\nThe test is missing a \nconnection\n or \nstatements\n parameter\n\n\n\n\nWhy would a test have \"Failed\"\n\n\nA test can fail when...\n\n\n\n\nAn SQL Error is encountered when executing a statement that is not \nexpected\n\n\nA result set is returned with different properties than were \nexpected\n\n\nErrors occur when setting or retrieving \nparameters\n\n\nAn error occurs when closing the Database Connection",
            "title": "Tracking Results"
        },
        {
            "location": "/rtpj/test-tracker/#test-tracker",
            "text": "The test tracker is a short report printed at the end of the log. It is used to tell you how many tests  passed , were  skipped , or  failed . It also contains the timed  duration  of the test.  When executing a  single file JSON test  the tracker will it as one  test . Therfore, if multiple  single file JSON test  are passed in as parameters, each will count as one test.  When executing a  JSON test suite  the tracker will count submit each test as though it was specified as a separate argument. Therefore, if only one suite is to be executed, the number of tests executed will be equal to the number of tests specified in the parameter.",
            "title": "Test Tracker"
        },
        {
            "location": "/rtpj/test-tracker/#passed-test-summary",
            "text": "",
            "title": "Passed Test Summary"
        },
        {
            "location": "/rtpj/test-tracker/#failed-test-summary",
            "text": "When a test has failed the final test output will contain a \"Details\" section that will contain additional information\nabout each failure.  The section will include a list of failed tests, in addition each failed test will contain\ninformation about which statement failed and the cause.  In the example below 4 tests have failed.  The first failed test had problems executing statements 2 and 3 receiving a -601\nand -117 SQLCODES respectively.",
            "title": "Failed Test Summary"
        },
        {
            "location": "/rtpj/test-tracker/#skipped-test-summary",
            "text": "If there are no failed tests, but a test was skipped because it could not be executed, the summary will show a  FAILED* \nstatus.",
            "title": "Skipped Test Summary"
        },
        {
            "location": "/rtpj/test-tracker/#when-has-a-test-passed",
            "text": "A test is considered passed when all statement in a  single file JSON test  have been executed and the DB2 connection has been closed. If a  threading  parameter is present, the test will only be considered  passed  if all threads complete successfully.",
            "title": "When has a test \"Passed\""
        },
        {
            "location": "/rtpj/test-tracker/#why-would-a-test-be-skipped",
            "text": "A test is skipped when...   The JSON file can not be read or does not exist  The JSON file is missing a  test  or  suite  parameter  The test is missing a  connection  or  statements  parameter",
            "title": "Why would a test be \"Skipped\""
        },
        {
            "location": "/rtpj/test-tracker/#why-would-a-test-have-failed",
            "text": "A test can fail when...   An SQL Error is encountered when executing a statement that is not  expected  A result set is returned with different properties than were  expected  Errors occur when setting or retrieving  parameters  An error occurs when closing the Database Connection",
            "title": "Why would a test have \"Failed\""
        },
        {
            "location": "/rtpj/writing-tests/",
            "text": "Writing Tests\n\n\nThe RTPJ framework uses the Javascript Object Notation (JSON) format to express a test or test suite.\nIf you are not familiar with JSON the official documentation is located here: \nhttp://www.json.org/\n.\n\n\nSee the following pages for details regarding the test and test suite formats.\n\n\nSingle File Tests\n\n\nTest Suites\n\n\nTest Library\n\n\nThe internal test library is located here: \n/rtpj/src/main/resources/test_library\n. This directory contains all the\nexisting tests and is a good place to look for examples to help in writing new tests.\n\n\nWhen a test is executed the entire test library including all sub-directories will be searched.\nWhen a test suite is executed the entire test library including all sub-directories will be searched, the entire\ntest library will then also be searched for each test within the test suite.\n\n\nAll the tests located within the test library are packaged into the \nrtpj-1.0-SNAPSHOT.jar\n during the build.\n\n\nThis has many benefits:\n\n\n1.) The tests can be read directly from the .jar file, and are always in the same relative location.\n\n\n2.) The commands used to execute tests remain simple.\n\n\n3.) The tests are part of the project source control and build process.\n\n\n4.) The package has fewer external dependencies.\n\n\nAdding a Test\n\n\nOnce you have written a new test and it is ready to be added to the permanent internal test library, simply copy the\nJSON file to the following location: \n/rtpj/src/main/resources/test_library\n.\n\n\nOnce a test file is located within the internal test library directory it can be executed simply by adding the name to the\ncommand line parm list.\n\n\nThe framework will search the library for the test name and execute it.\n\n\nThe entire test library including all sub-directories will be searched for each test.\n\n\nNote: duplicate tests names may cause undesired results.\n\n\nAdding a Test Suite\n\n\nTest Suites are added in the same manner as a Test.  Simply copy the test suite JSON file into the internal\ntest library directory.\n\n\nThe test library will be searched to locate the test suite file and execute it.  All tests defined within the\ntest suite must be located within the internal test library.\n\n\nThe entire test library including all sub-directories will be searched for each test within a test suite.",
            "title": "Writing Tests"
        },
        {
            "location": "/rtpj/writing-tests/#writing-tests",
            "text": "The RTPJ framework uses the Javascript Object Notation (JSON) format to express a test or test suite.\nIf you are not familiar with JSON the official documentation is located here:  http://www.json.org/ .  See the following pages for details regarding the test and test suite formats.  Single File Tests  Test Suites",
            "title": "Writing Tests"
        },
        {
            "location": "/rtpj/writing-tests/#test-library",
            "text": "The internal test library is located here:  /rtpj/src/main/resources/test_library . This directory contains all the\nexisting tests and is a good place to look for examples to help in writing new tests.  When a test is executed the entire test library including all sub-directories will be searched.\nWhen a test suite is executed the entire test library including all sub-directories will be searched, the entire\ntest library will then also be searched for each test within the test suite.  All the tests located within the test library are packaged into the  rtpj-1.0-SNAPSHOT.jar  during the build.  This has many benefits:  1.) The tests can be read directly from the .jar file, and are always in the same relative location.  2.) The commands used to execute tests remain simple.  3.) The tests are part of the project source control and build process.  4.) The package has fewer external dependencies.",
            "title": "Test Library"
        },
        {
            "location": "/rtpj/writing-tests/#adding-a-test",
            "text": "Once you have written a new test and it is ready to be added to the permanent internal test library, simply copy the\nJSON file to the following location:  /rtpj/src/main/resources/test_library .  Once a test file is located within the internal test library directory it can be executed simply by adding the name to the\ncommand line parm list.  The framework will search the library for the test name and execute it.  The entire test library including all sub-directories will be searched for each test.  Note: duplicate tests names may cause undesired results.",
            "title": "Adding a Test"
        },
        {
            "location": "/rtpj/writing-tests/#adding-a-test-suite",
            "text": "Test Suites are added in the same manner as a Test.  Simply copy the test suite JSON file into the internal\ntest library directory.  The test library will be searched to locate the test suite file and execute it.  All tests defined within the\ntest suite must be located within the internal test library.  The entire test library including all sub-directories will be searched for each test within a test suite.",
            "title": "Adding a Test Suite"
        },
        {
            "location": "/rtpj/json/single-file-tests/",
            "text": "Test Structure\n\n\n\n\nA single file test is a JSON file that specifies a \ntest\n parameter that contains an object with a \nconnection parameter\n, a \nstatements parameter\n, an \noptional\n \nseed parameter\n and an \noptional\n \nthreading parameter\n. The following example can be used as a outline for writing single file tests. There is also a \ncomplete example\n at the end of this document.\n\n\n{\n  \"test\": {\n    \"description\": \"A test description\",\n    \"connection\": {...},\n    \"statements\": [\n      {...},\n      {...},\n      {...}\n    ]\n  }\n}\n\n\n\n\nDescription\n\n\nThe \ndescription\n string is an optional test parameter that provides a basic textual description of the test.  The description\nis currently not used by the framework, but may be used in the future for diagnostic and reporting purposes.\n\n\nAdding a short textual description of the test or test suite is recommended.\n\n\n{\"description\": \"A textual description for a test.\"}\n\n\n\n\nConnection Information\n\n\n\n\nConnection Object\n\n\nValid Parameters\n\n\n\n\nssid\n\n\nuserid\n\n\n\n\nThe connection parameter object specifies the \nssid\n and \nuserid\n to be used for this test. Each test establishes it's own thread that will be used for all the the statements specified in the \nstatements array\n. These connection parameters can be overridden at the \ntest suite\n level but must be specified to give the test values to default to.\n\n\nExample\n\n\n{\"connection\": {\n  \"ssid\": \"D11B\",\n  \"userid\": \"QADBA01\"\n}}\n\n\n\n\nStatements\n\n\n\n\nStatements Array\n\n\nThe statement array contains a JSON array of \nstatement objects\n that will be sequentially executed.\n\n\n{\"statements\":[\n  {...},\n  {...},\n  {...}\n]}\n\n\n\n\nStatement Object\n\n\nValid Parameters\n\n\n\n\ntext   \n\n\ntype\n\n\nsubtype\n\n\nexpect \noptional\n\n\nrepeat\n\n\npause\n\n\nargs Array\n\n\n\n\nExample\n\n\n{\n  \"text\": \"WITH PROCS (name, parms) AS (SELECT NAME, PARM_COUNT FROM SYSIBM.SYSROUTINES) SELECT * FROM PROCS WHERE NAME = ?\",\n  \"type\": \"PREPARE\",\n  \"subtype\": \"SELECT\",\n  \"repeat\": 100,\n  \"sleep\": 1,\n  \"args\": [\n    {\n      \"value\": \"ADMIN_EXPLAIN_MAINT\",\n      \"type\": \"static\",\n      \"datatype\": \"varchar\"\n    }\n  ]\n}\n\n\n\n\nText\n\n\nThe \ntext\n parameter specifies the text of the SQL or DDL Statement to be executed. JSON does not allow for multi-line strings so writing in \nan editor with line wrapping\n and \nthe ability to unwrap or fold lines\n will help you construct longer statements before copying them into your test. You do not need to include a semicolon at the end of the statement.\n\n\nTypes\n\n\nType\n specifies how you would like the framework to execute your statement. The following are the valid values for \ntype\n and a few notes about each.\n\n\n\n\nImmediate\n\n\nStatement is passed to DB2 and immediately executed\n\n\nDB2 may choose to prepare the statement (don't be confused if this is how Detector catches it since it is not 1 to 1 analogous with EXECUTE IMMEDIATE)\n\n\nParameter markers can not be used, text is static and final\n\n\n\n\n\n\nPrepare\n\n\nStatement is prepared and then executed\n\n\nIf the \nrepeat\n parameter is specified the statement will not be prepared again (This is a good way to mimic real world distributed applications)\n\n\n\n\n\n\nCallable\n\n\nStatement is prepared and then executed\n\n\nIf the \nrepeat\n parameter is specified the statement will not be prepared again\n\n\nAllows use of CALL statements to call stored procedures\n\n\n\n\n\n\n\n\nSubTypes\n\n\nSubType\n specifies the kind of statement you are executing. Currently, the subtype parameter is not used by the framework. Regardless, subtype should be specified for all statements in case a need arises in the future, such as reporting or logging. Examples of \nsubtype\n are: \nSELECT\n, \nCREATE\n, \nINSERT\n, \nDROP\n, etc.\n\n\nExpect\n\n\nExpect\n specifies an object containing the expected results from the execution of the statement. \nExpect\n should be specified to allow the \ntest tracker\n to accuratly report whether a test achieved a \nPassed\n or \nFailed\n status. The following parameters are currently supported:\n\n\n\n\nsqlerror\n\n\nOnly checks errors (negative SQLCODES) not warnings (positive SQLCODES)\n\n\nIf an error occurs, the framework will check if that error matches the specified integer and if it does, the test will be considered a success\n\n\n\n\n\n\ncolumns\n\n\nChecks number of columns returned in a result set\n\n\nMarks the test as failed if number of columns does not match the specified value\n\n\n\n\n\n\nrows\n\n\nChecks number of rows returned in a result set\n\n\nMarks the test as failed if number of rows does not match the specified value\n\n\n\n\n\n\nignore (true/false)\n\n\nignores any sql errors and the rows/columns returned for a statement. This is useful if the stmt may fail in some cases but the test\n  should not fail, such as when dropping objects.\n\n\n\n\n\n\n\n\nExamples\n\n\n\"expect\": {\n  \"sqlerror\": -104\n}\n\n\n\n\n\"expect\": {\n  \"rows\": 138,\n  \"columns\": 1\n}\n\n\n\n\n\"expect\": {\n  \"ignore\": true,\n}\n\n\n\n\nRepeat\n\n\nThe \nrepeat\n parameter specifies the number of times the framework should execute the statement.\n\n\nNote that when used on a statement with the \ntype\n \nprepare\n or \ncallable\n the statement will only be prepared once. This means that the dynamic SQL's access path will only be determined once.\n\n\nThe \nrepeat\n parameter also has special interactions with \nincremented\n and \ngenerated\n argument types.\n\n\nSleep\n\n\nThe \nsleep\n parameter specifies the number of seconds to pause the test execution after executing the given statement.\n\n\nIf the sleep parameter is omitted the default is 0 seconds.\n\n\nArguments\n\n\n\n\nArguments Array\n\n\nThe arguments array contains a JSON array of \nargument objects\n that will be set to the parameter markers, in the statement, in the order that they appear.\n\n\n\"args\":[\n  {...},\n  {...},\n  {...}\n]\n\n\n\n\nArgument Object\n\n\nValid Parameters\n\n\n\n\ntype\n\n\nsubtype\n\n\ndatatype\n\n\nvalue\n\n\nlength\n\n\nkey\n\n\n\n\nArguments (\nargs\n) allow you to specify values to be inserted into the parameter markers of the statment. Arguments and parameter markers can only be specified on \nprepare\n or \ncallable\n \ntype\n statements.\n\n\nTypes\n\n\nJust like statements, arguments have a \ntype\n parameter. There are three types of parameters and two subtypes.\n\n\nStatic\n\n\nFor parameters where you want to specify an explicit \nvalue\n.\n\n\nExample\n\n\n{\n  \"value\": \"ADMIN_EXPLAIN_MAINT\",\n  \"type\": \"static\",\n  \"datatype\": \"varchar\"\n}\n\n\n\n\nIncremented\n\n\nFor parameters where you want the \ndatatype\n to increment for every \nrepetition\n starting at the given \nvalue\n. \nCurrently only the INTEGER datatype is supported.\n\n\nExample\n\n\n{\n  \"value\": 1,\n  \"type\": \"incremented\",\n  \"datatype\": \"integer\"\n}\n\n\n\n\nGenerated\n\n\nFor parameters that you would like randomly generated data of the given \ndatatype\n. If a \nvalue\n parameter is specified it will be ignored and the generated value will be used.\n\n\nCurrently, generation is supported for the following datatypes:\n\n\n\n\nBIGINT\n\n\nBOOLEAN\n\n\nCHAR*\n\n\nDOUBLE\n\n\nFLOAT\n\n\nINTEGER\n\n\nSMALLINT\n\n\nTINYINT\n\n\nVARCHAR*\n\n\n\n\n* \nlength\n parameter must be specified or else generated value will be truncated when set\n\n\nIf a \nseed\n value is provided on the \ntest\n object each execution of the test will generate the same random data. This does not mean that every \nrepetition\n of the statement will have the same value generated for it; rather, all \nrepetitions\n will produce the same random data every time the test is executed.\n\n\nExample\n\n\n{\n  \"type\": \"generated\",\n  \"datatype\": \"char\",\n  \"length\": 10\n}\n\n\n\n\nSubtypes\n\n\nSubtype\n only needs to be specified when using Statement Type: \nCallable\n when calling a stored procedure.\n\n\nIn\n\n\nIn\n is the implied default for all parameters (even for non \ncallable\n statements). An \nin\n parameter is expected, by the framework, to provide a value to be set to the corresponding parameter marker.\n\n\nOut\n\n\nOut\n should be specified for \noutput-only\n parameters. The \nout\n parameter should not specify a \nvalue\n. Note that the \nlength\n parameter does not have to be set in the example. \nOut\n parameter's returned value will be logged.\n\n\nExample\n\n\n{\n  \"type\": \"static\",\n  \"subtype\": \"out\",\n  \"datatype\": \"varchar\"\n},\n\n\n\n\nInOut\n\n\nInOut\n should be specified for \ninput and output\n parameters. \nInOut\n parameters should be used like \nIn\n parameters and follow all the required rules of the parameter's \ntype\n. \nInOut\n parameter's returned value will be logged.\n\n\nExample\n\n\n{\n  \"value\": 2,\n  \"type\": \"static\",\n  \"subtype\": \"inout\",\n  \"datatype\": \"smallint\"\n}\n\n\n\n\nliteral\n\n\nliteral\n is used when certain values are to be inserted directly into the sql statement by the java program.\n\n\nExample\n\n\n\"args\": [\n  {\n    \"type\": \"generated\",\n    \"datatype\": \"integer\",\n    \"subtype\": \"literal\",\n    \"key\": \":H1\"\n  }\n\n\n\n\nkey\n\n\nkey\n is used only when \nliteral\n is the subtype.  The string designated by the key parameter will be replaced in the SQL statement\nby the value indicated in the argument.  This can be static, incremented, or generated parameter.\n\n\nExample\n\n\n \"statements\": [\n      {\n        \"text\": \"SELECT CREATOR,NAME FROM SYSIBM.SYSTABLES WHERE COLCOUNT < :H1 FETCH FIRST 1 ROWS ONLY\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"SELECT\",\n        \"repeat\": 100,\n        \"args\": [\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"integer\",\n            \"subtype\": \"literal\",\n            \"key\": \":H1\"\n          }\n        ]\n      }\n    ]\n\n\n\n\nMax\n\n\nSets the maximum number of incremented values for a single argument.  Once the maximum number of values \nhas been reached the value will be reset to the original value.\n\n\nThis parameter is designed to support separation of repeating literal values from the \"repeat\" parameter at the \nstatement level.\n\n\nExample\n\n\nIn the below example the Table literal counter argument will cycle through values (1-10).  This will cause values to \nbe inserted into tables (RTPJTB1 - RTPJTB10).  Since the statement is repeated 10 times and in batches of 10, this\nwill result in 10 rows being inserted into ten tables.\n\n\n    \"text\": \"INSERT INTO RTPJTB:H1 (id, firstname, lastname, title, salary, resume) VALUES (?, ?, ?, ?, ?, ?)\",\n    \"type\": \"BATCH\",\n    \"subtype\": \"INSERT\",\n    \"repeat\": 10,\n    \"batches\": 10,\n    \"args\": [\n      {\n        \"type\": \"incremented\",\n        \"datatype\": \"integer\",\n        \"subtype\": \"literal\",\n        \"description\": \"Table literal counter.\",\n        \"value\": 1,\n        \"key\": \":H1\",\n        \"max\": 10\n      },\n\n\n\n\nBatches\n\n\nThe batches parameter is only valid when the statement type is \"BATCH\".  The parameter is used for executing batch statements.\nThe batches value indicates the number of times a statement should be added to the batch. For example, A statement with a repeat value of 1 and \na batches value of 10 will cause the statement to be added 10 times and executed during one batch execution.\n\n\nExample\n\n\nIn the below example the statement will be executed 100 times in 10 execution batches.\nSince the statement is repeated 10 times and in batches of 10, this will result in 10 rows being inserted into ten tables.\n\n\n    \"text\": \"INSERT INTO RTPJTB:H1 (id, firstname, lastname, title, salary, resume) VALUES (?, ?, ?, ?, ?, ?)\",\n    \"type\": \"BATCH\",\n    \"subtype\": \"INSERT\",\n    \"repeat\": 10,\n    \"batches\": 10,\n    \"args\": [\n      {\n        \"type\": \"incremented\",\n        \"datatype\": \"integer\",\n        \"subtype\": \"literal\",\n        \"description\": \"Table literal counter.\",\n        \"value\": 1,\n        \"key\": \":H1\",\n        \"max\": 10\n      },\n\n\n\n\nDataTypes\n\n\nDataType\n specifies the DB2 type of the parameter. Currently, the following datatypes are supported for \nstatic\n types; \ngenerated\n types and \nincremented\n types only support subsets of this list:\n\n\n\n\nBIGINT\n\n\nBINARY\n\n\nBIT\n\n\nBLOB\n\n\nBOOLEAN\n\n\nCHAR\n\n\nCLOB\n\n\nDATE\n\n\nDECIMAL\n\n\nDOUBLE\n\n\nFLOAT\n\n\nINTEGER\n\n\nLONGVARBINARY\n\n\nLONGVARCHAR\n\n\nNULL\n\n\nNUMERIC\n\n\nREAL\n\n\nROWID\n\n\nSMALLINT\n\n\nSQLXML\n\n\nTIME\n\n\nTIMESTAMP\n\n\nTINYINT\n\n\nVARBINARY\n\n\nVARCHAR\n\n\n\n\nValue\n\n\nThe \nvalue\n parameter allows you to provide values for \nstatic\n parameters and starting values for \nincrementing\n parameters. Note that values like \ninteger\n should not be specified within quotes.\n\n\nLength\n\n\nThe \nlength\n parameter is, currently, only used for \ngenerated\n parameters. There is no harm in specifying it for static parameters as it could be used by the framework in the future.\n\n\nMulti Threaded Tests\n\n\n\n\nThreading Object\n\n\nValid Parameters\n\n\n\n\nthreads (integer) : The number of threads to execute test.  Each thread will execute the entire test. One is the default.\n\n\nparallel (boolean): Execute all threads in parallel or wait for each thread to finish before starting the next. True is the default.\n\n\nsleep (integer)   : The amount of time to wait before executing the next thread.  Zero is the default.\n\n\n\n\nThe \nthreading\n parameter object is used to execute multiple instances of a test either in parallel or sequentially. The \nthreads\n parameter specifies the number of threads to be created; each thread will have it's own connection. The \nparallel\n parameter specifies whether the threads should execute in parallel or sequentially waiting for each to finish before the next is created.\n\n\nExample\n\n\n\"threading\": {\n  \"threads\": 100,\n  \"parallel\": \"true\"\n  \"sleep\": 1\n}\n\n\n\n\nComplete Example\n\n\n\n\nThe following is an example that creates a table, inserts 50 rows to it using all three \ntype\n of parameters, selects the contents of that table, and drops the table.\n\n\n{\n  \"test\": {\n    \"description\": \"This is an example test file.\",\n    \"seed\": 42,\n    \"threading\": {\n      \"threads\": 2,\n      \"parallel\": \"false\"\n    },\n    \"connection\": {\n      \"ssid\": \"D10A\",\n      \"userid\": \"QADBA01\"\n    },\n    \"statements\": [\n      {\n        \"text\": \"CREATE TABLE RTPJSONTEST ( id INTEGER, myint INTEGER, mystring VARCHAR(30), mydouble DOUBLE, myfloat FLOAT)\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"CREATE\"\n      },\n      {\n        \"text\": \"INSERT INTO RTPJSONTEST (id, myint, mystring, mydouble, myfloat) VALUES (?, ?, ?, ?, ?)\",\n        \"type\": \"prepare\",\n        \"subtype\": \"INSERT\",\n        \"repeat\": 50,\n        \"args\": [\n          {\n            \"value\": 1,\n            \"type\": \"incremented\",\n            \"datatype\": \"integer\"\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"integer\"\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"varchar\",\n            \"length\": 30\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"double\"\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"float\"\n          }\n        ]\n      },\n      {\n        \"text\": \"SELECT * FROM RTPJSONTEST\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"SELECT\",\n        \"expect\": {\n          \"columns\": 5,\n          \"rows\": 50\n        }\n      },\n      {\n        \"text\": \"DROP TABLE RTPJSONTEST;\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"DROP\"\n      }\n    ]\n  }\n}\n\n\n\n\nSome Notes About this Example\n\n\n\n\nThe \nseed\n parameter is set which causes the data to be inserted to be the same every time this test is executed\n\n\nThe SELECT statement uses the \nexpect\n parameter to verify that the correct number of columns and rows were returned\n\n\nThe \nthreading\n object executes this test twice, on two threads, one after another\n\n\nIf \nparallel\n was set to \ntrue\n in the \nthreading\n object...\n\n\nThe CREATE and DROP statements would most likely get sqlerrors on the second thread to execute\n\n\nThe SELECT would most likely fail to meet it's \nexpect\n because the second thread would have inserted more than 50 rows to the table",
            "title": "JSON - Single File Tests"
        },
        {
            "location": "/rtpj/json/single-file-tests/#test-structure",
            "text": "A single file test is a JSON file that specifies a  test  parameter that contains an object with a  connection parameter , a  statements parameter , an  optional   seed parameter  and an  optional   threading parameter . The following example can be used as a outline for writing single file tests. There is also a  complete example  at the end of this document.  {\n  \"test\": {\n    \"description\": \"A test description\",\n    \"connection\": {...},\n    \"statements\": [\n      {...},\n      {...},\n      {...}\n    ]\n  }\n}",
            "title": "Test Structure"
        },
        {
            "location": "/rtpj/json/single-file-tests/#description",
            "text": "The  description  string is an optional test parameter that provides a basic textual description of the test.  The description\nis currently not used by the framework, but may be used in the future for diagnostic and reporting purposes.  Adding a short textual description of the test or test suite is recommended.  {\"description\": \"A textual description for a test.\"}",
            "title": "Description"
        },
        {
            "location": "/rtpj/json/single-file-tests/#connection-information",
            "text": "",
            "title": "Connection Information"
        },
        {
            "location": "/rtpj/json/single-file-tests/#connection-object",
            "text": "",
            "title": "Connection Object"
        },
        {
            "location": "/rtpj/json/single-file-tests/#valid-parameters",
            "text": "ssid  userid   The connection parameter object specifies the  ssid  and  userid  to be used for this test. Each test establishes it's own thread that will be used for all the the statements specified in the  statements array . These connection parameters can be overridden at the  test suite  level but must be specified to give the test values to default to.",
            "title": "Valid Parameters"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example",
            "text": "{\"connection\": {\n  \"ssid\": \"D11B\",\n  \"userid\": \"QADBA01\"\n}}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#statements",
            "text": "",
            "title": "Statements"
        },
        {
            "location": "/rtpj/json/single-file-tests/#statements-array",
            "text": "The statement array contains a JSON array of  statement objects  that will be sequentially executed.  {\"statements\":[\n  {...},\n  {...},\n  {...}\n]}",
            "title": "Statements Array"
        },
        {
            "location": "/rtpj/json/single-file-tests/#statement-object",
            "text": "",
            "title": "Statement Object"
        },
        {
            "location": "/rtpj/json/single-file-tests/#valid-parameters_1",
            "text": "text     type  subtype  expect  optional  repeat  pause  args Array",
            "title": "Valid Parameters"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_1",
            "text": "{\n  \"text\": \"WITH PROCS (name, parms) AS (SELECT NAME, PARM_COUNT FROM SYSIBM.SYSROUTINES) SELECT * FROM PROCS WHERE NAME = ?\",\n  \"type\": \"PREPARE\",\n  \"subtype\": \"SELECT\",\n  \"repeat\": 100,\n  \"sleep\": 1,\n  \"args\": [\n    {\n      \"value\": \"ADMIN_EXPLAIN_MAINT\",\n      \"type\": \"static\",\n      \"datatype\": \"varchar\"\n    }\n  ]\n}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#text",
            "text": "The  text  parameter specifies the text of the SQL or DDL Statement to be executed. JSON does not allow for multi-line strings so writing in  an editor with line wrapping  and  the ability to unwrap or fold lines  will help you construct longer statements before copying them into your test. You do not need to include a semicolon at the end of the statement.",
            "title": "Text"
        },
        {
            "location": "/rtpj/json/single-file-tests/#types",
            "text": "Type  specifies how you would like the framework to execute your statement. The following are the valid values for  type  and a few notes about each.   Immediate  Statement is passed to DB2 and immediately executed  DB2 may choose to prepare the statement (don't be confused if this is how Detector catches it since it is not 1 to 1 analogous with EXECUTE IMMEDIATE)  Parameter markers can not be used, text is static and final    Prepare  Statement is prepared and then executed  If the  repeat  parameter is specified the statement will not be prepared again (This is a good way to mimic real world distributed applications)    Callable  Statement is prepared and then executed  If the  repeat  parameter is specified the statement will not be prepared again  Allows use of CALL statements to call stored procedures",
            "title": "Types"
        },
        {
            "location": "/rtpj/json/single-file-tests/#subtypes",
            "text": "SubType  specifies the kind of statement you are executing. Currently, the subtype parameter is not used by the framework. Regardless, subtype should be specified for all statements in case a need arises in the future, such as reporting or logging. Examples of  subtype  are:  SELECT ,  CREATE ,  INSERT ,  DROP , etc.",
            "title": "SubTypes"
        },
        {
            "location": "/rtpj/json/single-file-tests/#expect",
            "text": "Expect  specifies an object containing the expected results from the execution of the statement.  Expect  should be specified to allow the  test tracker  to accuratly report whether a test achieved a  Passed  or  Failed  status. The following parameters are currently supported:   sqlerror  Only checks errors (negative SQLCODES) not warnings (positive SQLCODES)  If an error occurs, the framework will check if that error matches the specified integer and if it does, the test will be considered a success    columns  Checks number of columns returned in a result set  Marks the test as failed if number of columns does not match the specified value    rows  Checks number of rows returned in a result set  Marks the test as failed if number of rows does not match the specified value    ignore (true/false)  ignores any sql errors and the rows/columns returned for a statement. This is useful if the stmt may fail in some cases but the test\n  should not fail, such as when dropping objects.",
            "title": "Expect"
        },
        {
            "location": "/rtpj/json/single-file-tests/#examples",
            "text": "\"expect\": {\n  \"sqlerror\": -104\n}  \"expect\": {\n  \"rows\": 138,\n  \"columns\": 1\n}  \"expect\": {\n  \"ignore\": true,\n}",
            "title": "Examples"
        },
        {
            "location": "/rtpj/json/single-file-tests/#repeat",
            "text": "The  repeat  parameter specifies the number of times the framework should execute the statement.  Note that when used on a statement with the  type   prepare  or  callable  the statement will only be prepared once. This means that the dynamic SQL's access path will only be determined once.  The  repeat  parameter also has special interactions with  incremented  and  generated  argument types.",
            "title": "Repeat"
        },
        {
            "location": "/rtpj/json/single-file-tests/#sleep",
            "text": "The  sleep  parameter specifies the number of seconds to pause the test execution after executing the given statement.  If the sleep parameter is omitted the default is 0 seconds.",
            "title": "Sleep"
        },
        {
            "location": "/rtpj/json/single-file-tests/#arguments",
            "text": "",
            "title": "Arguments"
        },
        {
            "location": "/rtpj/json/single-file-tests/#arguments-array",
            "text": "The arguments array contains a JSON array of  argument objects  that will be set to the parameter markers, in the statement, in the order that they appear.  \"args\":[\n  {...},\n  {...},\n  {...}\n]",
            "title": "Arguments Array"
        },
        {
            "location": "/rtpj/json/single-file-tests/#argument-object",
            "text": "",
            "title": "Argument Object"
        },
        {
            "location": "/rtpj/json/single-file-tests/#valid-parameters_2",
            "text": "type  subtype  datatype  value  length  key   Arguments ( args ) allow you to specify values to be inserted into the parameter markers of the statment. Arguments and parameter markers can only be specified on  prepare  or  callable   type  statements.",
            "title": "Valid Parameters"
        },
        {
            "location": "/rtpj/json/single-file-tests/#types_1",
            "text": "Just like statements, arguments have a  type  parameter. There are three types of parameters and two subtypes.",
            "title": "Types"
        },
        {
            "location": "/rtpj/json/single-file-tests/#static",
            "text": "For parameters where you want to specify an explicit  value .",
            "title": "Static"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_2",
            "text": "{\n  \"value\": \"ADMIN_EXPLAIN_MAINT\",\n  \"type\": \"static\",\n  \"datatype\": \"varchar\"\n}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#incremented",
            "text": "For parameters where you want the  datatype  to increment for every  repetition  starting at the given  value .  Currently only the INTEGER datatype is supported.",
            "title": "Incremented"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_3",
            "text": "{\n  \"value\": 1,\n  \"type\": \"incremented\",\n  \"datatype\": \"integer\"\n}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#generated",
            "text": "For parameters that you would like randomly generated data of the given  datatype . If a  value  parameter is specified it will be ignored and the generated value will be used.  Currently, generation is supported for the following datatypes:   BIGINT  BOOLEAN  CHAR*  DOUBLE  FLOAT  INTEGER  SMALLINT  TINYINT  VARCHAR*   *  length  parameter must be specified or else generated value will be truncated when set  If a  seed  value is provided on the  test  object each execution of the test will generate the same random data. This does not mean that every  repetition  of the statement will have the same value generated for it; rather, all  repetitions  will produce the same random data every time the test is executed.",
            "title": "Generated"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_4",
            "text": "{\n  \"type\": \"generated\",\n  \"datatype\": \"char\",\n  \"length\": 10\n}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#subtypes_1",
            "text": "Subtype  only needs to be specified when using Statement Type:  Callable  when calling a stored procedure.",
            "title": "Subtypes"
        },
        {
            "location": "/rtpj/json/single-file-tests/#in",
            "text": "In  is the implied default for all parameters (even for non  callable  statements). An  in  parameter is expected, by the framework, to provide a value to be set to the corresponding parameter marker.",
            "title": "In"
        },
        {
            "location": "/rtpj/json/single-file-tests/#out",
            "text": "Out  should be specified for  output-only  parameters. The  out  parameter should not specify a  value . Note that the  length  parameter does not have to be set in the example.  Out  parameter's returned value will be logged.",
            "title": "Out"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_5",
            "text": "{\n  \"type\": \"static\",\n  \"subtype\": \"out\",\n  \"datatype\": \"varchar\"\n},",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#inout",
            "text": "InOut  should be specified for  input and output  parameters.  InOut  parameters should be used like  In  parameters and follow all the required rules of the parameter's  type .  InOut  parameter's returned value will be logged.",
            "title": "InOut"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_6",
            "text": "{\n  \"value\": 2,\n  \"type\": \"static\",\n  \"subtype\": \"inout\",\n  \"datatype\": \"smallint\"\n}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#literal",
            "text": "literal  is used when certain values are to be inserted directly into the sql statement by the java program.",
            "title": "literal"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_7",
            "text": "\"args\": [\n  {\n    \"type\": \"generated\",\n    \"datatype\": \"integer\",\n    \"subtype\": \"literal\",\n    \"key\": \":H1\"\n  }",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#key",
            "text": "key  is used only when  literal  is the subtype.  The string designated by the key parameter will be replaced in the SQL statement\nby the value indicated in the argument.  This can be static, incremented, or generated parameter.",
            "title": "key"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_8",
            "text": "\"statements\": [\n      {\n        \"text\": \"SELECT CREATOR,NAME FROM SYSIBM.SYSTABLES WHERE COLCOUNT < :H1 FETCH FIRST 1 ROWS ONLY\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"SELECT\",\n        \"repeat\": 100,\n        \"args\": [\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"integer\",\n            \"subtype\": \"literal\",\n            \"key\": \":H1\"\n          }\n        ]\n      }\n    ]",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#max",
            "text": "Sets the maximum number of incremented values for a single argument.  Once the maximum number of values \nhas been reached the value will be reset to the original value.  This parameter is designed to support separation of repeating literal values from the \"repeat\" parameter at the \nstatement level.",
            "title": "Max"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_9",
            "text": "In the below example the Table literal counter argument will cycle through values (1-10).  This will cause values to \nbe inserted into tables (RTPJTB1 - RTPJTB10).  Since the statement is repeated 10 times and in batches of 10, this\nwill result in 10 rows being inserted into ten tables.      \"text\": \"INSERT INTO RTPJTB:H1 (id, firstname, lastname, title, salary, resume) VALUES (?, ?, ?, ?, ?, ?)\",\n    \"type\": \"BATCH\",\n    \"subtype\": \"INSERT\",\n    \"repeat\": 10,\n    \"batches\": 10,\n    \"args\": [\n      {\n        \"type\": \"incremented\",\n        \"datatype\": \"integer\",\n        \"subtype\": \"literal\",\n        \"description\": \"Table literal counter.\",\n        \"value\": 1,\n        \"key\": \":H1\",\n        \"max\": 10\n      },",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#batches",
            "text": "The batches parameter is only valid when the statement type is \"BATCH\".  The parameter is used for executing batch statements.\nThe batches value indicates the number of times a statement should be added to the batch. For example, A statement with a repeat value of 1 and \na batches value of 10 will cause the statement to be added 10 times and executed during one batch execution.",
            "title": "Batches"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_10",
            "text": "In the below example the statement will be executed 100 times in 10 execution batches.\nSince the statement is repeated 10 times and in batches of 10, this will result in 10 rows being inserted into ten tables.      \"text\": \"INSERT INTO RTPJTB:H1 (id, firstname, lastname, title, salary, resume) VALUES (?, ?, ?, ?, ?, ?)\",\n    \"type\": \"BATCH\",\n    \"subtype\": \"INSERT\",\n    \"repeat\": 10,\n    \"batches\": 10,\n    \"args\": [\n      {\n        \"type\": \"incremented\",\n        \"datatype\": \"integer\",\n        \"subtype\": \"literal\",\n        \"description\": \"Table literal counter.\",\n        \"value\": 1,\n        \"key\": \":H1\",\n        \"max\": 10\n      },",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#datatypes",
            "text": "DataType  specifies the DB2 type of the parameter. Currently, the following datatypes are supported for  static  types;  generated  types and  incremented  types only support subsets of this list:   BIGINT  BINARY  BIT  BLOB  BOOLEAN  CHAR  CLOB  DATE  DECIMAL  DOUBLE  FLOAT  INTEGER  LONGVARBINARY  LONGVARCHAR  NULL  NUMERIC  REAL  ROWID  SMALLINT  SQLXML  TIME  TIMESTAMP  TINYINT  VARBINARY  VARCHAR",
            "title": "DataTypes"
        },
        {
            "location": "/rtpj/json/single-file-tests/#value",
            "text": "The  value  parameter allows you to provide values for  static  parameters and starting values for  incrementing  parameters. Note that values like  integer  should not be specified within quotes.",
            "title": "Value"
        },
        {
            "location": "/rtpj/json/single-file-tests/#length",
            "text": "The  length  parameter is, currently, only used for  generated  parameters. There is no harm in specifying it for static parameters as it could be used by the framework in the future.",
            "title": "Length"
        },
        {
            "location": "/rtpj/json/single-file-tests/#multi-threaded-tests",
            "text": "",
            "title": "Multi Threaded Tests"
        },
        {
            "location": "/rtpj/json/single-file-tests/#threading-object",
            "text": "",
            "title": "Threading Object"
        },
        {
            "location": "/rtpj/json/single-file-tests/#valid-parameters_3",
            "text": "threads (integer) : The number of threads to execute test.  Each thread will execute the entire test. One is the default.  parallel (boolean): Execute all threads in parallel or wait for each thread to finish before starting the next. True is the default.  sleep (integer)   : The amount of time to wait before executing the next thread.  Zero is the default.   The  threading  parameter object is used to execute multiple instances of a test either in parallel or sequentially. The  threads  parameter specifies the number of threads to be created; each thread will have it's own connection. The  parallel  parameter specifies whether the threads should execute in parallel or sequentially waiting for each to finish before the next is created.",
            "title": "Valid Parameters"
        },
        {
            "location": "/rtpj/json/single-file-tests/#example_11",
            "text": "\"threading\": {\n  \"threads\": 100,\n  \"parallel\": \"true\"\n  \"sleep\": 1\n}",
            "title": "Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#complete-example",
            "text": "The following is an example that creates a table, inserts 50 rows to it using all three  type  of parameters, selects the contents of that table, and drops the table.  {\n  \"test\": {\n    \"description\": \"This is an example test file.\",\n    \"seed\": 42,\n    \"threading\": {\n      \"threads\": 2,\n      \"parallel\": \"false\"\n    },\n    \"connection\": {\n      \"ssid\": \"D10A\",\n      \"userid\": \"QADBA01\"\n    },\n    \"statements\": [\n      {\n        \"text\": \"CREATE TABLE RTPJSONTEST ( id INTEGER, myint INTEGER, mystring VARCHAR(30), mydouble DOUBLE, myfloat FLOAT)\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"CREATE\"\n      },\n      {\n        \"text\": \"INSERT INTO RTPJSONTEST (id, myint, mystring, mydouble, myfloat) VALUES (?, ?, ?, ?, ?)\",\n        \"type\": \"prepare\",\n        \"subtype\": \"INSERT\",\n        \"repeat\": 50,\n        \"args\": [\n          {\n            \"value\": 1,\n            \"type\": \"incremented\",\n            \"datatype\": \"integer\"\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"integer\"\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"varchar\",\n            \"length\": 30\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"double\"\n          },\n          {\n            \"type\": \"generated\",\n            \"datatype\": \"float\"\n          }\n        ]\n      },\n      {\n        \"text\": \"SELECT * FROM RTPJSONTEST\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"SELECT\",\n        \"expect\": {\n          \"columns\": 5,\n          \"rows\": 50\n        }\n      },\n      {\n        \"text\": \"DROP TABLE RTPJSONTEST;\",\n        \"type\": \"IMMEDIATE\",\n        \"subtype\": \"DROP\"\n      }\n    ]\n  }\n}",
            "title": "Complete Example"
        },
        {
            "location": "/rtpj/json/single-file-tests/#some-notes-about-this-example",
            "text": "The  seed  parameter is set which causes the data to be inserted to be the same every time this test is executed  The SELECT statement uses the  expect  parameter to verify that the correct number of columns and rows were returned  The  threading  object executes this test twice, on two threads, one after another  If  parallel  was set to  true  in the  threading  object...  The CREATE and DROP statements would most likely get sqlerrors on the second thread to execute  The SELECT would most likely fail to meet it's  expect  because the second thread would have inserted more than 50 rows to the table",
            "title": "Some Notes About this Example"
        },
        {
            "location": "/rtpj/json/test-suites/",
            "text": "Suite Structure\n\n\n\n\nA test suite is a JSON file that specifies a \nsuite\n parameter that contains a \ntests\n parameter and an \noptional\n \nconnection\n parameter. Test suites can only execute tests that are embedded into the JAR, in the \nresources/test_library\n.\n\n\nThe \ntests\n parameter specifies an array of strings representing the names of the \nsingle file tests\n that are to be executed. Tests will be executed one after another.\n\n\nThe connection object specified at the suite level overrides the connection objects in all of the \nsingle file tests\n. The \nvalid parameters and structure\n are identical to the connection object for a \nsingle file test\n.\n\n\nDescription\n\n\nThe \ndescription\n string is an optional test parameter that provides a basic understanding of the test.  The description\nis currently not used by the framework, but will be used in the future for diagnostic and reporting purposes.\n\n\nAdding a short textual description of the test or test suite is recommended.\n\n\nExample\n\n\n{\n  \"suite\": {\n    \"description\": \"An Example test suite that executes four tests.\",\n    \"connection\": {\n      \"ssid\": \"DB0G\",\n      \"userid\": \"QADBA01\"\n    },\n    \"tests\": [\n      \"BasicSelectTest.JSON\",\n      \"BasicMultiThreadedSelectTest.JSON\",\n      \"BasicCreateInsertTest.JSON\",\n      \"BasicStoredProcedureTest.JSON\"\n    ]\n  }\n}",
            "title": "JSON - Test Suites"
        },
        {
            "location": "/rtpj/json/test-suites/#suite-structure",
            "text": "A test suite is a JSON file that specifies a  suite  parameter that contains a  tests  parameter and an  optional   connection  parameter. Test suites can only execute tests that are embedded into the JAR, in the  resources/test_library .  The  tests  parameter specifies an array of strings representing the names of the  single file tests  that are to be executed. Tests will be executed one after another.  The connection object specified at the suite level overrides the connection objects in all of the  single file tests . The  valid parameters and structure  are identical to the connection object for a  single file test .",
            "title": "Suite Structure"
        },
        {
            "location": "/rtpj/json/test-suites/#description",
            "text": "The  description  string is an optional test parameter that provides a basic understanding of the test.  The description\nis currently not used by the framework, but will be used in the future for diagnostic and reporting purposes.  Adding a short textual description of the test or test suite is recommended.",
            "title": "Description"
        },
        {
            "location": "/rtpj/json/test-suites/#example",
            "text": "{\n  \"suite\": {\n    \"description\": \"An Example test suite that executes four tests.\",\n    \"connection\": {\n      \"ssid\": \"DB0G\",\n      \"userid\": \"QADBA01\"\n    },\n    \"tests\": [\n      \"BasicSelectTest.JSON\",\n      \"BasicMultiThreadedSelectTest.JSON\",\n      \"BasicCreateInsertTest.JSON\",\n      \"BasicStoredProcedureTest.JSON\"\n    ]\n  }\n}",
            "title": "Example"
        },
        {
            "location": "/rtppy/introduction/",
            "text": "Welcome\n\n\nThese pages provide information on the python based testing framework which was developed to allow automation testing of\nCA Detector, CA Subsystem Analyzer, CA Thread Terminator/DSNZPARM, and CA Xmanager products.\n\n\nThe framework is written in Python and designed to simplify executing, adding, overriding, changing, and writing new tests.\nIt uses the Prague Testing Gears 2 (PTG2) framework as a base and wrappers simple navigation methods into product based navigation.\n\n\nThe RTP test framework also allows for easy extraction and comparison of metric data collected by the products.\n\n\nExecuting Tests\n\n\nTests can be invoked either remotely via the \nJenkins\n website or locally.\n\n\nSince python is an interpretive language there is nothing special needed to execute the tests locally on your machine other than to perform\nthe following steps from our \nGetting Started\n page.\n\n\n\n\nInstall PTG2\n\n\nGet the RTP project source code\n\n\n\n\nWhether executing the tests via Jenkins or locally see the \nExecution\n page to get started.",
            "title": "Introduction"
        },
        {
            "location": "/rtppy/introduction/#welcome",
            "text": "These pages provide information on the python based testing framework which was developed to allow automation testing of\nCA Detector, CA Subsystem Analyzer, CA Thread Terminator/DSNZPARM, and CA Xmanager products.  The framework is written in Python and designed to simplify executing, adding, overriding, changing, and writing new tests.\nIt uses the Prague Testing Gears 2 (PTG2) framework as a base and wrappers simple navigation methods into product based navigation.  The RTP test framework also allows for easy extraction and comparison of metric data collected by the products.",
            "title": "Welcome"
        },
        {
            "location": "/rtppy/introduction/#executing-tests",
            "text": "Tests can be invoked either remotely via the  Jenkins  website or locally.  Since python is an interpretive language there is nothing special needed to execute the tests locally on your machine other than to perform\nthe following steps from our  Getting Started  page.   Install PTG2  Get the RTP project source code   Whether executing the tests via Jenkins or locally see the  Execution  page to get started.",
            "title": "Executing Tests"
        },
        {
            "location": "/rtppy/executing-tests/",
            "text": "Executing Python Test Scripts\n\n\n\n\nMain Execution\n\n\nThe main test driver, \nISPFTest.py\n, serves as the main entry point for the RTPPY framework. This main script uses Builder\nclass methods to parse the command line argument overrides and/or input file in JSON format specified.\n\n\nExecute Command\n\n\nThe following command is used to invoke the main test driver, of which requires the -f or --file command to indicate the name\nof the input JSON file that contains the test or tests and it's parameters needed to execute.\n\n\npython ISPFTest.py --file=inputfile\n\n\n\n\nHow to create tests\n\n\nSee \nCreating Tests\n on how to write tests using the existing framework with the JSON structure.\n\n\n\n\nHow do I execute tests?\n\n\nTests can be executed either locally on your machine \nvia Intellij\n or \nvia Jenkins\n with preset builds setup.",
            "title": "Executing"
        },
        {
            "location": "/rtppy/executing-tests/#executing-python-test-scripts",
            "text": "",
            "title": "Executing Python Test Scripts"
        },
        {
            "location": "/rtppy/executing-tests/#main-execution",
            "text": "The main test driver,  ISPFTest.py , serves as the main entry point for the RTPPY framework. This main script uses Builder\nclass methods to parse the command line argument overrides and/or input file in JSON format specified.",
            "title": "Main Execution"
        },
        {
            "location": "/rtppy/executing-tests/#execute-command",
            "text": "The following command is used to invoke the main test driver, of which requires the -f or --file command to indicate the name\nof the input JSON file that contains the test or tests and it's parameters needed to execute.  python ISPFTest.py --file=inputfile",
            "title": "Execute Command"
        },
        {
            "location": "/rtppy/executing-tests/#how-to-create-tests",
            "text": "See  Creating Tests  on how to write tests using the existing framework with the JSON structure.",
            "title": "How to create tests"
        },
        {
            "location": "/rtppy/executing-tests/#how-do-i-execute-tests",
            "text": "Tests can be executed either locally on your machine  via Intellij  or  via Jenkins  with preset builds setup.",
            "title": "How do I execute tests?"
        },
        {
            "location": "/rtppy/execute-jenkins/",
            "text": "Executing via Jenkins\n\n\nThese instructions are not encompassing and only cover the simple way of executing and the minimum of changing the \nBuild\n section\nof the configuration to alter the tests parameters when needed.\n\n\nStep 1: Start by navigating to the RTP folder in Jenkins and selecting the RTPPY folder.\n\n\n\n\nStep 2 - Select the test you want by clicking on its name.\n\n\n\n\nStep 3 - Click \nBuild with Parameters\n\n\n\n\nStep 4 - Fill in parameters and click \nBuild\n\n\nNote\n When filling in Build Parameters do not use any quotes (i.e. ' ' or \" \")\n\n\n\nThat's all there is to it! See the \ntutorial\n on how to view and/or download the output",
            "title": "Execute via Jenkins"
        },
        {
            "location": "/rtppy/execute-jenkins/#executing-via-jenkins",
            "text": "These instructions are not encompassing and only cover the simple way of executing and the minimum of changing the  Build  section\nof the configuration to alter the tests parameters when needed.",
            "title": "Executing via Jenkins"
        },
        {
            "location": "/rtppy/execute-jenkins/#step-1-start-by-navigating-to-the-rtp-folder-in-jenkins-and-selecting-the-rtppy-folder",
            "text": "",
            "title": "Step 1: Start by navigating to the RTP folder in Jenkins and selecting the RTPPY folder."
        },
        {
            "location": "/rtppy/execute-jenkins/#step-2-select-the-test-you-want-by-clicking-on-its-name",
            "text": "",
            "title": "Step 2 - Select the test you want by clicking on its name."
        },
        {
            "location": "/rtppy/execute-jenkins/#step-3-click-build-with-parameters",
            "text": "",
            "title": "Step 3 - Click Build with Parameters"
        },
        {
            "location": "/rtppy/execute-jenkins/#step-4-fill-in-parameters-and-click-build",
            "text": "Note  When filling in Build Parameters do not use any quotes (i.e. ' ' or \" \")  That's all there is to it! See the  tutorial  on how to view and/or download the output",
            "title": "Step 4 - Fill in parameters and click Build"
        },
        {
            "location": "/rtppy/execute-intellij/",
            "text": "Executing Locally via Intellij\n\n\nTo execute scripts locally on your machine you need to have \nIntellij\n, \nPTG2\n, and the entire \nRTP testing repository\n installed\non your machine before continuing with the instructions below. See our \nGetting Started\n page on how to accomplish this.\n\n\nStep 1 - Click \"Edit Configurations...\" option in the drop down on the toolbar.\n\n\n\n\nStep 2 - Add a new Python configuration.\n\n\n\n\nStep 3 - Fill in fields.\n\n\n\n\nName - name your configuration.\n\n\n\n\nScript - \n[path to ISPFTest.py]\n Path should be similar to: \n\n\nC:\\Users\\spean03\\IdeaProjects\\RTP\\rtppy\\speantest\\ISPFTest.py\n\n\n\n\n\n\n\nScript Parameters - Specify minimally the \n--file\n command line parameter and other needed RTPPY \nCommand Line Overrides\n \n\n\n\n\nWorking Directory - \n[path to rtppy directory in Intellij repository]\n Path should be similiar to: \nC:\\Users\\spean03\\IdeaProjects\\RTP\\rtppy\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\nStep 5 - Run it",
            "title": "Execute via Intellij"
        },
        {
            "location": "/rtppy/execute-intellij/#executing-locally-via-intellij",
            "text": "To execute scripts locally on your machine you need to have  Intellij ,  PTG2 , and the entire  RTP testing repository  installed\non your machine before continuing with the instructions below. See our  Getting Started  page on how to accomplish this.",
            "title": "Executing Locally via Intellij"
        },
        {
            "location": "/rtppy/execute-intellij/#step-1-click-edit-configurations-option-in-the-drop-down-on-the-toolbar",
            "text": "",
            "title": "Step 1 - Click \"Edit Configurations...\" option in the drop down on the toolbar."
        },
        {
            "location": "/rtppy/execute-intellij/#step-2-add-a-new-python-configuration",
            "text": "",
            "title": "Step 2 - Add a new Python configuration."
        },
        {
            "location": "/rtppy/execute-intellij/#step-3-fill-in-fields",
            "text": "Name - name your configuration.   Script -  [path to ISPFTest.py]  Path should be similar to:   C:\\Users\\spean03\\IdeaProjects\\RTP\\rtppy\\speantest\\ISPFTest.py    Script Parameters - Specify minimally the  --file  command line parameter and other needed RTPPY  Command Line Overrides     Working Directory -  [path to rtppy directory in Intellij repository]  Path should be similiar to:  C:\\Users\\spean03\\IdeaProjects\\RTP\\rtppy",
            "title": "Step 3 - Fill in fields."
        },
        {
            "location": "/rtppy/execute-intellij/#example",
            "text": "",
            "title": "Example"
        },
        {
            "location": "/rtppy/execute-intellij/#step-5-run-it",
            "text": "",
            "title": "Step 5 - Run it"
        },
        {
            "location": "/rtppy/command-line-options/",
            "text": "Command Line Options\n\n\n\n\nOptions described below have a short and long version, prefixed with either \n-\n (\nshort option\n) or \n--\n (\nlong option\n) and can\noverride the parameters specified in the JSON input file and/or the frameworks default values.\n\n\nSee the specific \ntest documentation\n for the command line options that apply.\n\n\nlpar\n\n\nThe LPAR in which to connect to.\n\n\nExample:\n\n\nShort\n\n\n-lp=ca31\n\n\n\n\nLong\n\n\n--lpar=ca31\n\n\n\n\nuserid\n\n\nThe ID to use to log onto the LPAR.\n\n\nExample:\n\n\nShort\n\n\n-usr=spean03\n\n\n\n\nLong\n\n\n--userid=speana3\n\n\n\n\nssid\n\n\nThe primary SSID to be used for test execution.\n\n\nExample:\n\n\nShort\n\n\n-ss=d12a\n\n\n\n\nLong\n\n\n--ssid=d12a\n\n\n\n\nssid2\n\n\nA second ssid to be used during test execution.\n\n\nExample:\n\n\nShort\n\n\n-ss2=d11a\n\n\n\n\nLong\n\n\n--ssid2=d11a\n\n\n\n\nfile\n\n\nSpecifies the name of the input file, in JSON format, that contains the test(s) to execute along with the parameters needed.\nThe \nfile\n option can reference just a file name in which the indicated file will be searched for out of the default\ntest library, \n/rtppy/python_test_library\n. Or a complete path can be specified, which is useful to reference a JSON file located\non your local machine for individual executions, debugging, or future test development.\n\n\nExample:\n\n\nShort\n\n\n-f=view_by_tests.json\n-f=C:\\Users\\spean03\\Desktop\\mytestparms.json\n\n\n\n\nLong\n\n\n--file=view_by_tests.json\n--file=C:\\Users\\spean03\\Desktop\\mytestparms.json\n\n\n\n\nprint\n\n\nThe print option provides the functionality to print out to the console all the test descriptions (if coded in the JSON file) or the raw contents of the JSON file itself pointed to by the \n--file\n parameter. To print just the test descriptions just provide the option without a value. To print the raw contents provide the value \"raw\" with the option.\n\n\nExamples:\n\n\nprint just descriptions\n\n\n-p --file=pdt_interval_compare_all_standard_activity_view_by_tests.json\n\n\n\n\n(print raw contents)\n\n\n-p=raw --file=pdt_interval_compare_all_standard_activity_view_by_tests.json\n\n\n\n\nbaseline_vcat\n\n\nOverrides the VCAT name to be used to identify the baseline datastore to use.\n\n\nExample:\n\n\nShort\n\n\n-bv=PDTDBA.R19\n\n\n\n\nLong\n\n\n--baseline_vcat=PDTDBA.R19\n\n\n\n\nbaseline_datastore\n\n\nOverrides the datastore that should be considered to contain the baseline execution metrics.\n\n\nExample:\n\n\nShort\n\n\n-bld=dtvnext\n\n\n\n\nLong\n\n\n--baseline_datastore=dtvnext\n\n\n\n\ncurrent_vcat\n\n\nOverrides the VCAT name to be used to identify the current datastore to use.\n\n\nExample:\n\n\nShort\n\n\n-cv=PDTDBA.R19\n\n\n\n\nLong\n\n\n--current_vcat=PDTDBA.R19\n\n\n\n\ncurrent_datastore\n\n\nOverrides the datastore that should be considered to contain the current execution metrics to compare against the baseline.\n\n\nExample:\n\n\nShort\n\n\n-cud=mycurrent\n\n\n\n\nLong\n\n\n--current_datastore=mycurrent\n\n\n\n\nbaseline_interval_date/current_interval_date\n\n\nOverrides the interval date in the datastore that should be selected in combination with the corresponding interval time parameter.\n\n\nFormat\n\n\nThe interval date can be supplied as it appears on the products \"Datastore Interval Summary Display\" or a value string\nof \"1\" can be used to indicate the most recent interval should be selected.\n\n\nUsing \n16/05/13\n:\n\n\nShort\n\n\n-bld='16/05/13'\n-cid='16/05/13'\n\n\n\n\nOR\n\n\n-bid='1'\n-cid='1'\n\n\n\n\nLong\n\n\n--baseline_interval_date='16/05/13'\n--current_interval_date='16/05/13'\n\n\n\n\nOR\n\n\n--baseline_interval_date='1'\n--current_interval_date='1'\n\n\n\n\nbaseline_interval_time/current_interval_time\n\n\nFurther identifies and overrides the interval time in the datastore that should be selected in combination with the interval date parameter. Unless the interval date parameter indicates the most recent interval should be selected, in which the interval time parameter is ignored.\n\n\nFormat\n\n\nThe interval time should be supplied as it appears on the products \"Datastore Interval Summary Display\".\n\n\nUsing \n02:00:00\n:\n\n\nShort\n\n\n-bit='02:00:00'\n-cit='02:00:00'\n\n\n\n\nLong\n\n\n--baseline_interval_time='02:00:00'\n--current_interval_time='02:00:00'\n\n\n\n\nbaseline_interval_date_2/current_interval_date_2\n\n\nOverrides the second interval date in the datastore that should be selected in combination with the corresponding interval_time_2 parameter.\n\n\nFormat\n\n\nShort\n\n\n-bld2='16/05/13'\n-cid2='16/05/13'\n\n\n\n\nOR\n\n\n-bid2='1'\n-cid2='1'\n\n\n\n\nLong\n\n\n--baseline_interval_date_2='16/05/13'\n--current_interval_date_2='16/05/13'\n\n\n\n\nOR\n\n\n--baseline_interval_date_2='1'\n--current_interval_date_2='1'\n\n\n\n\nbaseline_interval_time_2/current_interval_time_2\n\n\nOverrides the second interval time in the datastore that should be selected in combination with the corresponding interval_date_2 parameter.\n\n\nFormat\n\n\nShort\n\n\n-bit2='02:00:00'\n-cit2='02:00:00'\n\n\n\n\nLong\n\n\n--baseline_interval_time_2='02:00:00'\n--current_interval_time_2='02:00:00'\n\n\n\n\nview_by\n\n\nOverride what Summary Display panel to navigate to.\n\n\nExample:\n\n\nShort\n\n\n-vb=S\n\n\n\n\nLong\n\n\n--view_by=P\n\n\n\n\nview_type\n\n\nOverrides what type of data displays to navigate to. (i.e. Standard Activity, Exceptions, Errors, etc...)\n\n\nExample:\n\n\nShort\n\n\n-vt=X\n\n\n\n\nLong\n\n\n--view_type=E\n\n\n\n\nview_option\n\n\nOverride what additional Summary Display panel to navigate to within certain displays in Subsystem Analyzer\n\n\nExample:\n\n\nShort\n\n\n-vo=C\n\n\n\n\nLong\n\n\n--view_option=C\n\n\n\n\nenvironment\n\n\nOverrides the release environment of the products to use. This parameter overrides both the JSON input file and/or the frameworks\ndefault of \nR19\n\n\nShort\n\n\n-env=R19\n\n\n\n\nLong\n\n\n--environment=R19\n\n\n\n\nEntering via DB.ALL\n\n\nTo enter into the products using the \"Extended General Selection Menu\", i.e. DB.ALL using an overriding parmlib and/or suffix.\nSimply specify the overriding parmlib and optional a suffix in \n()\n.\n\n\nExample:\n\n\n--environment=SPEAN03.R19.PARMLIB(99)\n\n\n\n\nrange_pct\n\n\nOverrides the allowable plus or minus range percentage the comparison can be between. This parameter overrides the JSON parameter\nspecified and the tests default value.\n\n\nShort\n\n\n-rp=15\n\n\n\n\nLong\n\n\n--range_pct=15\n\n\n\n\nplan\n\n\nOverrides the value that can be used to identify a row on a Planname Display or the keyword \"ALL\" which can indicate to some tests that all the Plans should be selected.\n\n\nShort\n\n\n-pln=rtpplnmn\n\n\n\n\nLong\n\n\n--plan=rtpplnmn\n\n\n\n\nprogram\n\n\nOverrides the value that can be used to identify a row on a Program Display or the keyword \"ALL\" which can indicate to some tests that all the Programs should be selected.\n\n\nShort\n\n\n-pgm=rtpplnmn\n\n\n\n\nLong\n\n\n--program=rtpplnmn\n\n\n\n\ndbname\n\n\nOverrides the value that can be used to identify a row on the Database Activity Display or the keyword \"ALL\" which indicates that all the Databases should be selected.\n\n\nShort\n\n\n-db=SEGMDB\n\n\n\n\nLong\n\n\n--dbname=SEGMDB\n\n\n\n\nkey_option\n\n\nOverrides the single character that is to be used in the \"Key\" field on the standard activity \"Key Summary Display\"\n\n\nShort\n\n\n-ko=R\n\n\n\n\nLong\n\n\n--key_option=R\n\n\n\n\nkey_value\n\n\nOverrides the value used to identify the row in the \"Key\" column on the standard activity Key Summary Display.\n\n\nShort\n\n\n-kv='TSO BATCH'\n\n\n\n\nLong\n\n\n--key_value='QARTP01'\n\n\n\n\ncolumn\n\n\nOverrides the specific column name used by a test. The use of the column name parameter can be different for each type of test.\nRefer to the documentation for the specific test as to its meaning and use.\n\n\nLong\n\n\n--column='INDB2_TIME'\n\n\n\n\ncollid\n\n\nOverrides the value used to identify a row on a display that contains the \"COLLID\" column\n\n\nLong\n\n\n--collid='RTPCOLUMN'\n\n\n\n\nline_command\n\n\nOverrides the single character line command option to be used on a display row.\n\n\nShort\n\n\n-lc='D'\n\n\n\n\nLong\n\n\n--line_command='D'\n\n\n\n\nwait_to_complete\n\n\nOverrides the wait_to_complete parameter in the JSON file. Use of the parameter can be different for each type of test. Refer to the documentation for the specific test as to its meaning and use.\n\n\nShort\n\n\n-wtc=False\n\n\n\n\nLong\n\n\n--wait_to_complete=True\n\n\n\n\nxman\n\n\nOverrides the Xmanager name.\n\n\nLong\n\n\n--xman='PTXDEV19'\n\n\n\n\nabend_in\n\n\nOverrides the value used in the JSON parameter for indicating which module in the collection engine to force abends to occur.\n\n\nValid values are:\n\n\nFor PDT:\n DII or DIU\n\n\nFor PSA:\n coming soon\n\n\nLong\n\n\n--abend_in='DII'\n\n\n\n\nnum_ar\n\n\nOverrides the value used in the JSON parameter of how many times abend restart functionality should be driven in a single test.\n\n\nLong\n\n\n--num_ar=3\n\n\n\n\nrtpj_file\n\n\nOverrides the name of the RTPJ JSON to be used.\n\n\nLong\n\n\n--rtpj_file=Select_Count_Test.JSON\n\n\n\n\nrtpj_library\n\n\nOverrides the library location used in the JSON file.\n\n\nLong\n\n\n--rtpj_library=C:\\Users\\spean03\\Desktop\\JSON\\PDT1497\n\n\n\n\nrtpj_sync\n\n\nOverrides the \nrtpj_sync\n parameter in the JSON file.\n\n\nLong\n\n\n--rtpj_sync=true\n\n\n\n\nrtpj_log_level\n\n\nOverrides the \nrtpj_log_level\n parameter in the JSON file.\n\n\nLong\n\n\n--rtpj_log_level=ERROR\n\n\n\n\noutput_location\n\n\nOverrides the specified directory location for the output of the test to be written to.\n\n\nExecuting via Locally -\n the directory can be any valid path on your local machine and the directory and file will be\n created for you automatically.\n\n\nExecuting via Jenkins -\n This parameter should not be altered.\n\n\nLong\n\n\n--output_location=C:\\Users\\spean03\\Desktop\\output\n\n\n\n\nhigh_level\n\n\nOverrides the high_level JSON parameter in the options object for starting a product collection.\n\n\nLong\n\n\n--high_level=PDTDBA.R19\n\n\n\n\ncollection_profile\n\n\nOverrides the coll_profile JSON parameter in the options object for starting a Detector collection.\n\n\nLong\n\n\n--collection_profile=COLLALL\n\n\n\n\nitime\n\n\nOverrides the itime JSON parameter in the options object for starting a product collection.\n\n\nLong\n\n\n--itime=24:00\n\n\n\n\nt_limit\n\n\nOverrides the t_limit JSON parameter in the options object for starting a product collection.\n\n\nLong\n\n\n--t_limit=01:00\n\n\n\n\nsamp\n\n\nOverrides the samp JSON parameter in the options object for starting a Subsystem Analyzer collection.\n\n\nLong\n\n\n--samp=3",
            "title": "Command Line Options"
        },
        {
            "location": "/rtppy/command-line-options/#command-line-options",
            "text": "Options described below have a short and long version, prefixed with either  -  ( short option ) or  --  ( long option ) and can\noverride the parameters specified in the JSON input file and/or the frameworks default values.  See the specific  test documentation  for the command line options that apply.",
            "title": "Command Line Options"
        },
        {
            "location": "/rtppy/command-line-options/#lpar",
            "text": "The LPAR in which to connect to.  Example:  Short  -lp=ca31  Long  --lpar=ca31",
            "title": "lpar"
        },
        {
            "location": "/rtppy/command-line-options/#userid",
            "text": "The ID to use to log onto the LPAR.  Example:  Short  -usr=spean03  Long  --userid=speana3",
            "title": "userid"
        },
        {
            "location": "/rtppy/command-line-options/#ssid",
            "text": "The primary SSID to be used for test execution.  Example:  Short  -ss=d12a  Long  --ssid=d12a",
            "title": "ssid"
        },
        {
            "location": "/rtppy/command-line-options/#ssid2",
            "text": "A second ssid to be used during test execution.  Example:  Short  -ss2=d11a  Long  --ssid2=d11a",
            "title": "ssid2"
        },
        {
            "location": "/rtppy/command-line-options/#file",
            "text": "Specifies the name of the input file, in JSON format, that contains the test(s) to execute along with the parameters needed.\nThe  file  option can reference just a file name in which the indicated file will be searched for out of the default\ntest library,  /rtppy/python_test_library . Or a complete path can be specified, which is useful to reference a JSON file located\non your local machine for individual executions, debugging, or future test development.  Example:  Short  -f=view_by_tests.json\n-f=C:\\Users\\spean03\\Desktop\\mytestparms.json  Long  --file=view_by_tests.json\n--file=C:\\Users\\spean03\\Desktop\\mytestparms.json",
            "title": "file"
        },
        {
            "location": "/rtppy/command-line-options/#print",
            "text": "The print option provides the functionality to print out to the console all the test descriptions (if coded in the JSON file) or the raw contents of the JSON file itself pointed to by the  --file  parameter. To print just the test descriptions just provide the option without a value. To print the raw contents provide the value \"raw\" with the option.  Examples:  print just descriptions  -p --file=pdt_interval_compare_all_standard_activity_view_by_tests.json  (print raw contents)  -p=raw --file=pdt_interval_compare_all_standard_activity_view_by_tests.json",
            "title": "print"
        },
        {
            "location": "/rtppy/command-line-options/#baseline_vcat",
            "text": "Overrides the VCAT name to be used to identify the baseline datastore to use.  Example:  Short  -bv=PDTDBA.R19  Long  --baseline_vcat=PDTDBA.R19",
            "title": "baseline_vcat"
        },
        {
            "location": "/rtppy/command-line-options/#baseline_datastore",
            "text": "Overrides the datastore that should be considered to contain the baseline execution metrics.  Example:  Short  -bld=dtvnext  Long  --baseline_datastore=dtvnext",
            "title": "baseline_datastore"
        },
        {
            "location": "/rtppy/command-line-options/#current_vcat",
            "text": "Overrides the VCAT name to be used to identify the current datastore to use.  Example:  Short  -cv=PDTDBA.R19  Long  --current_vcat=PDTDBA.R19",
            "title": "current_vcat"
        },
        {
            "location": "/rtppy/command-line-options/#current_datastore",
            "text": "Overrides the datastore that should be considered to contain the current execution metrics to compare against the baseline.  Example:  Short  -cud=mycurrent  Long  --current_datastore=mycurrent",
            "title": "current_datastore"
        },
        {
            "location": "/rtppy/command-line-options/#baseline_interval_datecurrent_interval_date",
            "text": "Overrides the interval date in the datastore that should be selected in combination with the corresponding interval time parameter.",
            "title": "baseline_interval_date/current_interval_date"
        },
        {
            "location": "/rtppy/command-line-options/#format",
            "text": "The interval date can be supplied as it appears on the products \"Datastore Interval Summary Display\" or a value string\nof \"1\" can be used to indicate the most recent interval should be selected.  Using  16/05/13 :",
            "title": "Format"
        },
        {
            "location": "/rtppy/command-line-options/#short",
            "text": "-bld='16/05/13'\n-cid='16/05/13'  OR  -bid='1'\n-cid='1'",
            "title": "Short"
        },
        {
            "location": "/rtppy/command-line-options/#long",
            "text": "--baseline_interval_date='16/05/13'\n--current_interval_date='16/05/13'  OR  --baseline_interval_date='1'\n--current_interval_date='1'",
            "title": "Long"
        },
        {
            "location": "/rtppy/command-line-options/#baseline_interval_timecurrent_interval_time",
            "text": "Further identifies and overrides the interval time in the datastore that should be selected in combination with the interval date parameter. Unless the interval date parameter indicates the most recent interval should be selected, in which the interval time parameter is ignored.",
            "title": "baseline_interval_time/current_interval_time"
        },
        {
            "location": "/rtppy/command-line-options/#format_1",
            "text": "The interval time should be supplied as it appears on the products \"Datastore Interval Summary Display\".  Using  02:00:00 :",
            "title": "Format"
        },
        {
            "location": "/rtppy/command-line-options/#short_1",
            "text": "-bit='02:00:00'\n-cit='02:00:00'",
            "title": "Short"
        },
        {
            "location": "/rtppy/command-line-options/#long_1",
            "text": "--baseline_interval_time='02:00:00'\n--current_interval_time='02:00:00'",
            "title": "Long"
        },
        {
            "location": "/rtppy/command-line-options/#baseline_interval_date_2current_interval_date_2",
            "text": "Overrides the second interval date in the datastore that should be selected in combination with the corresponding interval_time_2 parameter.",
            "title": "baseline_interval_date_2/current_interval_date_2"
        },
        {
            "location": "/rtppy/command-line-options/#format_2",
            "text": "",
            "title": "Format"
        },
        {
            "location": "/rtppy/command-line-options/#short_2",
            "text": "-bld2='16/05/13'\n-cid2='16/05/13'  OR  -bid2='1'\n-cid2='1'",
            "title": "Short"
        },
        {
            "location": "/rtppy/command-line-options/#long_2",
            "text": "--baseline_interval_date_2='16/05/13'\n--current_interval_date_2='16/05/13'  OR  --baseline_interval_date_2='1'\n--current_interval_date_2='1'",
            "title": "Long"
        },
        {
            "location": "/rtppy/command-line-options/#baseline_interval_time_2current_interval_time_2",
            "text": "Overrides the second interval time in the datastore that should be selected in combination with the corresponding interval_date_2 parameter.",
            "title": "baseline_interval_time_2/current_interval_time_2"
        },
        {
            "location": "/rtppy/command-line-options/#format_3",
            "text": "",
            "title": "Format"
        },
        {
            "location": "/rtppy/command-line-options/#short_3",
            "text": "-bit2='02:00:00'\n-cit2='02:00:00'",
            "title": "Short"
        },
        {
            "location": "/rtppy/command-line-options/#long_3",
            "text": "--baseline_interval_time_2='02:00:00'\n--current_interval_time_2='02:00:00'",
            "title": "Long"
        },
        {
            "location": "/rtppy/command-line-options/#view_by",
            "text": "Override what Summary Display panel to navigate to.  Example:  Short  -vb=S  Long  --view_by=P",
            "title": "view_by"
        },
        {
            "location": "/rtppy/command-line-options/#view_type",
            "text": "Overrides what type of data displays to navigate to. (i.e. Standard Activity, Exceptions, Errors, etc...)  Example:  Short  -vt=X  Long  --view_type=E",
            "title": "view_type"
        },
        {
            "location": "/rtppy/command-line-options/#view_option",
            "text": "Override what additional Summary Display panel to navigate to within certain displays in Subsystem Analyzer  Example:  Short  -vo=C  Long  --view_option=C",
            "title": "view_option"
        },
        {
            "location": "/rtppy/command-line-options/#environment",
            "text": "Overrides the release environment of the products to use. This parameter overrides both the JSON input file and/or the frameworks\ndefault of  R19  Short  -env=R19  Long  --environment=R19",
            "title": "environment"
        },
        {
            "location": "/rtppy/command-line-options/#entering-via-dball",
            "text": "To enter into the products using the \"Extended General Selection Menu\", i.e. DB.ALL using an overriding parmlib and/or suffix.\nSimply specify the overriding parmlib and optional a suffix in  () .  Example:  --environment=SPEAN03.R19.PARMLIB(99)",
            "title": "Entering via DB.ALL"
        },
        {
            "location": "/rtppy/command-line-options/#range_pct",
            "text": "Overrides the allowable plus or minus range percentage the comparison can be between. This parameter overrides the JSON parameter\nspecified and the tests default value.  Short  -rp=15  Long  --range_pct=15",
            "title": "range_pct"
        },
        {
            "location": "/rtppy/command-line-options/#plan",
            "text": "Overrides the value that can be used to identify a row on a Planname Display or the keyword \"ALL\" which can indicate to some tests that all the Plans should be selected.  Short  -pln=rtpplnmn  Long  --plan=rtpplnmn",
            "title": "plan"
        },
        {
            "location": "/rtppy/command-line-options/#program",
            "text": "Overrides the value that can be used to identify a row on a Program Display or the keyword \"ALL\" which can indicate to some tests that all the Programs should be selected.  Short  -pgm=rtpplnmn  Long  --program=rtpplnmn",
            "title": "program"
        },
        {
            "location": "/rtppy/command-line-options/#dbname",
            "text": "Overrides the value that can be used to identify a row on the Database Activity Display or the keyword \"ALL\" which indicates that all the Databases should be selected.  Short  -db=SEGMDB  Long  --dbname=SEGMDB",
            "title": "dbname"
        },
        {
            "location": "/rtppy/command-line-options/#key_option",
            "text": "Overrides the single character that is to be used in the \"Key\" field on the standard activity \"Key Summary Display\"  Short  -ko=R  Long  --key_option=R",
            "title": "key_option"
        },
        {
            "location": "/rtppy/command-line-options/#key_value",
            "text": "Overrides the value used to identify the row in the \"Key\" column on the standard activity Key Summary Display.  Short  -kv='TSO BATCH'  Long  --key_value='QARTP01'",
            "title": "key_value"
        },
        {
            "location": "/rtppy/command-line-options/#column",
            "text": "Overrides the specific column name used by a test. The use of the column name parameter can be different for each type of test.\nRefer to the documentation for the specific test as to its meaning and use.  Long  --column='INDB2_TIME'",
            "title": "column"
        },
        {
            "location": "/rtppy/command-line-options/#collid",
            "text": "Overrides the value used to identify a row on a display that contains the \"COLLID\" column  Long  --collid='RTPCOLUMN'",
            "title": "collid"
        },
        {
            "location": "/rtppy/command-line-options/#line_command",
            "text": "Overrides the single character line command option to be used on a display row.  Short  -lc='D'  Long  --line_command='D'",
            "title": "line_command"
        },
        {
            "location": "/rtppy/command-line-options/#wait_to_complete",
            "text": "Overrides the wait_to_complete parameter in the JSON file. Use of the parameter can be different for each type of test. Refer to the documentation for the specific test as to its meaning and use.  Short  -wtc=False  Long  --wait_to_complete=True",
            "title": "wait_to_complete"
        },
        {
            "location": "/rtppy/command-line-options/#xman",
            "text": "Overrides the Xmanager name.  Long  --xman='PTXDEV19'",
            "title": "xman"
        },
        {
            "location": "/rtppy/command-line-options/#abend_in",
            "text": "Overrides the value used in the JSON parameter for indicating which module in the collection engine to force abends to occur.  Valid values are:  For PDT:  DII or DIU  For PSA:  coming soon  Long  --abend_in='DII'",
            "title": "abend_in"
        },
        {
            "location": "/rtppy/command-line-options/#num_ar",
            "text": "Overrides the value used in the JSON parameter of how many times abend restart functionality should be driven in a single test.  Long  --num_ar=3",
            "title": "num_ar"
        },
        {
            "location": "/rtppy/command-line-options/#rtpj_file",
            "text": "Overrides the name of the RTPJ JSON to be used.  Long  --rtpj_file=Select_Count_Test.JSON",
            "title": "rtpj_file"
        },
        {
            "location": "/rtppy/command-line-options/#rtpj_library",
            "text": "Overrides the library location used in the JSON file.  Long  --rtpj_library=C:\\Users\\spean03\\Desktop\\JSON\\PDT1497",
            "title": "rtpj_library"
        },
        {
            "location": "/rtppy/command-line-options/#rtpj_sync",
            "text": "Overrides the  rtpj_sync  parameter in the JSON file.  Long  --rtpj_sync=true",
            "title": "rtpj_sync"
        },
        {
            "location": "/rtppy/command-line-options/#rtpj_log_level",
            "text": "Overrides the  rtpj_log_level  parameter in the JSON file.  Long  --rtpj_log_level=ERROR",
            "title": "rtpj_log_level"
        },
        {
            "location": "/rtppy/command-line-options/#output_location",
            "text": "Overrides the specified directory location for the output of the test to be written to.  Executing via Locally -  the directory can be any valid path on your local machine and the directory and file will be\n created for you automatically.  Executing via Jenkins -  This parameter should not be altered.  Long  --output_location=C:\\Users\\spean03\\Desktop\\output",
            "title": "output_location"
        },
        {
            "location": "/rtppy/command-line-options/#high_level",
            "text": "Overrides the high_level JSON parameter in the options object for starting a product collection.  Long  --high_level=PDTDBA.R19",
            "title": "high_level"
        },
        {
            "location": "/rtppy/command-line-options/#collection_profile",
            "text": "Overrides the coll_profile JSON parameter in the options object for starting a Detector collection.  Long  --collection_profile=COLLALL",
            "title": "collection_profile"
        },
        {
            "location": "/rtppy/command-line-options/#itime",
            "text": "Overrides the itime JSON parameter in the options object for starting a product collection.  Long  --itime=24:00",
            "title": "itime"
        },
        {
            "location": "/rtppy/command-line-options/#t_limit",
            "text": "Overrides the t_limit JSON parameter in the options object for starting a product collection.  Long  --t_limit=01:00",
            "title": "t_limit"
        },
        {
            "location": "/rtppy/command-line-options/#samp",
            "text": "Overrides the samp JSON parameter in the options object for starting a Subsystem Analyzer collection.  Long  --samp=3",
            "title": "samp"
        },
        {
            "location": "/rtppy/json-parameters/",
            "text": "JSON parameters\n\n\n\n\nBelow is the complete list of parameters that can be specified in a JSON file. View the documentation for the\n\ntest\n to find out what parameters are valid.\n\n\nConnection object parameters\n\n\n\n\nlpar\n\n\nThe LPAR in which to connect to.\n\n\n\"lpar\": \"ca31\"\n\n\n\n\nuserid\n\n\nThe ID to use to log onto the LPAR.\n\n\n\"userid\": \"qartp01\"\n\n\n\n\nssid\n\n\nThe primary SSID to be used for test execution.\n\n\n\"ssid\": \"d12a\"\n\n\n\n\nssid2\n\n\nA second ssid to use during test execution. Refer to the documentation for the specific test as to its meaning and use.\n\n\n\"ssid2\": \"d11a\"\n\n\n\n\nTest object parameters\n\n\n\n\ndescription\n\n\nCan be provided to give a description about a test. The occurrence of the description parameter also provides content for the \nprint\n command line option functionality to print the description to the console for you without having to open the JSON file to see it.\n\n\n\"description\": \"description about a this test\"\n\n\n\n\nExample in a JSON file:\n\n\n \"tests\":\n  [\n    {\n      \"description\": \"Compares all the data for an interval between a baseline and a current run for the view_by option display specified.\",\n      \"test_type\": \"interval compare\",\n      ...\n    }\n  ]\n\n\n\n\nproduct_code\n\n\nIdentifies the product the test is for using the 3 character product code. (e.g. PDT, PSA, PTT, etc...)\n\n\n\"product_code\": \"PDT\"\n\n\n\n\nbaseline_vcat\n\n\nIdentifies the VCAT name to be used to identify the baseline datastore to use.\n\n\n\"baseline_vcat\": \"PDTDBA.QATEST\"\n\n\n\n\nbaseline_datastore\n\n\nIdentifies the datastore that should be considered to contain the baseline execution metrics.\n\n\n\"baseline_datastore\": \"BASEDS\"\n\n\n\n\ncurrent_vcat\n\n\nIdentifies the VCAT name to be used to identify the current datastore to use.\n\n\n\"current_vcat\": \"PDTDBA.R19\"\n\n\n\n\ncurrent_datastore\n\n\nIdentifies the datastore that should be considered to contain the current execution metrics to compare against the baseline.\n\n\n\"current_datastore\": \"QATEST\"\n\n\n\n\nbaseline_interval_date/current_interval_date\n\n\nIdentifies the interval, by date, in the datastore that should be selected in combination with the corresponding\ninterval_time parameter below.\n\n\nFormat\n\n\nThe interval date can be supplied as it appears on the products \"Datastore Interval Summary Display\" or a value string\nof \"1\" can be used to indicate the most recent interval should be selected.\n\n\nUsing \n16/05/13\n:\n\n\n\"baseline_interval_date\": \"16/05/13\"\n\"current_interval_date\": \"16/05/13\"\n\n\n\n\nOR\n\n\n\"baseline_interval_date\": \"1\"\n\"current_interval_date\": \"1\"\n\n\n\n\nbaseline_interval_time/current_interval_time\n\n\nFurther identifies the interval, by time, in the datastore that should be selected in combination with the corresponding\ninterval_date parameter specified above. Unless the interval date parameter indicates the most recent interval should be\nselected, in which the interval time parameter is ignored.\n\n\nFormat\n\n\nThe interval time should be supplied as it appears on the products \"Datastore Interval Summary Display\".\n\n\nUsing \n02:00:00\n:\n\n\n\"baseline_interval_time\": \"02:00:00\"\n\"current_interval_time\": \"02:00:00\"\n\n\n\n\nbaseline_interval_date_2/current_interval_date_2\n\n\nUsed to indicate a range of intervals should be selected by identifying a second interval, by date, in the datastore that should be selected in combination with the corresponding interval_time_2 parameter below.\n\n\n\"baseline_interval_date_2\": \"16/05/13\"\n\"current_interval_date_2\": \"16/05/13\"\n\n\n\n\nOR\n\n\n\"baseline_interval_date_2\": \"1\"\n\"current_interval_date_2\": \"1\"\n\n\n\n\nbaseline_interval_time_2/current_interval_time_2\n\n\nFurther identifies the second interval that should be selected, by time, in the datastore that should be selected with the corresponding interval_date_2 parameter above when requesting a range of intervals to be selected. If the interval_date_2 parameter indicates the most recent interval should be selected, then the interval_time_2 parameter is ignored.\n\n\n\"baseline_interval_time_2\": \"02:00:00\"\n\"current_interval_time_2\": \"02:00:00\"\n\n\n\n\nview_type\n\n\nIndicates what type of data displays to navigate to. (i.e. Standard Activity, Exceptions, Errors, etc...)\n\n\n\"view_type\": \"X\"\n\n\n\n\nview_by\n\n\nIndicates what Summary Display panel to navigate to.\n\n\n\"view_by\": \"S\"\n\n\n\n\nview_option\n\n\nIndicates what additional Summary Display panel to navigate to within certain displays in Subsystem Analyzer.\n\n\n\"view_option\": \"C\"\n\n\n\n\nenvironment\n\n\nIndicates the release environment of the products to use. This parameter overrides the frameworks default of \nR19\n.\n\n\n\"environment\": \"DV19\"\n\n\n\n\nEntering via DB.ALL\n\n\nTo enter into the products using the \"Extended General Selection Menu\", i.e. DB.ALL, using an overriding parmlib and/or suffix.\nSimply specify the overriding parmlib and optionally a suffix in \n()\n.\n\n\nExample:\n\n\n\"environment\": \"MY.OVERRIDE.PARMLIB(99)\"\n\n\n\n\nrange_pct\n\n\nIndicates allowable plus or minus range percentage the comparison can be between. This parameter can override a tests default value.\n\n\n\"range_pct\": 15\n\n\n\n\ncolumn\n\n\nCan be used to specify a specific column name for a test to use. The use of the column name can be different for each type of test.\nRefer to the documentation for the specific test as to its meaning and use.\n\n\n\"column\": \"INDB2_TIME\"\n\n\n\n\nline_command\n\n\nIndicates the single character line command option to be used on a display row.\n\n\n\"line_command\": \"G\"\n\n\n\n\nlevel\n\n\nIndicates to what level data should be aggregated for during an aggregation comparison. Valid values are \nplan\n, \nprogram\n, or \nkeys\n.\n\n\n\n\nplan - indicates that the program statistics should be aggregated and compared to the plan level.\n\n\nprogram - indicates that the statement statistics should be aggregated and compared to the program level.\n\n\nkeys - indicates that the aggregation should be between a key summary display, which is based on the optional \nkey_option\n parameter provided, and\neither a \"\nKey Planname Display\n\" or a \"\nKey Package Display\n\"\n\n\ndbase - indicates that the Table Activity data statistics should be aggregated and compared to the Database level.\n\n\n\n\n\"level\": \"plan\"\n\"level\": \"program\"\n\"level\": \"keys\"\n\n\n\n\nkey_option\n\n\nSpecifies the single character that is to be used in the \"Key\" field on the standard activity Key Summary Display.\n\n\n\"key_option\": \"R\"\n\n\n\n\nkey_value\n\n\nIndicates the value for the \"Key\" column on the standard activity Key Summary Display or the keyword \"ALL\" which indicates to some tests that all the Key rows on the display should be selected.\n\n\n\"key_value\": \"SPEAN03\"\n\n\n\n\nplan\n\n\nSpecifies a value that can be used to identify a row on a Planname Display or the keyword \"ALL\" which can indicate to some tests that all the Plans should be selected.\n\n\n\"plan\": \"RTPPLNMN\"\n\n\n\n\nOr\n\n\n\"plan\": \"ALL\"\n\n\n\n\nprogram\n\n\nSpecifies a value that can be used to identify a row on a Program Display or the keyword \"ALL\" which can indicate to some tests that all the Programs should be selected.\n\n\n\"program\": \"REG133DR\"\n\n\n\n\nOr\n\n\n\"program\": \"ALL\"\n\n\n\n\ncollid\n\n\nSpecifies a value that can be used to identify a row on a display that contains the \"COLLID\" column.\n\n\n\"collid\": \"RTPCOLMN\"\n\n\n\n\ndbname\n\n\nSpecifies a value that can be used to identify a row on the Database Activity Display or the keyword \"ALL\" which indicates that all the Databases should be selected.\n\n\n\"dbname\": \"SEGMDB\"\n\n\n\n\nOr\n\n\n\"dbname\": \"ALL\"\n\n\n\n\noutput_location\n\n\nIndicates that all output should be written to the specified directory location.\n\n\nExecuting via Locally -\n the directory can be any valid path on your local machine and the directory and file will be\n created for you automatically.\n\n\nExecuting via Jenkins -\n This parameter should not be altered.\n\n\n\"output_location\": \"C:\\Users\\spean03\\Desktop\\output\"\n\n\n\n\noptions\n\n\nCan be used to contain an array of additional JSON parameters defined within a test. The use of the options parameter can be different for each type of test.\nRefer to the documentation for the specific test as to its meaning and use.\n\n\n\"options\":\n{\n  ...\n}\n\n\n\n\nxman\n\n\nSpecifies the name of an Xmanager.\n\n\n\"xman\": \"PTXRUN20\"\n\n\n\n\nabend_in\n\n\nIndicates which module in the collection engine to force abends to occur.\n\n\nValid values are:\n\n\nFor PDT:\n DII or DIU\n\n\nFor PSA:\n coming soon\n\n\n\"abend_in\": \"DII\"\n\"abend_in\": \"DIU\"\n\n\n\n\nwait_time_after_coll_init\n\n\nIndicates in minutes how long to wait after a product collection has been started.  \n\n\n\"wait_time_after_coll_init\": 10\n\n\n\n\nwait_time_after_abend_restart\n\n\nIndicates in minutes how long to wait after the abend restart functionality has completed before another forced abend restart is attempted.\n\n\n\"wait_time_after_abend_restart\": 60\n\n\n\n\nnumber_of_abend_restarts\n\n\nIndicates how many times abend restart functionality should be driven in a single test.\n\n\n\"number_of_abend_restarts\": 4\n\n\n\n\nrtpj_file\n\n\nThe name of an RTPJ JSON file.\n\n\n\"rtpj_file\": \"Select_Count_Test.JSON\"\n\n\n\n\nrtpj_library\n\n\nIndicates the library where the \nrtpj_file\n should be located.\n\n\n\"rtpj_library\": \"C:\\Users\\spean03\\Desktop\\JSON\\PDT1497\"\n\n\n\n\nrtpj_sync\n\n\nIndicates whether the calling of RTPJ to execute the \nrtpj_file\n is done as a synchronous or asynchronous process.\n\n\nValid values are \ntrue\n or \nfalse\n. Defaults to \ntrue\n\n\n\"rtpj_sync\": \"true\"\n\"rtpj_sync\": \"false\"\n\n\n\n\nrtpj_log_level\n\n\nCan be used to override the RTPJ frameworks \n\"LOG\"\n level used when executing the \nrtpj_file\n. Defaults to \nDEFAULT\n which\nindicates the behavior is based on value of the \nrtpj_sync\n parameter.\n\n\nIf \nrtpj_sync\n is set to \ntrue\n then the RTPJ default log level is used, which is \nINFO\n. If \nrtpj_sync\n is set to \nfalse\n then\nthe RTPJ log level is set to \nERROR\n.\n\n\nValid values are the same as listed for the \nLOG\n\n\n\"rtpj_log_level\": \"ERROR\"\n\"rtpj_log_level\": \"WARN\"\n\n\n\n\nwait_to_complete\n\n\nUse of the parameter can be different for each type of test. Refer to the documentation for the specific test as to its meaning and use.\n\n\n\"wait_to_complete\": \"true\"\n\"wait_to_complete\": \"False\"\n\n\n\n\ntext_type\n\n\nCan be used to indicate dynamic or static SQL. Specific usage can be different for each type of test, refer to the documentation for the specific test.\n\n\n\"text_type\": \"static\"\n\"text_type\": \"dynamic\"\n\n\n\n\ntext list\n\n\nA list composed of key/value pairs where the key is any string and the value an SQL text string.\n\n\n\"text1\": \"SELECT * FROM SYSIBM.SYSDUMMY1\"",
            "title": "JSON Parameters"
        },
        {
            "location": "/rtppy/json-parameters/#json-parameters",
            "text": "Below is the complete list of parameters that can be specified in a JSON file. View the documentation for the test  to find out what parameters are valid.",
            "title": "JSON parameters"
        },
        {
            "location": "/rtppy/json-parameters/#connection-object-parameters",
            "text": "",
            "title": "Connection object parameters"
        },
        {
            "location": "/rtppy/json-parameters/#lpar",
            "text": "The LPAR in which to connect to.  \"lpar\": \"ca31\"",
            "title": "lpar"
        },
        {
            "location": "/rtppy/json-parameters/#userid",
            "text": "The ID to use to log onto the LPAR.  \"userid\": \"qartp01\"",
            "title": "userid"
        },
        {
            "location": "/rtppy/json-parameters/#ssid",
            "text": "The primary SSID to be used for test execution.  \"ssid\": \"d12a\"",
            "title": "ssid"
        },
        {
            "location": "/rtppy/json-parameters/#ssid2",
            "text": "A second ssid to use during test execution. Refer to the documentation for the specific test as to its meaning and use.  \"ssid2\": \"d11a\"",
            "title": "ssid2"
        },
        {
            "location": "/rtppy/json-parameters/#test-object-parameters",
            "text": "",
            "title": "Test object parameters"
        },
        {
            "location": "/rtppy/json-parameters/#description",
            "text": "Can be provided to give a description about a test. The occurrence of the description parameter also provides content for the  print  command line option functionality to print the description to the console for you without having to open the JSON file to see it.  \"description\": \"description about a this test\"  Example in a JSON file:   \"tests\":\n  [\n    {\n      \"description\": \"Compares all the data for an interval between a baseline and a current run for the view_by option display specified.\",\n      \"test_type\": \"interval compare\",\n      ...\n    }\n  ]",
            "title": "description"
        },
        {
            "location": "/rtppy/json-parameters/#product_code",
            "text": "Identifies the product the test is for using the 3 character product code. (e.g. PDT, PSA, PTT, etc...)  \"product_code\": \"PDT\"",
            "title": "product_code"
        },
        {
            "location": "/rtppy/json-parameters/#baseline_vcat",
            "text": "Identifies the VCAT name to be used to identify the baseline datastore to use.  \"baseline_vcat\": \"PDTDBA.QATEST\"",
            "title": "baseline_vcat"
        },
        {
            "location": "/rtppy/json-parameters/#baseline_datastore",
            "text": "Identifies the datastore that should be considered to contain the baseline execution metrics.  \"baseline_datastore\": \"BASEDS\"",
            "title": "baseline_datastore"
        },
        {
            "location": "/rtppy/json-parameters/#current_vcat",
            "text": "Identifies the VCAT name to be used to identify the current datastore to use.  \"current_vcat\": \"PDTDBA.R19\"",
            "title": "current_vcat"
        },
        {
            "location": "/rtppy/json-parameters/#current_datastore",
            "text": "Identifies the datastore that should be considered to contain the current execution metrics to compare against the baseline.  \"current_datastore\": \"QATEST\"",
            "title": "current_datastore"
        },
        {
            "location": "/rtppy/json-parameters/#baseline_interval_datecurrent_interval_date",
            "text": "Identifies the interval, by date, in the datastore that should be selected in combination with the corresponding\ninterval_time parameter below.",
            "title": "baseline_interval_date/current_interval_date"
        },
        {
            "location": "/rtppy/json-parameters/#format",
            "text": "The interval date can be supplied as it appears on the products \"Datastore Interval Summary Display\" or a value string\nof \"1\" can be used to indicate the most recent interval should be selected.  Using  16/05/13 :  \"baseline_interval_date\": \"16/05/13\"\n\"current_interval_date\": \"16/05/13\"  OR  \"baseline_interval_date\": \"1\"\n\"current_interval_date\": \"1\"",
            "title": "Format"
        },
        {
            "location": "/rtppy/json-parameters/#baseline_interval_timecurrent_interval_time",
            "text": "Further identifies the interval, by time, in the datastore that should be selected in combination with the corresponding\ninterval_date parameter specified above. Unless the interval date parameter indicates the most recent interval should be\nselected, in which the interval time parameter is ignored.",
            "title": "baseline_interval_time/current_interval_time"
        },
        {
            "location": "/rtppy/json-parameters/#format_1",
            "text": "The interval time should be supplied as it appears on the products \"Datastore Interval Summary Display\".  Using  02:00:00 :  \"baseline_interval_time\": \"02:00:00\"\n\"current_interval_time\": \"02:00:00\"",
            "title": "Format"
        },
        {
            "location": "/rtppy/json-parameters/#baseline_interval_date_2current_interval_date_2",
            "text": "Used to indicate a range of intervals should be selected by identifying a second interval, by date, in the datastore that should be selected in combination with the corresponding interval_time_2 parameter below.  \"baseline_interval_date_2\": \"16/05/13\"\n\"current_interval_date_2\": \"16/05/13\"  OR  \"baseline_interval_date_2\": \"1\"\n\"current_interval_date_2\": \"1\"",
            "title": "baseline_interval_date_2/current_interval_date_2"
        },
        {
            "location": "/rtppy/json-parameters/#baseline_interval_time_2current_interval_time_2",
            "text": "Further identifies the second interval that should be selected, by time, in the datastore that should be selected with the corresponding interval_date_2 parameter above when requesting a range of intervals to be selected. If the interval_date_2 parameter indicates the most recent interval should be selected, then the interval_time_2 parameter is ignored.  \"baseline_interval_time_2\": \"02:00:00\"\n\"current_interval_time_2\": \"02:00:00\"",
            "title": "baseline_interval_time_2/current_interval_time_2"
        },
        {
            "location": "/rtppy/json-parameters/#view_type",
            "text": "Indicates what type of data displays to navigate to. (i.e. Standard Activity, Exceptions, Errors, etc...)  \"view_type\": \"X\"",
            "title": "view_type"
        },
        {
            "location": "/rtppy/json-parameters/#view_by",
            "text": "Indicates what Summary Display panel to navigate to.  \"view_by\": \"S\"",
            "title": "view_by"
        },
        {
            "location": "/rtppy/json-parameters/#view_option",
            "text": "Indicates what additional Summary Display panel to navigate to within certain displays in Subsystem Analyzer.  \"view_option\": \"C\"",
            "title": "view_option"
        },
        {
            "location": "/rtppy/json-parameters/#environment",
            "text": "Indicates the release environment of the products to use. This parameter overrides the frameworks default of  R19 .  \"environment\": \"DV19\"",
            "title": "environment"
        },
        {
            "location": "/rtppy/json-parameters/#entering-via-dball",
            "text": "To enter into the products using the \"Extended General Selection Menu\", i.e. DB.ALL, using an overriding parmlib and/or suffix.\nSimply specify the overriding parmlib and optionally a suffix in  () .  Example:  \"environment\": \"MY.OVERRIDE.PARMLIB(99)\"",
            "title": "Entering via DB.ALL"
        },
        {
            "location": "/rtppy/json-parameters/#range_pct",
            "text": "Indicates allowable plus or minus range percentage the comparison can be between. This parameter can override a tests default value.  \"range_pct\": 15",
            "title": "range_pct"
        },
        {
            "location": "/rtppy/json-parameters/#column",
            "text": "Can be used to specify a specific column name for a test to use. The use of the column name can be different for each type of test.\nRefer to the documentation for the specific test as to its meaning and use.  \"column\": \"INDB2_TIME\"",
            "title": "column"
        },
        {
            "location": "/rtppy/json-parameters/#line_command",
            "text": "Indicates the single character line command option to be used on a display row.  \"line_command\": \"G\"",
            "title": "line_command"
        },
        {
            "location": "/rtppy/json-parameters/#level",
            "text": "Indicates to what level data should be aggregated for during an aggregation comparison. Valid values are  plan ,  program , or  keys .   plan - indicates that the program statistics should be aggregated and compared to the plan level.  program - indicates that the statement statistics should be aggregated and compared to the program level.  keys - indicates that the aggregation should be between a key summary display, which is based on the optional  key_option  parameter provided, and\neither a \" Key Planname Display \" or a \" Key Package Display \"  dbase - indicates that the Table Activity data statistics should be aggregated and compared to the Database level.   \"level\": \"plan\"\n\"level\": \"program\"\n\"level\": \"keys\"",
            "title": "level"
        },
        {
            "location": "/rtppy/json-parameters/#key_option",
            "text": "Specifies the single character that is to be used in the \"Key\" field on the standard activity Key Summary Display.  \"key_option\": \"R\"",
            "title": "key_option"
        },
        {
            "location": "/rtppy/json-parameters/#key_value",
            "text": "Indicates the value for the \"Key\" column on the standard activity Key Summary Display or the keyword \"ALL\" which indicates to some tests that all the Key rows on the display should be selected.  \"key_value\": \"SPEAN03\"",
            "title": "key_value"
        },
        {
            "location": "/rtppy/json-parameters/#plan",
            "text": "Specifies a value that can be used to identify a row on a Planname Display or the keyword \"ALL\" which can indicate to some tests that all the Plans should be selected.  \"plan\": \"RTPPLNMN\"  Or  \"plan\": \"ALL\"",
            "title": "plan"
        },
        {
            "location": "/rtppy/json-parameters/#program",
            "text": "Specifies a value that can be used to identify a row on a Program Display or the keyword \"ALL\" which can indicate to some tests that all the Programs should be selected.  \"program\": \"REG133DR\"  Or  \"program\": \"ALL\"",
            "title": "program"
        },
        {
            "location": "/rtppy/json-parameters/#collid",
            "text": "Specifies a value that can be used to identify a row on a display that contains the \"COLLID\" column.  \"collid\": \"RTPCOLMN\"",
            "title": "collid"
        },
        {
            "location": "/rtppy/json-parameters/#dbname",
            "text": "Specifies a value that can be used to identify a row on the Database Activity Display or the keyword \"ALL\" which indicates that all the Databases should be selected.  \"dbname\": \"SEGMDB\"  Or  \"dbname\": \"ALL\"",
            "title": "dbname"
        },
        {
            "location": "/rtppy/json-parameters/#output_location",
            "text": "Indicates that all output should be written to the specified directory location.  Executing via Locally -  the directory can be any valid path on your local machine and the directory and file will be\n created for you automatically.  Executing via Jenkins -  This parameter should not be altered.  \"output_location\": \"C:\\Users\\spean03\\Desktop\\output\"",
            "title": "output_location"
        },
        {
            "location": "/rtppy/json-parameters/#options",
            "text": "Can be used to contain an array of additional JSON parameters defined within a test. The use of the options parameter can be different for each type of test.\nRefer to the documentation for the specific test as to its meaning and use.  \"options\":\n{\n  ...\n}",
            "title": "options"
        },
        {
            "location": "/rtppy/json-parameters/#xman",
            "text": "Specifies the name of an Xmanager.  \"xman\": \"PTXRUN20\"",
            "title": "xman"
        },
        {
            "location": "/rtppy/json-parameters/#abend_in",
            "text": "Indicates which module in the collection engine to force abends to occur.  Valid values are:  For PDT:  DII or DIU  For PSA:  coming soon  \"abend_in\": \"DII\"\n\"abend_in\": \"DIU\"",
            "title": "abend_in"
        },
        {
            "location": "/rtppy/json-parameters/#wait_time_after_coll_init",
            "text": "Indicates in minutes how long to wait after a product collection has been started.    \"wait_time_after_coll_init\": 10",
            "title": "wait_time_after_coll_init"
        },
        {
            "location": "/rtppy/json-parameters/#wait_time_after_abend_restart",
            "text": "Indicates in minutes how long to wait after the abend restart functionality has completed before another forced abend restart is attempted.  \"wait_time_after_abend_restart\": 60",
            "title": "wait_time_after_abend_restart"
        },
        {
            "location": "/rtppy/json-parameters/#number_of_abend_restarts",
            "text": "Indicates how many times abend restart functionality should be driven in a single test.  \"number_of_abend_restarts\": 4",
            "title": "number_of_abend_restarts"
        },
        {
            "location": "/rtppy/json-parameters/#rtpj_file",
            "text": "The name of an RTPJ JSON file.  \"rtpj_file\": \"Select_Count_Test.JSON\"",
            "title": "rtpj_file"
        },
        {
            "location": "/rtppy/json-parameters/#rtpj_library",
            "text": "Indicates the library where the  rtpj_file  should be located.  \"rtpj_library\": \"C:\\Users\\spean03\\Desktop\\JSON\\PDT1497\"",
            "title": "rtpj_library"
        },
        {
            "location": "/rtppy/json-parameters/#rtpj_sync",
            "text": "Indicates whether the calling of RTPJ to execute the  rtpj_file  is done as a synchronous or asynchronous process.  Valid values are  true  or  false . Defaults to  true  \"rtpj_sync\": \"true\"\n\"rtpj_sync\": \"false\"",
            "title": "rtpj_sync"
        },
        {
            "location": "/rtppy/json-parameters/#rtpj_log_level",
            "text": "Can be used to override the RTPJ frameworks  \"LOG\"  level used when executing the  rtpj_file . Defaults to  DEFAULT  which\nindicates the behavior is based on value of the  rtpj_sync  parameter.  If  rtpj_sync  is set to  true  then the RTPJ default log level is used, which is  INFO . If  rtpj_sync  is set to  false  then\nthe RTPJ log level is set to  ERROR .  Valid values are the same as listed for the  LOG  \"rtpj_log_level\": \"ERROR\"\n\"rtpj_log_level\": \"WARN\"",
            "title": "rtpj_log_level"
        },
        {
            "location": "/rtppy/json-parameters/#wait_to_complete",
            "text": "Use of the parameter can be different for each type of test. Refer to the documentation for the specific test as to its meaning and use.  \"wait_to_complete\": \"true\"\n\"wait_to_complete\": \"False\"",
            "title": "wait_to_complete"
        },
        {
            "location": "/rtppy/json-parameters/#text_type",
            "text": "Can be used to indicate dynamic or static SQL. Specific usage can be different for each type of test, refer to the documentation for the specific test.  \"text_type\": \"static\"\n\"text_type\": \"dynamic\"",
            "title": "text_type"
        },
        {
            "location": "/rtppy/json-parameters/#text-list",
            "text": "A list composed of key/value pairs where the key is any string and the value an SQL text string.  \"text1\": \"SELECT * FROM SYSIBM.SYSDUMMY1\"",
            "title": "text list"
        },
        {
            "location": "/rtppy/creating-tests/",
            "text": "Creating Tests\n\n\n\n\nThe RTPPY framework uses the Javascript Object Notation (JSON) format to indicate what test is executed and its parameters.\nThe JSON structure consists of an object containing connection information followed by an array of 1 or more dictionary objects\nthat specify the test to execute and its parameters.\n\n\nBelow is an outline that can be used for creating a test file.\n\n\n{\n    \"connection\":\n    {...},\n    \"tests\":\n    [\n      {...},\n      {...},\n      {...}\n    ]\n}\n\n\n\n\nConnection Object\n\n\nThe connection parameter object specifies the \nlpar\n, \nssid\n, and \nuserid\n to be used for all the tests specified in the\ntest array.\n\n\nExample\n\n\n\"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n\n\n\n\nThese connection parameters are required but can be overridden at the \ncommand line level\n.\n\n\nTest Structure\n\n\nEach test can have its own set of parameters and command line overrides. Click on the test type name below to learn\nabout the test itself and its parameters.\n\n\n\n\nInterval Compare\n\n\nAggregate Compare\n\n\nStart/Stop Collection\n\n\nRTP SQL Activity Suite App\n\n\nAbend Restart\n\n\nDistributed SQL\n\n\nLock Release\n\n\n\n\nAdding to Test Library",
            "title": "Creating Tests"
        },
        {
            "location": "/rtppy/creating-tests/#creating-tests",
            "text": "The RTPPY framework uses the Javascript Object Notation (JSON) format to indicate what test is executed and its parameters.\nThe JSON structure consists of an object containing connection information followed by an array of 1 or more dictionary objects\nthat specify the test to execute and its parameters.  Below is an outline that can be used for creating a test file.  {\n    \"connection\":\n    {...},\n    \"tests\":\n    [\n      {...},\n      {...},\n      {...}\n    ]\n}",
            "title": "Creating Tests"
        },
        {
            "location": "/rtppy/creating-tests/#connection-object",
            "text": "The connection parameter object specifies the  lpar ,  ssid , and  userid  to be used for all the tests specified in the\ntest array.",
            "title": "Connection Object"
        },
        {
            "location": "/rtppy/creating-tests/#example",
            "text": "\"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },  These connection parameters are required but can be overridden at the  command line level .",
            "title": "Example"
        },
        {
            "location": "/rtppy/creating-tests/#test-structure",
            "text": "Each test can have its own set of parameters and command line overrides. Click on the test type name below to learn\nabout the test itself and its parameters.   Interval Compare  Aggregate Compare  Start/Stop Collection  RTP SQL Activity Suite App  Abend Restart  Distributed SQL  Lock Release",
            "title": "Test Structure"
        },
        {
            "location": "/rtppy/creating-tests/#adding-to-test-library",
            "text": "",
            "title": "Adding to Test Library"
        },
        {
            "location": "/rtppy/jenkins-output/",
            "text": "Viewing Output on Jenkins\n\n\n\n\nYou can view the output of a job executed from the Jenkins server by doing the following.\n\n\nStep 1 - Starting from the RTP folder, select the RTPPY build folder.\n\n\n\n\nStep 2 - Select the test.\n\n\n\n\nStep 3 - In the Build History window click on the build, via the number, you want to view the output for.\n\n\n\n\nStep 4 - View or download test output artifact\n\n\n\n\n\n\nTo download the output click the name of the file.\n\n\nClick \"view\" next to the name to view in the browser.",
            "title": "Viewing Output on Jenkins"
        },
        {
            "location": "/rtppy/jenkins-output/#viewing-output-on-jenkins",
            "text": "You can view the output of a job executed from the Jenkins server by doing the following.",
            "title": "Viewing Output on Jenkins"
        },
        {
            "location": "/rtppy/jenkins-output/#step-1-starting-from-the-rtp-folder-select-the-rtppy-build-folder",
            "text": "",
            "title": "Step 1 - Starting from the RTP folder, select the RTPPY build folder."
        },
        {
            "location": "/rtppy/jenkins-output/#step-2-select-the-test",
            "text": "",
            "title": "Step 2 - Select the test."
        },
        {
            "location": "/rtppy/jenkins-output/#step-3-in-the-build-history-window-click-on-the-build-via-the-number-you-want-to-view-the-output-for",
            "text": "",
            "title": "Step 3 - In the Build History window click on the build, via the number, you want to view the output for."
        },
        {
            "location": "/rtppy/jenkins-output/#step-4-view-or-download-test-output-artifact",
            "text": "To download the output click the name of the file.  Click \"view\" next to the name to view in the browser.",
            "title": "Step 4 - View or download test output artifact"
        },
        {
            "location": "/rtppy/interval-compare/",
            "text": "Interval Compare\n\n\nThe Interval Compare test type can validate all the data for an interval by comparing all the data at a summary display level, i.e.\nPlan Summary, Program Summary, Statement Summary etc, between a baseline and a current set of data.\n\n\nJenkins Test Status\n\n\nThe table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.\n\n\n\n\n\n\n\n\nJenkins Build Name\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nPDT_all_standard_activity_Interval_compare_summary_levels\n\n\n\n\n\n\n\n\nPDT_interval_compare_single_view_by_test\n\n\n\n\n\n\n\n\nPSA_all_object_activity_interval_compare_summary_levels\n\n\n\n\n\n\n\n\nPSA_interval_compare_single_view_by_test\n\n\n\n\n\n\n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\nbaseline_vcat\n\n\nbaseline_vcat\n\n\n\n\n\n\n\n\nbaseline_datastore\n\n\nbaseline_datastore\n\n\n\n\n\n\n\n\nbaseline_interval_date\n\n\nbaseline_interval_date\n\n\n\n\n\n\n\n\nbaseline_interval_time\n\n\nbaseline_interval_time\n\n\n\n\n\n\n\n\ncurrent_vcat\n\n\ncurrent_vcat\n\n\n\n\n\n\n\n\ncurrent_datastore\n\n\ncurrent_datastore\n\n\n\n\n\n\n\n\ncurrent_interval_date\n\n\ncurrent_interval_date\n\n\n\n\n\n\n\n\ncurrent_interval_time\n\n\ncurrent_interval_time\n\n\n\n\n\n\n\n\nview_by\n\n\nview_by\n\n\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nenvironment\n\n\nenvironment\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\nrange_pct\n\n\nrange_pct\n\n\nDefault - 10% if not specified.\n\n\n\n\n\n\nview_type\n\n\nview_type\n\n\nIf not provided then products default is used.\n\n\n\n\n\n\nview_option\n\n\nview_option\n\n\nApplies only to Subsystem Analyzer.\n\n\n\n\n\n\nkey_option\n\n\nkey_option\n\n\nIf \nview_by=K\n must be specified otherwise error occurs.\n\n\n\n\n\n\nssid2\n\n\nssid2\n\n\nIf provided indicates the baseline_datastore is for a different ssid than the primary.\n\n\n\n\n\n\ncolumn\n\n\ncolumn\n\n\nCan be used to indicate that only the data in the specified column should be compared for the test.\n\n\n\n\n\n\nbaseline_interval_date_2\n\n\nbaseline_interval_date_2\n\n\n\n\n\n\n\n\nbaseline_interval_time_2\n\n\nbaseline_interval_time_2\n\n\n\n\n\n\n\n\ncurrent_interval_date_2\n\n\ncurrent_interval_date_2\n\n\n\n\n\n\n\n\ncurrent_interval_time_2\n\n\ncurrent_interval_time_2\n\n\n\n\n\n\n\n\n\n\nJSON Examples\n\n\n\n\nNon-Key Display Example\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"view_by\": \"S\",\n        \"view_type\": \"A\"\n      }\n    ]\n}\n\n\n\n\nKey Display Example\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"view_by\": \"K\",\n        \"key_option\": \"R\",\n        \"view_type\": \"A\",\n        \"range_pct\": 15\n      }\n    ]\n}\n\n\n\n\nCompare only a specific column of data\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"view_by\": \"G\",\n        \"view_type\": \"A\",\n        \"column\": \"INDB2_TIME\"\n      }\n    ]\n}\n\n\n\n\nSelecting a range of intervals\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"baseline_interval_date_2\": \"16/07/20\",\n        \"baseline_interval_time_2\": \"12:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"12:42:34\",\n        \"current_interval_date_2\": \"16/07/20\",\n        \"current_interval_time_2\": \"12:42:34\",\n        \"view_by\": \"S\",\n        \"view_type\": \"A\"\n      }\n    ]\n}",
            "title": "Interval Compare"
        },
        {
            "location": "/rtppy/interval-compare/#interval-compare",
            "text": "The Interval Compare test type can validate all the data for an interval by comparing all the data at a summary display level, i.e.\nPlan Summary, Program Summary, Statement Summary etc, between a baseline and a current set of data.",
            "title": "Interval Compare"
        },
        {
            "location": "/rtppy/interval-compare/#jenkins-test-status",
            "text": "The table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.     Jenkins Build Name  Status      PDT_all_standard_activity_Interval_compare_summary_levels     PDT_interval_compare_single_view_by_test     PSA_all_object_activity_interval_compare_summary_levels     PSA_interval_compare_single_view_by_test",
            "title": "Jenkins Test Status"
        },
        {
            "location": "/rtppy/interval-compare/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/interval-compare/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     baseline_vcat  baseline_vcat     baseline_datastore  baseline_datastore     baseline_interval_date  baseline_interval_date     baseline_interval_time  baseline_interval_time     current_vcat  current_vcat     current_datastore  current_datastore     current_interval_date  current_interval_date     current_interval_time  current_interval_time     view_by  view_by",
            "title": "Required"
        },
        {
            "location": "/rtppy/interval-compare/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      environment  environment     output_location  output_location     range_pct  range_pct  Default - 10% if not specified.    view_type  view_type  If not provided then products default is used.    view_option  view_option  Applies only to Subsystem Analyzer.    key_option  key_option  If  view_by=K  must be specified otherwise error occurs.    ssid2  ssid2  If provided indicates the baseline_datastore is for a different ssid than the primary.    column  column  Can be used to indicate that only the data in the specified column should be compared for the test.    baseline_interval_date_2  baseline_interval_date_2     baseline_interval_time_2  baseline_interval_time_2     current_interval_date_2  current_interval_date_2     current_interval_time_2  current_interval_time_2",
            "title": "Optional"
        },
        {
            "location": "/rtppy/interval-compare/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/interval-compare/#non-key-display-example",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"view_by\": \"S\",\n        \"view_type\": \"A\"\n      }\n    ]\n}",
            "title": "Non-Key Display Example"
        },
        {
            "location": "/rtppy/interval-compare/#key-display-example",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"view_by\": \"K\",\n        \"key_option\": \"R\",\n        \"view_type\": \"A\",\n        \"range_pct\": 15\n      }\n    ]\n}",
            "title": "Key Display Example"
        },
        {
            "location": "/rtppy/interval-compare/#compare-only-a-specific-column-of-data",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"view_by\": \"G\",\n        \"view_type\": \"A\",\n        \"column\": \"INDB2_TIME\"\n      }\n    ]\n}",
            "title": "Compare only a specific column of data"
        },
        {
            "location": "/rtppy/interval-compare/#selecting-a-range-of-intervals",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"userid\": \"qartp01\",\n      \"ssid\": \"d12a\",\n      \"ssid2\": \"d11a\"\n    },\n \"tests\":\n    [\n      {\n        \"test_type\": \"interval compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"baseline_vcat\": \"PDTDBA.SPEAN03\",\n        \"baseline_datastore\": \"PYTHON\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"PYTHON\",\n        \"baseline_interval_date\": \"16/07/20\",\n        \"baseline_interval_time\": \"10:07:09\",\n        \"baseline_interval_date_2\": \"16/07/20\",\n        \"baseline_interval_time_2\": \"12:07:09\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"12:42:34\",\n        \"current_interval_date_2\": \"16/07/20\",\n        \"current_interval_time_2\": \"12:42:34\",\n        \"view_by\": \"S\",\n        \"view_type\": \"A\"\n      }\n    ]\n}",
            "title": "Selecting a range of intervals"
        },
        {
            "location": "/rtppy/aggregate-compare/",
            "text": "Aggregate Compare\n\n\nThe Aggregate Compare test type can aggregate a display of lower data and compare it to a higher display of data.\n(i.e. aggregate the statement data and compare it to the program data)\n\n\nJenkins Test Status\n\n\nThe table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.\n\n\n\n\n\n\n\n\nJenkins Build Name\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nPDT_aggregate_compare_all_standard_activity\n\n\n\n\n\n\n\n\nPDT_aggregate_oompare_plan_level_single_test\n\n\n\n\n\n\n\n\nPDT_aggregate_oompare_program_level_single_test\n\n\n\n\n\n\n\n\nPDT_aggregate_oompare_key_level_single_test\n\n\n\n\n\n\n\n\nPSA_aggregate_oompare_dbase_level_single_test\n\n\n\n\n\n\n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\ncurrent_vcat\n\n\ncurrent_vcat\n\n\n\n\n\n\n\n\ncurrent_datastore\n\n\ncurrent_datastore\n\n\n\n\n\n\n\n\ncurrent_interval_date\n\n\ncurrent_interval_date\n\n\n\n\n\n\n\n\ncurrent_interval_time\n\n\ncurrent_interval_time\n\n\n\n\n\n\n\n\nlevel\n\n\n\n\nThe following additional JSON parameters are \nrequired\n, unless otherwise indicated, when \nlevel\n is:\n \nPLAN\n:\nplan\n \n[JSON]\n \n[command line]\nPROGRAM\nplan\nprogram\n \n[JSON]\n \n[command line]\ncollid\n \n[JSON]\n \n[command line]\n - \nrequired\n if \nprogram\n parameter indicates a specific program name.\nKEYS\nkey_value\n \n[JSON]\n \n[command line]\nline_command\n(optional) \n[JSON]\n \n[command line]\n - Valid values are \nP\n or \nG\n - Defaults to \nP\n.\nUsed to indicate if aggregating Plan data or Program data to the Key Summary display for the \nkey_value\n indicated.\nkey_option\n(optional) \n[JSON]\n \n[command line]\n - Defaults to \n\"U\"\n.\nDBASE\n:\ndbname\n \n[JSON]\n \n[command line]\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nenvironment\n\n\nenvironment\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\ncolumn\n\n\ncolumn\n\n\nCan be used to indicate that only the data in the specified column should be compared for the test.\n\n\n\n\n\n\ncurrent_interval_date_2\n\n\ncurrent_interval_date_2\n\n\n\n\n\n\n\n\ncurrent_interval_time_2\n\n\ncurrent_interval_time_2\n\n\n\n\n\n\n\n\n\n\nJSON Examples\n\n\n\n\nAggregate program stats to plan level for all plans\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PLAN\",\n        \"plan\": \"ALL\"\n      }\n    ]\n}\n\n\n\n\nAggregate program stats to plan level for a specific plan only.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PLAN\",\n        \"plan\": \"RTPPLNMN\"\n      }\n    ]\n}\n\n\n\n\nAggregate statement stats to program level for all programs in a plan.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PROGRAM\",\n        \"plan\": \"RTPPLNMN\",\n        \"program\": \"ALL\"\n      }\n    ]\n}\n\n\n\n\nAggregate statement stats to program level for a specific program.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PROGRAM\",\n        \"plan\": \"RTPPLNMN\",\n        \"program\": \"REG133DR\",\n        \"collid\": \"RTPCOLMN\"\n      }\n    ]\n}\n\n\n\n\nAggregate plan stats to key level for a ALL keys.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_value\": \"ALL\"\n      }\n    ]\n}\n\n\n\n\nAggregate plan stats to key level for a specific key.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_option\": \"U\",\n        \"key_value\": \"SPEAN03\",\n        \"line_command\": \"P\"\n      }\n    ]\n}\n\n\n\n\nAggregate program stats to key level for ALL keys.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_option\": \"U\",\n        \"key_value\": \"ALL\",\n        \"line_command\": \"G\"\n      }\n    ]\n}\n\n\n\n\nAggregate program stats to key level for particular key.\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_option\": \"C\",\n        \"key_value\": \"TSO CAF\",\n        \"line_command\": \"G\"\n      }\n    ]\n}\n\n\n\n\nAggregate program stats to plan level for all plans for a range of intervals\n\n\n{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_date_2\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"current_interval_time_2\": \"12:42:34\",\n        \"level\": \"PLAN\",\n        \"plan\": \"ALL\"\n      }\n    ]\n}",
            "title": "Aggregate Compare"
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-compare",
            "text": "The Aggregate Compare test type can aggregate a display of lower data and compare it to a higher display of data.\n(i.e. aggregate the statement data and compare it to the program data)",
            "title": "Aggregate Compare"
        },
        {
            "location": "/rtppy/aggregate-compare/#jenkins-test-status",
            "text": "The table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.     Jenkins Build Name  Status      PDT_aggregate_compare_all_standard_activity     PDT_aggregate_oompare_plan_level_single_test     PDT_aggregate_oompare_program_level_single_test     PDT_aggregate_oompare_key_level_single_test     PSA_aggregate_oompare_dbase_level_single_test",
            "title": "Jenkins Test Status"
        },
        {
            "location": "/rtppy/aggregate-compare/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/aggregate-compare/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     current_vcat  current_vcat     current_datastore  current_datastore     current_interval_date  current_interval_date     current_interval_time  current_interval_time     level   The following additional JSON parameters are  required , unless otherwise indicated, when  level  is:   PLAN : plan   [JSON]   [command line] PROGRAM plan program   [JSON]   [command line] collid   [JSON]   [command line]  -  required  if  program  parameter indicates a specific program name. KEYS key_value   [JSON]   [command line] line_command (optional)  [JSON]   [command line]  - Valid values are  P  or  G  - Defaults to  P . Used to indicate if aggregating Plan data or Program data to the Key Summary display for the  key_value  indicated. key_option (optional)  [JSON]   [command line]  - Defaults to  \"U\" . DBASE : dbname   [JSON]   [command line]",
            "title": "Required"
        },
        {
            "location": "/rtppy/aggregate-compare/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      environment  environment     output_location  output_location     column  column  Can be used to indicate that only the data in the specified column should be compared for the test.    current_interval_date_2  current_interval_date_2     current_interval_time_2  current_interval_time_2",
            "title": "Optional"
        },
        {
            "location": "/rtppy/aggregate-compare/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-program-stats-to-plan-level-for-all-plans",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PLAN\",\n        \"plan\": \"ALL\"\n      }\n    ]\n}",
            "title": "Aggregate program stats to plan level for all plans"
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-program-stats-to-plan-level-for-a-specific-plan-only",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PLAN\",\n        \"plan\": \"RTPPLNMN\"\n      }\n    ]\n}",
            "title": "Aggregate program stats to plan level for a specific plan only."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-statement-stats-to-program-level-for-all-programs-in-a-plan",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PROGRAM\",\n        \"plan\": \"RTPPLNMN\",\n        \"program\": \"ALL\"\n      }\n    ]\n}",
            "title": "Aggregate statement stats to program level for all programs in a plan."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-statement-stats-to-program-level-for-a-specific-program",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"PROGRAM\",\n        \"plan\": \"RTPPLNMN\",\n        \"program\": \"REG133DR\",\n        \"collid\": \"RTPCOLMN\"\n      }\n    ]\n}",
            "title": "Aggregate statement stats to program level for a specific program."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-plan-stats-to-key-level-for-a-all-keys",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_value\": \"ALL\"\n      }\n    ]\n}",
            "title": "Aggregate plan stats to key level for a ALL keys."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-plan-stats-to-key-level-for-a-specific-key",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_option\": \"U\",\n        \"key_value\": \"SPEAN03\",\n        \"line_command\": \"P\"\n      }\n    ]\n}",
            "title": "Aggregate plan stats to key level for a specific key."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-program-stats-to-key-level-for-all-keys",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_option\": \"U\",\n        \"key_value\": \"ALL\",\n        \"line_command\": \"G\"\n      }\n    ]\n}",
            "title": "Aggregate program stats to key level for ALL keys."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-program-stats-to-key-level-for-particular-key",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"level\": \"KEYS\",\n        \"key_option\": \"C\",\n        \"key_value\": \"TSO CAF\",\n        \"line_command\": \"G\"\n      }\n    ]\n}",
            "title": "Aggregate program stats to key level for particular key."
        },
        {
            "location": "/rtppy/aggregate-compare/#aggregate-program-stats-to-plan-level-for-all-plans-for-a-range-of-intervals",
            "text": "{\n    \"connection\":\n    {\n      \"lpar\": \"ca31\",\n      \"ssid\": \"d12a\",\n      \"userid\": \"QARTP01\"\n    },\n    \"tests\":\n    [\n      {\n        \"test_type\": \"aggregate compare\",\n        \"product_code\": \"PDT\",\n        \"environment\": \"SPEAN03.R19.PARMLIB\",\n        \"current_vcat\": \"PDTDBA.SPEAN03\",\n        \"current_datastore\": \"python\",\n        \"current_interval_date\": \"16/07/20\",\n        \"current_interval_date_2\": \"16/07/20\",\n        \"current_interval_time\": \"10:42:34\",\n        \"current_interval_time_2\": \"12:42:34\",\n        \"level\": \"PLAN\",\n        \"plan\": \"ALL\"\n      }\n    ]\n}",
            "title": "Aggregate program stats to plan level for all plans for a range of intervals"
        },
        {
            "location": "/rtppy/start-collection/",
            "text": "Start/Stop Collection\n\n\nThis test type can start or stop a product collection.\n\n\nJenkins Test Status\n\n\nThe table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.\n\n\n\n\n\n\n\n\nJenkins Build Name\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nRTPPY_start_collection\n\n\n\n\n\n\n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\nFor starting a collection specify \"start collection\", to stop specify \"stop collection\"\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\noptions\n\n\n\n\nIdentifies the collection options to be used. See the \nCollection Options\n section for details on each products collection option and how to specify it.\n\n\n\n\n\n\n\n\nCollection Options\n\n\nThe following tables below lists the product collection option and its corresponding JSON parameter name specified in the \noptions\n parameter in the JSON file.\n\n\nParameters used by both products\n\n\nDetector\n\n\nSubsystem Analyzer\n\n\n\n\nCommon Collection Options\n\n\n\n\n\n\n\n\nCollection Option Name\n\n\nJSON parameter\n\n\nDefault if not specified\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nDB2 SSID\n\n\nssid\n\n\nSSID specified in the connection information of the JSON file\n\n\n\n\n(Optional)\n - If present, indicates the collection should be started for an SSID other than the SSID specified in the JSON connection information section.\n\n\n\n\n\n\nInterval Time\n\n\nitime\n\n\n01:00 (1 hour)\n\n\nYes\n\n\n\n\n\n\n\n\nRound Interval\n\n\nr_interval\n\n\nN\n\n\n\n\n\n\n\n\n\n\nUse Sysplex Interval Time\n\n\nplex_time\n\n\nN\n\n\n\n\n\n\n\n\n\n\nTime Limit\n\n\nt_limit\n\n\n00:00 (no limit)\n\n\nYes\n\n\n\n\n\n\n\n\nExternalize\n\n\nextern\n\n\nN\n\n\n\n\n\n\n\n\n\n\nHigh Level\n\n\nhigh_level\n\n\n\n\nYes\n\n\nRequired\n\n\n\n\n\n\nDatastore Name\n\n\ncurrent_datastore\n\n\n\n\nYes\n\n\nRequired\n\n\n\n\n\n\nAuto Start\n\n\nauto\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\nDetector Collection Options\n\n\n\n\n\n\n\n\nCollection Option Name\n\n\nJSON parameter\n\n\nDefault if not specified\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nTriggered SQL\n\n\ntrig_sql\n\n\nN\n\n\n\n\n\n\n\n\n\n\nPlan Excl/Incl List\n\n\nexclude_list\n\n\nN\n\n\n\n\n\n\n\n\n\n\nStandard Activity\n\n\nstandard\n\n\nN\n\n\n\n\n\n\n\n\n\n\nDynamic SQL Stats\n\n\ndynam_stats\n\n\nN\n\n\n\n\n\n\n\n\n\n\nView By Keys\n\n\nview_keys\n\n\nN\n\n\n\n\n\n\n\n\n\n\nDynamic Exceptions\n\n\ndynam_excp\n\n\nN\n\n\n\n\n\n\n\n\n\n\nStatic Exceptions\n\n\nstatic_excp\n\n\nN\n\n\n\n\n\n\n\n\n\n\nSQL Errors\n\n\nsql_errors\n\n\nN\n\n\n\n\n\n\n\n\n\n\nSQL Error Text\n\n\nerror_text\n\n\nN\n\n\n\n\n\n\n\n\n\n\nHost Variables\n\n\nhost_vars\n\n\nN\n\n\n\n\n\n\n\n\n\n\nCollection Profile\n\n\ncoll_profile\n\n\nblanks\n\n\nYes\n\n\nRequired\n\n\n\n\n\n\nException cache size MB\n\n\nexcp_cache\n\n\n0000\n\n\n\n\n\n\n\n\n\n\n\n\nSubsystem Analyzer Collection Options\n\n\n\n\n\n\n\n\nCollection Option Name\n\n\nJSON parameter\n\n\nDefault if not specified\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nVolume and Extent\n\n\nvol_ext\n\n\nY\n\n\n\n\n\n\n\n\n\n\nSampling Rate\n\n\nsamp\n\n\n100\n\n\nYes\n\n\n\n\n\n\n\n\n\n\nJSON Examples\n\n\n\n\nStart a Detector Collection\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d12a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"start collection\",\n      \"product_code\": \"PDT\",\n      \"environment\": \"PDTDBA.RTPQA.PARMLIB\",\n      \"options\":\n      {\n        \"itime\": \"00:15\",\n        \"t_limit\": \"00:99\",\n        \"extern\": \"Y\",\n        \"high_level\": \"PDTDBA.python\",\n        \"data_store\": \"TSTSTART\",\n        \"coll_profile\": \"DEFAULT\",\n        \"trig_sql\": \"Y\",\n        \"exclude_list\": \"Y\",\n        \"standard\": \"Y\",\n        \"dynam_stats\": \"Y\",\n        \"view_keys\": \"Y\",\n        \"dynam_excp\": \"Y\",\n        \"static_excp\": \"Y\",\n        \"sql_errors\": \"Y\",\n        \"error_text\": \"Y\",\n        \"host_vars\": \"Y\",\n        \"excp_cache\": \"0020\"\n      }\n    }\n  ]\n}\n\n\n\n\nStart a Subsystem Analyzer Collection\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d12a\"\n  },\n  \"tests\":\n    [\n      {\n        \"test_type\": \"start collection\",\n        \"product_code\": \"PSA\",\n        \"environment\": \"PDTDBA.RTPQA.PARMLIB\",\n        \"options\":\n        {\n          \"itime\": \"00:15\",\n          \"t_limit\": \"00:99\",\n          \"extern\": \"Y\",\n          \"high_level\": \"PDTDBA.R19\",\n          \"data_store\": \"RTPCURNT\",\n          \"vol_ext\": \"N\",\n          \"samp\": \"6\"\n        }\n      }\n    ]\n}",
            "title": "Start/Stop Collection"
        },
        {
            "location": "/rtppy/start-collection/#startstop-collection",
            "text": "This test type can start or stop a product collection.",
            "title": "Start/Stop Collection"
        },
        {
            "location": "/rtppy/start-collection/#jenkins-test-status",
            "text": "The table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.     Jenkins Build Name  Status      RTPPY_start_collection",
            "title": "Jenkins Test Status"
        },
        {
            "location": "/rtppy/start-collection/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/start-collection/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type   For starting a collection specify \"start collection\", to stop specify \"stop collection\"    lpar  lpar     userid  userid     ssid  ssid     options   Identifies the collection options to be used. See the  Collection Options  section for details on each products collection option and how to specify it.",
            "title": "Required"
        },
        {
            "location": "/rtppy/start-collection/#collection-options",
            "text": "The following tables below lists the product collection option and its corresponding JSON parameter name specified in the  options  parameter in the JSON file.  Parameters used by both products  Detector  Subsystem Analyzer",
            "title": "Collection Options"
        },
        {
            "location": "/rtppy/start-collection/#common-collection-options",
            "text": "Collection Option Name  JSON parameter  Default if not specified  Command Line Override  Special Usage or Note      DB2 SSID  ssid  SSID specified in the connection information of the JSON file   (Optional)  - If present, indicates the collection should be started for an SSID other than the SSID specified in the JSON connection information section.    Interval Time  itime  01:00 (1 hour)  Yes     Round Interval  r_interval  N      Use Sysplex Interval Time  plex_time  N      Time Limit  t_limit  00:00 (no limit)  Yes     Externalize  extern  N      High Level  high_level   Yes  Required    Datastore Name  current_datastore   Yes  Required    Auto Start  auto  N",
            "title": "Common Collection Options"
        },
        {
            "location": "/rtppy/start-collection/#detector-collection-options",
            "text": "Collection Option Name  JSON parameter  Default if not specified  Command Line Override  Special Usage or Note      Triggered SQL  trig_sql  N      Plan Excl/Incl List  exclude_list  N      Standard Activity  standard  N      Dynamic SQL Stats  dynam_stats  N      View By Keys  view_keys  N      Dynamic Exceptions  dynam_excp  N      Static Exceptions  static_excp  N      SQL Errors  sql_errors  N      SQL Error Text  error_text  N      Host Variables  host_vars  N      Collection Profile  coll_profile  blanks  Yes  Required    Exception cache size MB  excp_cache  0000",
            "title": "Detector Collection Options"
        },
        {
            "location": "/rtppy/start-collection/#subsystem-analyzer-collection-options",
            "text": "Collection Option Name  JSON parameter  Default if not specified  Command Line Override  Special Usage or Note      Volume and Extent  vol_ext  Y      Sampling Rate  samp  100  Yes",
            "title": "Subsystem Analyzer Collection Options"
        },
        {
            "location": "/rtppy/start-collection/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/start-collection/#start-a-detector-collection",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d12a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"start collection\",\n      \"product_code\": \"PDT\",\n      \"environment\": \"PDTDBA.RTPQA.PARMLIB\",\n      \"options\":\n      {\n        \"itime\": \"00:15\",\n        \"t_limit\": \"00:99\",\n        \"extern\": \"Y\",\n        \"high_level\": \"PDTDBA.python\",\n        \"data_store\": \"TSTSTART\",\n        \"coll_profile\": \"DEFAULT\",\n        \"trig_sql\": \"Y\",\n        \"exclude_list\": \"Y\",\n        \"standard\": \"Y\",\n        \"dynam_stats\": \"Y\",\n        \"view_keys\": \"Y\",\n        \"dynam_excp\": \"Y\",\n        \"static_excp\": \"Y\",\n        \"sql_errors\": \"Y\",\n        \"error_text\": \"Y\",\n        \"host_vars\": \"Y\",\n        \"excp_cache\": \"0020\"\n      }\n    }\n  ]\n}",
            "title": "Start a Detector Collection"
        },
        {
            "location": "/rtppy/start-collection/#start-a-subsystem-analyzer-collection",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d12a\"\n  },\n  \"tests\":\n    [\n      {\n        \"test_type\": \"start collection\",\n        \"product_code\": \"PSA\",\n        \"environment\": \"PDTDBA.RTPQA.PARMLIB\",\n        \"options\":\n        {\n          \"itime\": \"00:15\",\n          \"t_limit\": \"00:99\",\n          \"extern\": \"Y\",\n          \"high_level\": \"PDTDBA.R19\",\n          \"data_store\": \"RTPCURNT\",\n          \"vol_ext\": \"N\",\n          \"samp\": \"6\"\n        }\n      }\n    ]\n}",
            "title": "Start a Subsystem Analyzer Collection"
        },
        {
            "location": "/rtppy/rtptest/",
            "text": "RTP Test Suite App\n\n\nThe rtptest test type provides the ability to interact with the Real Time Performance Test Suite Application UI in order to \ngenerate the JCL and optionally submit it.\n\n\nFor more information about the RTP Test Suite capabilities and its parameters see the \nRTP Test Suite manual\n.\n\n\nJenkins Test Status\n\n\nThe table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.\n\n\n\n\n\n\n\n\nJenkins Build Name\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\nexecute_method\n\n\n\n\nThe following additional JSON parameters are \nrequired\n, unless otherwise indicated, when \nexecute_method\n is:\n \nUI\n:\naction\n \n[JSON]\ndataset\ndataset_name\n \n[JSON]\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\nauto_submit\n\n\n\n\n\n\n\n\n\n\nmultithreading\n\n\n\n\n\n\n\n\n\n\nmultiple_plan_packages\n\n\n\n\n\n\n\n\n\n\nwait_to_complete\n\n\nwait_to_complete\n\n\nIndicates whether the test should wait for the submitted RTPTEST batch job to complete or not. Valid values are \nTrue\n or \nFalse\n\n\n\n\n\n\noptions\n\n\n\n\nIdentifies additional options to be used. See the \nAdditional Options\n section for details.\n\n\n\n\n\n\n\n\nAdditional Options\n\n\n\n\n\n\n\n\nJSON parameter\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nprogram\n\n\nCan specify either a single program or a list of programs separated by commas.\n Example: PROGRAM1,PROGRAM2,PROGRAM3\n\n\n\n\n\n\nplan\n\n\n\n\n\n\n\n\ncollid\n\n\n\n\n\n\n\n\ncorrid\n\n\n\n\n\n\n\n\nsqlid\n\n\n\n\n\n\n\n\nworkstation\n\n\n\n\n\n\n\n\nrepeat\n\n\n\n\n\n\n\n\nseed\n\n\n\n\n\n\n\n\n\n\nJSON Examples\n\n\n\n\nCreate Objects\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"2\"\n    }\n  ]\n}\n\n\n\n\nCompile Program (a RRSAF program)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"3\",\n      \"options\": \n      {\n        \"program\": \"reg161br\",\n        \"connection_type\": \"R\"\n      }\n    }\n  ]\n}\n\n\n\n\nBind All Programs with Multi Plan/Packages\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"4\",\n      \"multiple_plan_packages\": \"Y\"\n    }\n  ]\n}\n\n\n\n\nBind Single Program (changing collection id from the default and including the plan binding)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"5\",\n      \"include_plan\": \"Y\",\n      \"options\": \n      {\n       \"collid\": \"mycollidisbigger\",\n       \"program\": \"reg152dr\"\n      }\n    }\n  ]\n}\n\n\n\n\nExecute All Programs (via Multi Threading)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"6\",\n      \"multithreading\": \"Y\"\n    }\n  ]\n}\n\n\n\n\nExecute All Programs (via Multiple Plan/Packages)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"6\",\n      \"multiple_plan_packages\": \"Y\"\n    }\n  ]\n}\n\n\n\n\nExecute Program(s) (a single RRSAF Program with other parameters defaults)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"7\",\n      \"options\": \n      {\n        \"connection_type\": \"R\",\n        \"program\": \"reg021sr\"\n      }\n    }\n  ]\n}\n\n\n\n\nExecute Program(s) (a list of RRSAF Program with other parameters defaults)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"7\",\n      \"options\": \n      {\n        \"connection_type\": \"R\",\n        \"program\": \"reg161br,reg011dr,reg165br,reg133dr\"\n      }\n    }\n  ]\n}\n\n\n\n\nExecute Program(s) (an RRSAF Program with changing other parameters)\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"7\",\n      \"options\": \n      {\n        \"program\": \"reg161br\",\n        \"collid\": \"mycollidisbigger\",\n        \"corrid\": \"mycorridisbigger\",\n        \"workstation\": \"myworkstation\",\n        \"repeat\": \"10\",\n        \"sqlid\": \"mysqlid\",\n        \"plan\": \"myplan\",\n        \"seed\": \"5\"\n      }\n    }\n  ]\n}\n\n\n\n\nFree All PKGE/PLAN with Multi Plan/Packages\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"8\",\n      \"multiple_plan_packages\": \"Y\"\n    }\n  ]\n}\n\n\n\n\nFree Single Program\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"9\",\n      \"options\": \n      {\n       \"program\": \"reg165br\"\n      }\n    }\n  ]\n}\n\n\n\n\nCleanup\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"10\"\n    }\n  ]\n}",
            "title": "RTP Test Suite App"
        },
        {
            "location": "/rtppy/rtptest/#rtp-test-suite-app",
            "text": "The rtptest test type provides the ability to interact with the Real Time Performance Test Suite Application UI in order to \ngenerate the JCL and optionally submit it.  For more information about the RTP Test Suite capabilities and its parameters see the  RTP Test Suite manual .",
            "title": "RTP Test Suite App"
        },
        {
            "location": "/rtppy/rtptest/#jenkins-test-status",
            "text": "The table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.     Jenkins Build Name  Status",
            "title": "Jenkins Test Status"
        },
        {
            "location": "/rtppy/rtptest/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/rtptest/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     execute_method   The following additional JSON parameters are  required , unless otherwise indicated, when  execute_method  is:   UI : action   [JSON] dataset dataset_name   [JSON]",
            "title": "Required"
        },
        {
            "location": "/rtppy/rtptest/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      output_location  output_location     auto_submit      multithreading      multiple_plan_packages      wait_to_complete  wait_to_complete  Indicates whether the test should wait for the submitted RTPTEST batch job to complete or not. Valid values are  True  or  False    options   Identifies additional options to be used. See the  Additional Options  section for details.",
            "title": "Optional"
        },
        {
            "location": "/rtppy/rtptest/#additional-options",
            "text": "JSON parameter  Special Usage or Note      program  Can specify either a single program or a list of programs separated by commas.  Example: PROGRAM1,PROGRAM2,PROGRAM3    plan     collid     corrid     sqlid     workstation     repeat     seed",
            "title": "Additional Options"
        },
        {
            "location": "/rtppy/rtptest/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/rtptest/#create-objects",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"2\"\n    }\n  ]\n}",
            "title": "Create Objects"
        },
        {
            "location": "/rtppy/rtptest/#compile-program-a-rrsaf-program",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"3\",\n      \"options\": \n      {\n        \"program\": \"reg161br\",\n        \"connection_type\": \"R\"\n      }\n    }\n  ]\n}",
            "title": "Compile Program (a RRSAF program)"
        },
        {
            "location": "/rtppy/rtptest/#bind-all-programs-with-multi-planpackages",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"4\",\n      \"multiple_plan_packages\": \"Y\"\n    }\n  ]\n}",
            "title": "Bind All Programs with Multi Plan/Packages"
        },
        {
            "location": "/rtppy/rtptest/#bind-single-program-changing-collection-id-from-the-default-and-including-the-plan-binding",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"5\",\n      \"include_plan\": \"Y\",\n      \"options\": \n      {\n       \"collid\": \"mycollidisbigger\",\n       \"program\": \"reg152dr\"\n      }\n    }\n  ]\n}",
            "title": "Bind Single Program (changing collection id from the default and including the plan binding)"
        },
        {
            "location": "/rtppy/rtptest/#execute-all-programs-via-multi-threading",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"6\",\n      \"multithreading\": \"Y\"\n    }\n  ]\n}",
            "title": "Execute All Programs (via Multi Threading)"
        },
        {
            "location": "/rtppy/rtptest/#execute-all-programs-via-multiple-planpackages",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"6\",\n      \"multiple_plan_packages\": \"Y\"\n    }\n  ]\n}",
            "title": "Execute All Programs (via Multiple Plan/Packages)"
        },
        {
            "location": "/rtppy/rtptest/#execute-programs-a-single-rrsaf-program-with-other-parameters-defaults",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"7\",\n      \"options\": \n      {\n        \"connection_type\": \"R\",\n        \"program\": \"reg021sr\"\n      }\n    }\n  ]\n}",
            "title": "Execute Program(s) (a single RRSAF Program with other parameters defaults)"
        },
        {
            "location": "/rtppy/rtptest/#execute-programs-a-list-of-rrsaf-program-with-other-parameters-defaults",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"7\",\n      \"options\": \n      {\n        \"connection_type\": \"R\",\n        \"program\": \"reg161br,reg011dr,reg165br,reg133dr\"\n      }\n    }\n  ]\n}",
            "title": "Execute Program(s) (a list of RRSAF Program with other parameters defaults)"
        },
        {
            "location": "/rtppy/rtptest/#execute-programs-an-rrsaf-program-with-changing-other-parameters",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"7\",\n      \"options\": \n      {\n        \"program\": \"reg161br\",\n        \"collid\": \"mycollidisbigger\",\n        \"corrid\": \"mycorridisbigger\",\n        \"workstation\": \"myworkstation\",\n        \"repeat\": \"10\",\n        \"sqlid\": \"mysqlid\",\n        \"plan\": \"myplan\",\n        \"seed\": \"5\"\n      }\n    }\n  ]\n}",
            "title": "Execute Program(s) (an RRSAF Program with changing other parameters)"
        },
        {
            "location": "/rtppy/rtptest/#free-all-pkgeplan-with-multi-planpackages",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"8\",\n      \"multiple_plan_packages\": \"Y\"\n    }\n  ]\n}",
            "title": "Free All PKGE/PLAN with Multi Plan/Packages"
        },
        {
            "location": "/rtppy/rtptest/#free-single-program",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"9\",\n      \"options\": \n      {\n       \"program\": \"reg165br\"\n      }\n    }\n  ]\n}",
            "title": "Free Single Program"
        },
        {
            "location": "/rtppy/rtptest/#cleanup",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"rtptest\",\n      \"product_code\": \"RTP\",\n      \"execute_method\": \"UI\",\n      \"action\": \"10\"\n    }\n  ]\n}",
            "title": "Cleanup"
        },
        {
            "location": "/rtppy/abend-restart/",
            "text": "Abend Restart\n\n\nThis test type can drive the PDT and PSA abend restart feature by setting abends to occur in different areas of the products\ncollection engine. Then uses the RTPJ framework to submit just the right amount of activity to cause enough abends to get the\ncollections to terminate allowing abend restart to be invoked naturally.\n\n\nBecause of the nature of this test altering code in collection engine modules that is directly execute by threads in the DB2\naddress space and modules that remain loaded for the duration of the xmanager address space. It is highly suggested that users\nunderstand the implications of running this test on DB2 SSID's and XMANAGERS that are used by the entire development\ncommunity (i.e. xmanagers that service the PRD, DEV, QA, and CURIR environments).\n\n\nJenkins Test Status\n\n\nThe table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.\n\n\n\n\n\n\n\n\nJenkins Build Name\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\nxman\n\n\nxman\n\n\n\n\n\n\n\n\nabend_in\n\n\nabend_in\n\n\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\nwait_time_after_coll_init\n\n\n\n\nDefaults to 6 minutes if not specified. More info on how to use the wait times in section \nHow to use wait times\n\n\n\n\n\n\nwait_time_after_abend_restart\n\n\n\n\nDefaults to 61 minutes if not specified. More info on how to use the wait times in section \nHow to use wait times\n\n\n\n\n\n\nnumber_of_abend_restarts\n\n\nnum_ar\n\n\nDefaults to 2.\n\n\n\n\n\n\noptions\n\n\n\n\nIdentifies the options to be used to start a product collection as defined in the \nCollection Options\n section of the Start Collections test type.\n\n\n\n\n\n\n\n\nHow to use wait times\n\n\nThe wait time parameters are used correlate with the design of the abend restart feature. The time limits within the abend restart feature can be exercised by using the number_of_abend_restarts combined with the single or combined use of the wait_time_after_coll_init and wait_time_after_abend_restart parameters. See some of the JSON examples below.  \n\n\nJSON Examples\n\n\n\n\nExecute Abend Restart in PDT forcing an abend in DII 6 minutes after the first collection start and 60 minutes after the abend restart.\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DII\",\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}\n\n\n\n\nNo abend restart within 5 minutes of initial starting of collection\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DII\",\n          \"number_of_abend_restarts\": 1,\n          \"wait_time_after_coll_init\": 3,\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}\n\n\n\n\nExecute Abend Restart in PDT forcing an abend in DIU 6 minutes after the first collection start but within 60 minutes after the abend restart.\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DIU\",\n          \"wait_time_after_abend_restart\": 10,\n          \"wait_time_after_coll_init\": 6,\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}\n\n\n\n\nExecute Abend Restart in PDT forcing an abend in DIU 6 minutes after the first collection start and 60 minutes after the abend restart twice.\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DII\",\n          \"number_of_abend_restarts\": 3,\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}",
            "title": "Abend Restart"
        },
        {
            "location": "/rtppy/abend-restart/#abend-restart",
            "text": "This test type can drive the PDT and PSA abend restart feature by setting abends to occur in different areas of the products\ncollection engine. Then uses the RTPJ framework to submit just the right amount of activity to cause enough abends to get the\ncollections to terminate allowing abend restart to be invoked naturally.  Because of the nature of this test altering code in collection engine modules that is directly execute by threads in the DB2\naddress space and modules that remain loaded for the duration of the xmanager address space. It is highly suggested that users\nunderstand the implications of running this test on DB2 SSID's and XMANAGERS that are used by the entire development\ncommunity (i.e. xmanagers that service the PRD, DEV, QA, and CURIR environments).",
            "title": "Abend Restart"
        },
        {
            "location": "/rtppy/abend-restart/#jenkins-test-status",
            "text": "The table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.     Jenkins Build Name  Status",
            "title": "Jenkins Test Status"
        },
        {
            "location": "/rtppy/abend-restart/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/abend-restart/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     xman  xman     abend_in  abend_in",
            "title": "Required"
        },
        {
            "location": "/rtppy/abend-restart/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      output_location  output_location     wait_time_after_coll_init   Defaults to 6 minutes if not specified. More info on how to use the wait times in section  How to use wait times    wait_time_after_abend_restart   Defaults to 61 minutes if not specified. More info on how to use the wait times in section  How to use wait times    number_of_abend_restarts  num_ar  Defaults to 2.    options   Identifies the options to be used to start a product collection as defined in the  Collection Options  section of the Start Collections test type.",
            "title": "Optional"
        },
        {
            "location": "/rtppy/abend-restart/#how-to-use-wait-times",
            "text": "The wait time parameters are used correlate with the design of the abend restart feature. The time limits within the abend restart feature can be exercised by using the number_of_abend_restarts combined with the single or combined use of the wait_time_after_coll_init and wait_time_after_abend_restart parameters. See some of the JSON examples below.",
            "title": "How to use wait times"
        },
        {
            "location": "/rtppy/abend-restart/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/abend-restart/#execute-abend-restart-in-pdt-forcing-an-abend-in-dii-6-minutes-after-the-first-collection-start-and-60-minutes-after-the-abend-restart",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DII\",\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}",
            "title": "Execute Abend Restart in PDT forcing an abend in DII 6 minutes after the first collection start and 60 minutes after the abend restart."
        },
        {
            "location": "/rtppy/abend-restart/#no-abend-restart-within-5-minutes-of-initial-starting-of-collection",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DII\",\n          \"number_of_abend_restarts\": 1,\n          \"wait_time_after_coll_init\": 3,\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}",
            "title": "No abend restart within 5 minutes of initial starting of collection"
        },
        {
            "location": "/rtppy/abend-restart/#execute-abend-restart-in-pdt-forcing-an-abend-in-diu-6-minutes-after-the-first-collection-start-but-within-60-minutes-after-the-abend-restart",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DIU\",\n          \"wait_time_after_abend_restart\": 10,\n          \"wait_time_after_coll_init\": 6,\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}",
            "title": "Execute Abend Restart in PDT forcing an abend in DIU 6 minutes after the first collection start but within 60 minutes after the abend restart."
        },
        {
            "location": "/rtppy/abend-restart/#execute-abend-restart-in-pdt-forcing-an-abend-in-diu-6-minutes-after-the-first-collection-start-and-60-minutes-after-the-abend-restart-twice",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp02\",\n    \"ssid\": \"d11a\",\n    \"ssid2\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n          \"test_type\": \"abend restart\",\n          \"product_code\": \"PDT\",\n          \"environment\": \"SPEAN03.R19.PARMLIB(IR)\",\n          \"xman\": \"PTX0005\",\n          \"abend_in\": \"DII\",\n          \"number_of_abend_restarts\": 3,\n          \"options\":\n          {\n            \"itime\": \"00:05\",\n            \"t_limit\": \"00:00\",\n            \"extern\": \"N\",\n            \"collection_profile\": \"COLLALL\",\n            \"standard\": \"Y\"\n          }\n    }\n  ]\n}",
            "title": "Execute Abend Restart in PDT forcing an abend in DIU 6 minutes after the first collection start and 60 minutes after the abend restart twice."
        },
        {
            "location": "/rtppy/rtpj-exec/",
            "text": "Distributed SQL\n\n\nThe Distributed SQL test type gives the ability to execute distributed SQL via RTPJ from python. This can be useful when\ndriving SQL activity during a RTPPY automation test is needed.\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\nrtpj_file\n\n\nrtpj_file\n\n\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nenvironment\n\n\nenvironment\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\nrtpj_library\n\n\nrtpj_library\n\n\n\n\n\n\n\n\nrtpj_sync\n\n\nrtpj_sync\n\n\n\n\n\n\n\n\nrtpj_log_level\n\n\nrtpj_log_level\n\n\n\n\n\n\n\n\n\n\nJSON Examples\n\n\n\n\nExecute distributed SQL via RTPJ from the internal test library\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp03\",\n    \"ssid\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"distributed sql\",\n      \"product_code\": \"PDT\",\n      \"rtpj_file\": \"Select_Count_Test.JSON\",\n      \"rtpj_library\": \"\"\n    }\n  ]\n}\n\n\n\n\nExecute distributed SQL via RTPJ from a local library.\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp03\",\n    \"ssid\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"distributed sql\",\n      \"product_code\": \"PDT\",\n      \"rtpj_file\": \"Select_Count_Test.JSON\",\n      \"rtpj_library\": \"C:\\Users\\spean03\\Desktop\\JSON\\PDT1497\"\n    }\n  ]\n}",
            "title": "Distributed SQL"
        },
        {
            "location": "/rtppy/rtpj-exec/#distributed-sql",
            "text": "The Distributed SQL test type gives the ability to execute distributed SQL via RTPJ from python. This can be useful when\ndriving SQL activity during a RTPPY automation test is needed.",
            "title": "Distributed SQL"
        },
        {
            "location": "/rtppy/rtpj-exec/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/rtpj-exec/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     rtpj_file  rtpj_file",
            "title": "Required"
        },
        {
            "location": "/rtppy/rtpj-exec/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      environment  environment     output_location  output_location     rtpj_library  rtpj_library     rtpj_sync  rtpj_sync     rtpj_log_level  rtpj_log_level",
            "title": "Optional"
        },
        {
            "location": "/rtppy/rtpj-exec/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/rtpj-exec/#execute-distributed-sql-via-rtpj-from-the-internal-test-library",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp03\",\n    \"ssid\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"distributed sql\",\n      \"product_code\": \"PDT\",\n      \"rtpj_file\": \"Select_Count_Test.JSON\",\n      \"rtpj_library\": \"\"\n    }\n  ]\n}",
            "title": "Execute distributed SQL via RTPJ from the internal test library"
        },
        {
            "location": "/rtppy/rtpj-exec/#execute-distributed-sql-via-rtpj-from-a-local-library",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca31\",\n    \"userid\": \"qartp03\",\n    \"ssid\": \"d11a\"\n  },\n  \"tests\":\n  [\n    {\n      \"test_type\": \"distributed sql\",\n      \"product_code\": \"PDT\",\n      \"rtpj_file\": \"Select_Count_Test.JSON\",\n      \"rtpj_library\": \"C:\\Users\\spean03\\Desktop\\JSON\\PDT1497\"\n    }\n  ]\n}",
            "title": "Execute distributed SQL via RTPJ from a local library."
        },
        {
            "location": "/rtppy/lock-release/",
            "text": "Lock Release\n\n\nWARNING WARNING WARNING!!! This test can cause DB2 to crash\n\n\nThis test type allows testing of the Detector collection engines ability to release a CML Lock that was obtained during\n interval switch building the new interval collection buckets but was not released during normal flow.\n\n\nThis is accomplished by zapping two instructions in the correct version of DT$DIU for the DB2 Version the PDT collection\nwill be started for. Code snippets follow:\n\n\n1) The J and JZ instructions at offsets B9A and BA0 are found by looking for the LGR and CDSG instruction set.\n\n\n00000B8C B904 00F7                         15573+         LGR   R15,R7                       SET NEW ANCHOR ADDR        \n00000B90 EB0E 6010 003E          00000010  15574+         CDSG  R0,R14,STM$SANC              INSERT NEW ENTRY           \n00000B96 A774 FFF4               00000B7E  15575+         JNE   A0932                        TRY AGAIN                  \n00000B9A A7F4 0005               00000BA4  15576          J     UPDT2400                                             \n                                           15577 *                                                                      \n00000B9E                                   15578 UPDT2350 DS    0H                                                      \n00000B9E 1222                              15579          LTR   R2,R2                        DO WE HAVE LOCK         \n00000BA0 A784 0009               00000BB2  15580          JZ    UPDT2450                     ..NO, THEN SKIP THIS    \n\n\n\n\n2) The unconditional J instruction (offset B9A) is zapped to a NOP while the JZ instruction (offset BA0) is zapped to an\n   unconditional J to UPDT2450 which branches around the call to DT$IURLK(i.e. BAKR at BAE) to release the CML Lock.\n\n\nB8C B904 00F7                   LGR      RW15,RW7           \nB90 EB0E 6010 003E              CDSG     R0,R14,X'00010'(R6)\nB96 A774 FFF4                   JNE      *-X'0018'            (PTX0004:PDTDIUC0.DT$DIUC0+B7E)\nB9A 4700 0005                   NOP      X'005'                                              \nB9E 1222                        LTR      R2,R2                                               \nBA0 A7F4 0009                   J        *+X'0012'            (PTX0004:PDTDIUC0.DT$DIUC0+BB2)\nBA4 4110 C000                   LA       R1,X'000'(,R12)                                     \nBA8 E3F0 A118 0017              LLGT     RW15,X'00118'(,R10)                                 \nBAE B240 000F                   BAKR     0,R15                                               \nBB2 E370 C510 0024              STG      RW7,X'00510'(,R12)                                            \n\n\n\n\nBecause of the nature of this test altering code in collection engine modules that are directly execute by threads in the DB2\naddress space and/or modules that remain loaded for the duration of the xmanager address space. It is highly suggested that users\nunderstand the implications of running this test on DB2 SSID's and XMANAGERS that are used by the entire development\ncommunity (i.e. xmanagers that service the PRD, DEV, QA, and CURIR environments).\n\n\nJenkins Test Status\n\n\nThe table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.\n\n\n\n\n\n\n\n\nJenkins Build Name\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\nxman\n\n\nxman\n\n\n\n\n\n\n\n\n\n\nOptional\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\n\n\nJSON Example\n\n\n\n\n{\n  \"connection\":\n  {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11c\"\n  },\n  \"tests\":\n  [\n    {\n      \"description\": \"Zap instructions in DT$DIU so that DIU does not release the CML lock\",\n      \"test_type\": \"lock release\",\n      \"product_code\": \"PDT\",\n      \"environment\": \"\",\n      \"xman\": \"ptx0004\"\n    }\n  ]\n}",
            "title": "Lock Release"
        },
        {
            "location": "/rtppy/lock-release/#lock-release",
            "text": "WARNING WARNING WARNING!!! This test can cause DB2 to crash  This test type allows testing of the Detector collection engines ability to release a CML Lock that was obtained during\n interval switch building the new interval collection buckets but was not released during normal flow.  This is accomplished by zapping two instructions in the correct version of DT$DIU for the DB2 Version the PDT collection\nwill be started for. Code snippets follow:  1) The J and JZ instructions at offsets B9A and BA0 are found by looking for the LGR and CDSG instruction set.  00000B8C B904 00F7                         15573+         LGR   R15,R7                       SET NEW ANCHOR ADDR        \n00000B90 EB0E 6010 003E          00000010  15574+         CDSG  R0,R14,STM$SANC              INSERT NEW ENTRY           \n00000B96 A774 FFF4               00000B7E  15575+         JNE   A0932                        TRY AGAIN                  \n00000B9A A7F4 0005               00000BA4  15576          J     UPDT2400                                             \n                                           15577 *                                                                      \n00000B9E                                   15578 UPDT2350 DS    0H                                                      \n00000B9E 1222                              15579          LTR   R2,R2                        DO WE HAVE LOCK         \n00000BA0 A784 0009               00000BB2  15580          JZ    UPDT2450                     ..NO, THEN SKIP THIS      2) The unconditional J instruction (offset B9A) is zapped to a NOP while the JZ instruction (offset BA0) is zapped to an\n   unconditional J to UPDT2450 which branches around the call to DT$IURLK(i.e. BAKR at BAE) to release the CML Lock.  B8C B904 00F7                   LGR      RW15,RW7           \nB90 EB0E 6010 003E              CDSG     R0,R14,X'00010'(R6)\nB96 A774 FFF4                   JNE      *-X'0018'            (PTX0004:PDTDIUC0.DT$DIUC0+B7E)\nB9A 4700 0005                   NOP      X'005'                                              \nB9E 1222                        LTR      R2,R2                                               \nBA0 A7F4 0009                   J        *+X'0012'            (PTX0004:PDTDIUC0.DT$DIUC0+BB2)\nBA4 4110 C000                   LA       R1,X'000'(,R12)                                     \nBA8 E3F0 A118 0017              LLGT     RW15,X'00118'(,R10)                                 \nBAE B240 000F                   BAKR     0,R15                                               \nBB2 E370 C510 0024              STG      RW7,X'00510'(,R12)                                              Because of the nature of this test altering code in collection engine modules that are directly execute by threads in the DB2\naddress space and/or modules that remain loaded for the duration of the xmanager address space. It is highly suggested that users\nunderstand the implications of running this test on DB2 SSID's and XMANAGERS that are used by the entire development\ncommunity (i.e. xmanagers that service the PRD, DEV, QA, and CURIR environments).",
            "title": "Lock Release"
        },
        {
            "location": "/rtppy/lock-release/#jenkins-test-status",
            "text": "The table below lists the jenkins tests that are available and what the status of the last run of the test was. Click on\nthe status icon to go straight to jenkins for the particular build project.     Jenkins Build Name  Status",
            "title": "Jenkins Test Status"
        },
        {
            "location": "/rtppy/lock-release/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/lock-release/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     xman  xman",
            "title": "Required"
        },
        {
            "location": "/rtppy/lock-release/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      output_location  output_location",
            "title": "Optional"
        },
        {
            "location": "/rtppy/lock-release/#json-example",
            "text": "{\n  \"connection\":\n  {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11c\"\n  },\n  \"tests\":\n  [\n    {\n      \"description\": \"Zap instructions in DT$DIU so that DIU does not release the CML lock\",\n      \"test_type\": \"lock release\",\n      \"product_code\": \"PDT\",\n      \"environment\": \"\",\n      \"xman\": \"ptx0004\"\n    }\n  ]\n}",
            "title": "JSON Example"
        },
        {
            "location": "/rtppy/sql-text/",
            "text": "SQL Text\n\n\nThis test type provides different ways of testing the SQL Text obtained by Detector depending on the supplied parameters.\nSee the list below for the different sub-tests.\n\n\nTest 1:\n\n\nWas SQL text obtained for the statements executed under a given program under a plan.\n\n\n\n\nThis is the test that is always performed which minimum validates that the SQL Text display for the SQL statement is accessible without an error indicating the SQL text could not be located. The text is then extracted from this display and put in the report that is generated at the end of the test. This gives a quick overall visual for each program under the plan what the statement was and the SQL Text that appears when selecting that statement. See an example of the output \nhere\n.\n\n\n\n\nTest 2:\n\n\nDoes the SQL text collected equally compare to the source SQL that was executed. \n\n\n\n\nThis level of validation testing is only done when the optional parameter \ntext list\n is included in the test, see the \nexample\n of how to use the parameter. When present the SQL text obtained in \ntest 1\n is searched against the specified list for a match. An additional column is added to the same report produced by test 1 that is either left blank or contains the text from the list that matched the display text. An additional report is included for any SQL text from the user provided text list that no match was found. See an example of the output \nhere\n.     \n\n\n\n\nTest Parameters\n\n\nThe table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are \nexamples\n at the bottom of this page.\n\n\nRequired\n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nproduct_code\n\n\n\n\n\n\n\n\n\n\ntest_type\n\n\n\n\n\n\n\n\n\n\nlpar\n\n\nlpar\n\n\n\n\n\n\n\n\nuserid\n\n\nuserid\n\n\n\n\n\n\n\n\nssid\n\n\nssid\n\n\n\n\n\n\n\n\ncurrent_vcat\n\n\ncurrent_vcat\n\n\n\n\n\n\n\n\ncurrent_datastore\n\n\ncurrent_datastore\n\n\n\n\n\n\n\n\ncurrent_interval_date\n\n\ncurrent_interval_date\n\n\n\n\n\n\n\n\ncurrent_interval_time\n\n\ncurrent_interval_time\n\n\n\n\n\n\n\n\nplan\n\n\nplan\n\n\n\n\n\n\n\n\nprogram\n\n\nprogram\n\n\nProvide a specific program name or value of \nALL\n to indicate all programs under the requested plan should be tested.\n\n\n\n\n\n\ncollid\n\n\ncollid\n\n\nRequired only if \nprogram\n parameter indicates a specific name.\n\n\n\n\n\n\n\n\nOptional \n\n\n\n\n\n\n\n\nJSON\n\n\nCommand Line Override\n\n\nSpecial Usage or Note\n\n\n\n\n\n\n\n\n\n\nenvironment\n\n\nenvironment\n\n\n\n\n\n\n\n\noutput_location\n\n\noutput_location\n\n\n\n\n\n\n\n\ncurrent_interval_date_2\n\n\ncurrent_interval_date_2\n\n\n\n\n\n\n\n\ncurrent_interval_time_2\n\n\ncurrent_interval_time_2\n\n\n\n\n\n\n\n\ntext_type\n\n\n\n\nIndicates if the SQL executed under the program(s) is dynamic or static. Defaults to static.\n\n\n\n\n\n\ntext list\n\n\n\n\nThe list of SQL text to compare against the text obtained from the product displays. The list is composed of key/value pairs where the key is any string and the value is the correct version of the SQL text that would have been executed.\n\n\n\n\n\n\n\n\nJSON Examples\n\n\n\n\nAccess the static SQL for a specific plan and program\n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"SPEAN03.R20.PARMLIB(99)\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"PDT1511\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"RCUUD190\",\n      \"program\": \"PTASSPI\",\n      \"collid\": \"AUTHD190_BSSP\"\n    }\n  ]\n}\n\n\n\n\nAccess the dynamic SQL for all the programs for a specific plan\n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"SPEAN03.R20.PARMLIB(99)\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"PDT1511\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"ALL\",\n      \"text_type\": \"dynamic\"\n    }\n  ]\n}\n\n\n\n\nAccess the dynamic SQL for all the programs for a specific plan and validate it against a list of user specified SQL Text. \n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"SPEAN03.R20.PARMLIB(99)\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"PDT1511\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"ALL\",\n      \"text_type\": \"dynamic\",\n      \"text list\":\n            {\n              \"text1\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE\",\n              \"text2\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'\",\n              \"text3\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'\",\n              \"text4\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'\",\n              \"text5\": \"SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES\",\n              \"text6\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE\",\n              \"text7\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'\",\n              \"text8\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'\",\n              \"text9\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'\",\n              \"text10\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'\",\n              \"text11\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM'\",\n              \"text12\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES\",\n              \"text13\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST\",\n              \"text14\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'\",\n              \"text15\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'\",\n              \"text16\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS\",\n              \"text17\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''\",\n              \"text18\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS\",\n              \"text19\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES\",\n              \"text20\": \"SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS\"\n            }\n    }\n  ]\n}\n\n\n\n\nExample Output\n\n\nExample Output for Test 1\n\n\nExample 1:\n\n\nTest output when specifying the minimum type of test parameters. Where the SQL Text for all the statements executed under the program specified were extracted successfully.\n\n\nJSON file input\n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"RCUUD190\",\n      \"program\": \"PTASSPI\",\n      \"collid\": \"AUTHD190_BSSP\"\n    }\n  ]\n}\n\n\n\n\nReport Output\n\n\n\n\n    \n-----------------------------------------------------------------------------------\n\n    2017-08-21                               SQL Text Captured Report          12:01:36\n\n    2017-08-21-12:01:36, PLAN:  RCUUD190\n\n    2017-08-21-12:01:36, PROGRAM:  PTASSPI \n\n    2017-08-21-12:01:36, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT\n    2017-08-21-12:01:36, -------- -------- -------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    2017-08-21-12:01:36, CONNT2   0000948  00000    CONNECT                                                                                                                                                                                                                                                                                                                                                                 \n    2017-08-21-12:01:36, FETCH    0001046  00001    DECLARE CURSOR2 CURSOR FOR SELECT  A.SQL_TEXT_CREATOR , A.SQL_TEXT_NAME , A.SQL_SHARE , A.SQL_PANEL , A.SQL_DESCRIPTION , A.SQL_WHERE_TEXT , A.SQL_ORDER_TEXT , A.SQL_TABLE_NAME , A.SQL_TABLE_CREATOR , A.SQL_DEFAULT , A.SQL_QUERY_TYPE FROM PTI.PTSQL_TEXT_115 A WHERE A.SQL_TEXT_CREATOR = :H AND A.SQL_PRODUCT = :H AND A.SQL_PANEL LIKE :H AND A.SQL_DEFAULT = 'Y'\n    2017-08-21-12:01:36, OPEN     0001039  00001    DECLARE CURSOR2 CURSOR FOR SELECT  A.SQL_TEXT_CREATOR , A.SQL_TEXT_NAME , A.SQL_SHARE , A.SQL_PANEL , A.SQL_DESCRIPTION , A.SQL_WHERE_TEXT , A.SQL_ORDER_TEXT , A.SQL_TABLE_NAME , A.SQL_TABLE_CREATOR , A.SQL_DEFAULT , A.SQL_QUERY_TYPE FROM PTI.PTSQL_TEXT_115 A WHERE A.SQL_TEXT_CREATOR = :H AND A.SQL_PRODUCT = :H AND A.SQL_PANEL LIKE :H AND A.SQL_DEFAULT = 'Y'\n    2017-08-21-12:01:36, CLOSE    0001085  00001    DECLARE CURSOR2 CURSOR FOR SELECT  A.SQL_TEXT_CREATOR , A.SQL_TEXT_NAME , A.SQL_SHARE , A.SQL_PANEL , A.SQL_DESCRIPTION , A.SQL_WHERE_TEXT , A.SQL_ORDER_TEXT , A.SQL_TABLE_NAME , A.SQL_TABLE_CREATOR , A.SQL_DEFAULT , A.SQL_QUERY_TYPE FROM PTI.PTSQL_TEXT_115 A WHERE A.SQL_TEXT_CREATOR = :H AND A.SQL_PRODUCT = :H AND A.SQL_PANEL LIKE :H AND A.SQL_DEFAULT = 'Y'\n\n\n\n\n\nExample 2:\n\n\nTest output when specifying the minimum type of test parameters. Where the SQL Text for the statement executed under the program specified was not obtained.\n\n\nJSON file input\n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"RCUUD190\",\n      \"program\": \"PTASSPI\",\n      \"collid\": \"AUTHD190_BSSP\"\n    }\n  ]\n}\n\n\n\n\nReport Output\n\n\n\n\n    \n-----------------------------------------------------------------------------------\n         2017-08-21                               SQL Text Captured Report          14:42:07\n         2017-08-21-14:42:07, PLAN:  DISTSERV\n\n         2017-08-21-14:42:07, PROGRAM:  SYSSTAT \n\n         2017-08-21-14:42:07, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT\n         2017-08-21-14:42:07, -------- -------- -------- -------------------------\n         2017-08-21-14:42:07, CALLSTMT 0000002  00002     \n                                      \n\n\n\n\nExample Output for Test 2\n\n\nExample 1:\n\n\nTest output when specifying a list of source SQL text. Where the SQL Text for all the statements executed under the program(s) specified matched the source SQL text. \n\n\nJSON file input\n\n\n\n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"ALL\",\n      \"text_type\": \"dynamic\",\n      \"text list\":\n      {\n        \"text1\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE\",\n        \"text2\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'\",\n        \"text3\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'\",\n        \"text4\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'\",\n        \"text5\": \"SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES\",\n        \"text6\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE\",\n        \"text7\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'\",\n        \"text8\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'\",\n        \"text9\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'\",\n        \"text10\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'\",\n        \"text11\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM'\",\n        \"text12\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES\",\n        \"text13\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST\",\n        \"text14\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'\",\n        \"text15\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'\",\n        \"text16\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS\",\n        \"text17\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''\",\n        \"text18\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS\",\n        \"text19\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES\",\n        \"text20\": \"SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS\"\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\nReport Output\n\n\n\n\n    \n-----------------------------------------------------------------------------------\n         2017-08-21                               SQL Text Captured Report          14:42:56\n         2017-08-21-14:42:56, PLAN:  DISTSERV\n\n         2017-08-21-14:42:56, PROGRAM:  SYSLH200\n\n         2017-08-21-14:42:56, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT                                                                                                    MATCHED USER SUPPLIED TEXT                                                                                                 \n         2017-08-21-14:42:56, -------- -------- -------- --------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE                                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES                                                                    SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE                                                                               SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'                                                         SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'           SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'              SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM' SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES                                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST                                                                                 SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'                                                         SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'           SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS                                                                                 SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''                                                           SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS                                                                                 SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES                                                                                SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS                                                                                  SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS\n                                      \n\n\n\n\nExample 2:\n\n\nTest output when specifying a list of source SQL text. Where the SQL Text for all the statement executed under the program specified did not match any of the source SQL text provided and none of the SQL test in the user provided list list so a SQL Text not Found report is printed.\n\n\nJSON file input\n\n\n{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"SYSSTAT\",\n      \"collid\": \"NULLID\",\n      \"text_type\": \"dynamic\",\n      \"text list\":\n      {\n        \"text1\": \"CALL PROGRAM\"\n      }\n    }\n  ]\n}\n\n\n\n\nReport Output\n\n\n\n\n    \n-----------------------------------------------------------------------------------\n    2017-08-21                               SQL Text Captured Report          14:44:48\n    2017-08-21-14:44:48, PLAN:  DISTSERV\n\n    2017-08-21-14:44:48, PROGRAM:  SYSSTAT \n\n    2017-08-21-14:44:48, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT  MATCHED USER SUPPLIED TEXT\n    2017-08-21-14:44:48, -------- -------- -------- ------------------------- -------------------------\n    2017-08-21-14:44:48, CALLSTMT 0000002  00002     \n\n    ------------------------------------------------------------------------------------\n    2017-08-21                               SQL Text Not Found Report          14:44:48\n    2017-08-21-14:44:48, USER KEY USER TEXT                                         \n    2017-08-21-14:44:48, -------- --------------------------------------------------\n    2017-08-21-14:44:48, text1    CALL PROGRAM",
            "title": "SQL Text"
        },
        {
            "location": "/rtppy/sql-text/#sql-text",
            "text": "This test type provides different ways of testing the SQL Text obtained by Detector depending on the supplied parameters.\nSee the list below for the different sub-tests.",
            "title": "SQL Text"
        },
        {
            "location": "/rtppy/sql-text/#test-1",
            "text": "Was SQL text obtained for the statements executed under a given program under a plan.   This is the test that is always performed which minimum validates that the SQL Text display for the SQL statement is accessible without an error indicating the SQL text could not be located. The text is then extracted from this display and put in the report that is generated at the end of the test. This gives a quick overall visual for each program under the plan what the statement was and the SQL Text that appears when selecting that statement. See an example of the output  here .",
            "title": "Test 1:"
        },
        {
            "location": "/rtppy/sql-text/#test-2",
            "text": "Does the SQL text collected equally compare to the source SQL that was executed.    This level of validation testing is only done when the optional parameter  text list  is included in the test, see the  example  of how to use the parameter. When present the SQL text obtained in  test 1  is searched against the specified list for a match. An additional column is added to the same report produced by test 1 that is either left blank or contains the text from the list that matched the display text. An additional report is included for any SQL text from the user provided text list that no match was found. See an example of the output  here .",
            "title": "Test 2:"
        },
        {
            "location": "/rtppy/sql-text/#test-parameters",
            "text": "The table below lists the required and optional parameters that are valid for this test. Follow the link by clicking on the\nparameter name in the JSON column. If the parameter has a command line override option it will be listed in the Command Line Override\ncolumn. Additionally there are  examples  at the bottom of this page.",
            "title": "Test Parameters"
        },
        {
            "location": "/rtppy/sql-text/#required",
            "text": "JSON  Command Line Override  Special Usage or Note      product_code      test_type      lpar  lpar     userid  userid     ssid  ssid     current_vcat  current_vcat     current_datastore  current_datastore     current_interval_date  current_interval_date     current_interval_time  current_interval_time     plan  plan     program  program  Provide a specific program name or value of  ALL  to indicate all programs under the requested plan should be tested.    collid  collid  Required only if  program  parameter indicates a specific name.",
            "title": "Required"
        },
        {
            "location": "/rtppy/sql-text/#optional",
            "text": "JSON  Command Line Override  Special Usage or Note      environment  environment     output_location  output_location     current_interval_date_2  current_interval_date_2     current_interval_time_2  current_interval_time_2     text_type   Indicates if the SQL executed under the program(s) is dynamic or static. Defaults to static.    text list   The list of SQL text to compare against the text obtained from the product displays. The list is composed of key/value pairs where the key is any string and the value is the correct version of the SQL text that would have been executed.",
            "title": "Optional "
        },
        {
            "location": "/rtppy/sql-text/#json-examples",
            "text": "",
            "title": "JSON Examples"
        },
        {
            "location": "/rtppy/sql-text/#access-the-static-sql-for-a-specific-plan-and-program",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"SPEAN03.R20.PARMLIB(99)\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"PDT1511\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"RCUUD190\",\n      \"program\": \"PTASSPI\",\n      \"collid\": \"AUTHD190_BSSP\"\n    }\n  ]\n}",
            "title": "Access the static SQL for a specific plan and program"
        },
        {
            "location": "/rtppy/sql-text/#access-the-dynamic-sql-for-all-the-programs-for-a-specific-plan",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"SPEAN03.R20.PARMLIB(99)\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"PDT1511\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"ALL\",\n      \"text_type\": \"dynamic\"\n    }\n  ]\n}",
            "title": "Access the dynamic SQL for all the programs for a specific plan"
        },
        {
            "location": "/rtppy/sql-text/#access-the-dynamic-sql-for-all-the-programs-for-a-specific-plan-and-validate-it-against-a-list-of-user-specified-sql-text",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"SPEAN03.R20.PARMLIB(99)\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"PDT1511\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"ALL\",\n      \"text_type\": \"dynamic\",\n      \"text list\":\n            {\n              \"text1\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE\",\n              \"text2\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'\",\n              \"text3\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'\",\n              \"text4\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'\",\n              \"text5\": \"SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES\",\n              \"text6\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE\",\n              \"text7\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'\",\n              \"text8\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'\",\n              \"text9\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'\",\n              \"text10\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'\",\n              \"text11\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM'\",\n              \"text12\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES\",\n              \"text13\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST\",\n              \"text14\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'\",\n              \"text15\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'\",\n              \"text16\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS\",\n              \"text17\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''\",\n              \"text18\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS\",\n              \"text19\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES\",\n              \"text20\": \"SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS\"\n            }\n    }\n  ]\n}",
            "title": "Access the dynamic SQL for all the programs for a specific plan and validate it against a list of user specified SQL Text. "
        },
        {
            "location": "/rtppy/sql-text/#example-output",
            "text": "",
            "title": "Example Output"
        },
        {
            "location": "/rtppy/sql-text/#example-output-for-test-1",
            "text": "",
            "title": "Example Output for Test 1"
        },
        {
            "location": "/rtppy/sql-text/#example-1",
            "text": "Test output when specifying the minimum type of test parameters. Where the SQL Text for all the statements executed under the program specified were extracted successfully.",
            "title": "Example 1:"
        },
        {
            "location": "/rtppy/sql-text/#json-file-input",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"RCUUD190\",\n      \"program\": \"PTASSPI\",\n      \"collid\": \"AUTHD190_BSSP\"\n    }\n  ]\n}",
            "title": "JSON file input"
        },
        {
            "location": "/rtppy/sql-text/#report-output",
            "text": "----------------------------------------------------------------------------------- \n    2017-08-21                               SQL Text Captured Report          12:01:36\n\n    2017-08-21-12:01:36, PLAN:  RCUUD190\n\n    2017-08-21-12:01:36, PROGRAM:  PTASSPI \n\n    2017-08-21-12:01:36, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT\n    2017-08-21-12:01:36, -------- -------- -------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n    2017-08-21-12:01:36, CONNT2   0000948  00000    CONNECT                                                                                                                                                                                                                                                                                                                                                                 \n    2017-08-21-12:01:36, FETCH    0001046  00001    DECLARE CURSOR2 CURSOR FOR SELECT  A.SQL_TEXT_CREATOR , A.SQL_TEXT_NAME , A.SQL_SHARE , A.SQL_PANEL , A.SQL_DESCRIPTION , A.SQL_WHERE_TEXT , A.SQL_ORDER_TEXT , A.SQL_TABLE_NAME , A.SQL_TABLE_CREATOR , A.SQL_DEFAULT , A.SQL_QUERY_TYPE FROM PTI.PTSQL_TEXT_115 A WHERE A.SQL_TEXT_CREATOR = :H AND A.SQL_PRODUCT = :H AND A.SQL_PANEL LIKE :H AND A.SQL_DEFAULT = 'Y'\n    2017-08-21-12:01:36, OPEN     0001039  00001    DECLARE CURSOR2 CURSOR FOR SELECT  A.SQL_TEXT_CREATOR , A.SQL_TEXT_NAME , A.SQL_SHARE , A.SQL_PANEL , A.SQL_DESCRIPTION , A.SQL_WHERE_TEXT , A.SQL_ORDER_TEXT , A.SQL_TABLE_NAME , A.SQL_TABLE_CREATOR , A.SQL_DEFAULT , A.SQL_QUERY_TYPE FROM PTI.PTSQL_TEXT_115 A WHERE A.SQL_TEXT_CREATOR = :H AND A.SQL_PRODUCT = :H AND A.SQL_PANEL LIKE :H AND A.SQL_DEFAULT = 'Y'\n    2017-08-21-12:01:36, CLOSE    0001085  00001    DECLARE CURSOR2 CURSOR FOR SELECT  A.SQL_TEXT_CREATOR , A.SQL_TEXT_NAME , A.SQL_SHARE , A.SQL_PANEL , A.SQL_DESCRIPTION , A.SQL_WHERE_TEXT , A.SQL_ORDER_TEXT , A.SQL_TABLE_NAME , A.SQL_TABLE_CREATOR , A.SQL_DEFAULT , A.SQL_QUERY_TYPE FROM PTI.PTSQL_TEXT_115 A WHERE A.SQL_TEXT_CREATOR = :H AND A.SQL_PRODUCT = :H AND A.SQL_PANEL LIKE :H AND A.SQL_DEFAULT = 'Y'",
            "title": "Report Output"
        },
        {
            "location": "/rtppy/sql-text/#example-2",
            "text": "Test output when specifying the minimum type of test parameters. Where the SQL Text for the statement executed under the program specified was not obtained.",
            "title": "Example 2:"
        },
        {
            "location": "/rtppy/sql-text/#json-file-input_1",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"RCUUD190\",\n      \"program\": \"PTASSPI\",\n      \"collid\": \"AUTHD190_BSSP\"\n    }\n  ]\n}",
            "title": "JSON file input"
        },
        {
            "location": "/rtppy/sql-text/#report-output_1",
            "text": "-----------------------------------------------------------------------------------\n         2017-08-21                               SQL Text Captured Report          14:42:07\n         2017-08-21-14:42:07, PLAN:  DISTSERV\n\n         2017-08-21-14:42:07, PROGRAM:  SYSSTAT \n\n         2017-08-21-14:42:07, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT\n         2017-08-21-14:42:07, -------- -------- -------- -------------------------\n         2017-08-21-14:42:07, CALLSTMT 0000002  00002",
            "title": "Report Output"
        },
        {
            "location": "/rtppy/sql-text/#example-output-for-test-2",
            "text": "",
            "title": "Example Output for Test 2"
        },
        {
            "location": "/rtppy/sql-text/#example-1_1",
            "text": "Test output when specifying a list of source SQL text. Where the SQL Text for all the statements executed under the program(s) specified matched the source SQL text.",
            "title": "Example 1:"
        },
        {
            "location": "/rtppy/sql-text/#json-file-input_2",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"ALL\",\n      \"text_type\": \"dynamic\",\n      \"text list\":\n      {\n        \"text1\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE\",\n        \"text2\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'\",\n        \"text3\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'\",\n        \"text4\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'\",\n        \"text5\": \"SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES\",\n        \"text6\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE\",\n        \"text7\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'\",\n        \"text8\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'\",\n        \"text9\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'\",\n        \"text10\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'\",\n        \"text11\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM'\",\n        \"text12\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES\",\n        \"text13\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST\",\n        \"text14\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'\",\n        \"text15\": \"SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'\",\n        \"text16\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS\",\n        \"text17\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''\",\n        \"text18\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS\",\n        \"text19\": \"SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES\",\n        \"text20\": \"SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS\"\n      }\n    }\n  ]\n}",
            "title": "JSON file input"
        },
        {
            "location": "/rtppy/sql-text/#report-output_2",
            "text": "-----------------------------------------------------------------------------------\n         2017-08-21                               SQL Text Captured Report          14:42:56\n         2017-08-21-14:42:56, PLAN:  DISTSERV\n\n         2017-08-21-14:42:56, PROGRAM:  SYSLH200\n\n         2017-08-21-14:42:56, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT                                                                                                    MATCHED USER SUPPLIED TEXT                                                                                                 \n         2017-08-21-14:42:56, -------- -------- -------- --------------------------------------------------------------------------------------------------------------------------- ---------------------------------------------------------------------------------------------------------------------------\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE                                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSPACKAGE\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'T'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'V'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'A'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES                                                                    SELECT  COUNT ( DISTINCT CREATOR ) FROM SYSIBM.SYSTABLES\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE                                                                               SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLESPACE\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSTABLES WHERE TYPE = 'M'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'                                                         SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'F'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'           SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSTRIGGERS' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'              SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'TEXT' AND TBNAME = 'SYSVIEWS' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM' SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'CREATESTMT' AND TBNAME = 'SYSROUTINES_SRC' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES                                                                                  SELECT  COUNT ( * ) FROM SYSIBM.SYSINDEXES\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST                                                                                 SELECT  COUNT ( * ) FROM SYSIBM.SYSTABCONST\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'                                                         SELECT  COUNT ( * ) FROM SYSIBM.SYSROUTINES WHERE ROUTINETYPE = 'P'\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'           SELECT  FOREIGNKEY FROM SYSIBM.SYSCOLUMNS WHERE NAME = 'STMT' AND TBNAME = 'SYSPACKSTMT' AND TBCREATOR = 'SYSIBM'\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS                                                                                 SELECT  COUNT ( * ) FROM SYSIBM.SYSSYNONYMS\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''                                                           SELECT  COUNT ( * ) FROM SYSIBM.SYSDATATYPES WHERE OWNERTYPE = ''\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS                                                                                 SELECT  COUNT ( * ) FROM SYSIBM.SYSTRIGGERS\n         2017-08-21-14:42:56, PREPARE  0000002  00002    SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES                                                                                SELECT  COUNT ( * ) FROM SYSIBM.SYSSEQUENCES\n         2017-08-21-14:42:56, PREPARE  0000001  00001    SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS                                                                                  SELECT  COUNT ( * ) FROM SYSIBM.XSROBJECTS",
            "title": "Report Output"
        },
        {
            "location": "/rtppy/sql-text/#example-2_1",
            "text": "Test output when specifying a list of source SQL text. Where the SQL Text for all the statement executed under the program specified did not match any of the source SQL text provided and none of the SQL test in the user provided list list so a SQL Text not Found report is printed.",
            "title": "Example 2:"
        },
        {
            "location": "/rtppy/sql-text/#json-file-input_3",
            "text": "{\n  \"connection\": {\n    \"lpar\": \"ca11\",\n    \"userid\": \"qartp01\",\n    \"ssid\": \"d11b\"\n  },\n  \"tests\": \n  [\n    {\n      \"test_type\": \"sql text\",\n      \"environment\": \"R20\",\n      \"product_code\": \"PDT\",\n      \"current_vcat\": \"PDTDBA.R19\",\n      \"current_datastore\": \"QATEST19\",\n      \"current_interval_date\": \"1\",\n      \"current_interval_time\": \"20:37:26\",\n      \"plan\": \"DISTSERV\",\n      \"program\": \"SYSSTAT\",\n      \"collid\": \"NULLID\",\n      \"text_type\": \"dynamic\",\n      \"text list\":\n      {\n        \"text1\": \"CALL PROGRAM\"\n      }\n    }\n  ]\n}",
            "title": "JSON file input"
        },
        {
            "location": "/rtppy/sql-text/#report-output_3",
            "text": "-----------------------------------------------------------------------------------\n    2017-08-21                               SQL Text Captured Report          14:44:48\n    2017-08-21-14:44:48, PLAN:  DISTSERV\n\n    2017-08-21-14:44:48, PROGRAM:  SYSSTAT \n\n    2017-08-21-14:44:48, SQL_CALL STMT#    SECT#    TEXT CAPTURED BY PRODUCT  MATCHED USER SUPPLIED TEXT\n    2017-08-21-14:44:48, -------- -------- -------- ------------------------- -------------------------\n    2017-08-21-14:44:48, CALLSTMT 0000002  00002     \n\n    ------------------------------------------------------------------------------------\n    2017-08-21                               SQL Text Not Found Report          14:44:48\n    2017-08-21-14:44:48, USER KEY USER TEXT                                         \n    2017-08-21-14:44:48, -------- --------------------------------------------------\n    2017-08-21-14:44:48, text1    CALL PROGRAM",
            "title": "Report Output"
        },
        {
            "location": "/rtppy/automation_architecture/",
            "text": "Automation Architecture and Design\n\n\n\n\nThis section contains information on the Python Automation (RTPPY) frameworks architecture and design. The architecture is composed in a way to provide a verbose keyword data driven user interface while simplifying and quickening the development of functionality expansion.\n\n\nOverall the architecture uses a class-based hybrid inheritance structure which combines the concept of multilevel and hierarchical inheritance. It can be logically viewed as two entities, the class structures that provide the user interface(referred to as the front end) and the class structures that provide basic ISPF and product based functionality (referred to as the back end) which includes PTG2 functionality wrappers.\n\n\nYou can view \nUML\n and \nFlowchart\n diagrams that visually show the class and program flow of the architecture.\n\n\nUser Interface Architecture (Front End)\n\n\nThe front end architecture is designed around input from the user as a file written in JSON format and/or optional overriding command line arguments when invoking the main executable.\n\n\nBuilder\n\n\nThe Builder class is a static class that contain methods called by the main executable used to interact with the command line arguments and JSON file and most importantly create the correct \"test type\" BaseTest class instance which drives the rest of the execution.\n\n\nInputParms\n\n\nA static class that provides functionality for a class to retrieve test input parameters from the command line and/or JSON file. Also provide methods to raise an error or information message related to input parameters existence or non existence.\n\n\nBaseTest\n\n\nThis is the highest class in the hierarchy in which all sub classes inherit from. Methods here are not particular to any one subclass. The Base Test classes build_test super method sets global class instance variables for those parameters that are needed across all tests(e.g. LPAR, USERID, SSID, etc.). Also provides generic methods like finding a value for a test input parameter using methods in the static InputParms class.\n\n\nHistory\n\n\nThe history class inherits from the BaseTest class and is the base class in the hierarchical inheritance in which all test sub classes that interact with the products historical data displays inherit from either directly or indirectly. This class handles setting certain global class instance variables from the input parameters for those required and optional parameters needed by tests.\n\n\nAggregateFactory\n\n\nA static class who's only responsibility is to interrogate the \"level\" input parameter for a test from the JSON file in order to determine which Aggregate Compare sub class to create an instance of so that the Builder class and main can call the correct build_test and execute_test methods.\n\n\nAggregateBase\n\n\nThis class while serving as a sub class in the hierarchical inheritance structure also serves as the base in another hierarchical inheritance structure for the below mentioned sub classes. The build_test method provided here overrides the History class build_test method in which the History class method is called as a super to ensure those parameters commonly handle by its parent are present. Then handles the required and optional parameters unique to an Aggregate Compare test. The execute_method handles the logic common across all aggregate sub classes that involves using the \"back end\" functionality to interact with the product displays.\n\n\nBoth the build_test and execute_test methods are overridden by its sub classes however are super called by the sub classes. All sub classes also have access to methods in the History and BaseTest classes through the AggregateBase classes inheritance.\n\n\nAggregatePlan\n\n\nSubclass that performs an aggregation of the program data and compares it to the plan data.\n\n\nAggregateProgram\n\n\nSubclass that performs an aggregation of the statement data and compares it to the program data.\n\n\nAggregateKeys\n\n\nSubclass that can aggregate either the plan or program data against the data for a user key.\n\n\nIntervalCompare\n\n\nThis class inherits from the History class directly. It provides functionality that allows data at the interval summary level (i.e. View By level only) to be compared against a baseline and a current collection of the same executed SQL statements.\n\n\nProduct based functionality (Back End)\n\n\nAs mentioned previously the RTPPY automation uses the PTG2 framework which is a python framework that provides the ability to navigate a mainframe emulator programmatically. The RTPPY framework wrappers simple and complex PTG2 services into ISPF and product based functionality for easier development. The design and architecture of the PTG2 framework is not discussed in detail here. If more information about PTG2 is wanted see the PTG2 Architecture wiki page.\n\n\nThe back end architecture is designed around providing classes and methods that encapsulate functionality around ISPF and product navigation, using the PTG2 architecture, and display data interaction.\n\n\nCommonNav\n\n\nStatic class that contains a variety of methods around things like simple ISPF navigation (shift left, right, up, down, max up, max down, freeze and sort columns, etc....) that are non product specific. Also includes method for using PTG2 services for capturing a whole ISPF display.\n\n\nNavRtp\n\n\nThis class contains encapsulates product functionality that is usable for all the RTP products (PDT/PSA/PTT) and is the base class that is inherited by the sub classes described below.\n\n\nNavPdt\n\n\nSubclass of NavRtp that encapsulates product functionality specific to Detector.\n\n\nNavPsa\n\n\nSubclass of NavRtp that encapsulates product functionality specific to Subsystem Analyzer.\n\n\nRtpPrimaryKeys\n\n\nA static class that provides information used by method(s) in the product Nav classes. The information is on the columns that should be used as primary keys when matching data rows for a specific or set of product displays.\n\n\nResults\n\n\nThis class is composed by a method in the product Nav classes and is retained by a test class. The Results class encapsulates functionality to extract and interact with the columns and data on the product displays which is contained in the ColumnInfo class that is composed.\n\n\nColumnInfo\n\n\nClass composed by the Results class that encapsulates the information about the columns and the data for a dynamic data area in the product displays.",
            "title": "Architecture and Design"
        },
        {
            "location": "/rtppy/automation_architecture/#automation-architecture-and-design",
            "text": "This section contains information on the Python Automation (RTPPY) frameworks architecture and design. The architecture is composed in a way to provide a verbose keyword data driven user interface while simplifying and quickening the development of functionality expansion.  Overall the architecture uses a class-based hybrid inheritance structure which combines the concept of multilevel and hierarchical inheritance. It can be logically viewed as two entities, the class structures that provide the user interface(referred to as the front end) and the class structures that provide basic ISPF and product based functionality (referred to as the back end) which includes PTG2 functionality wrappers.  You can view  UML  and  Flowchart  diagrams that visually show the class and program flow of the architecture.",
            "title": "Automation Architecture and Design"
        },
        {
            "location": "/rtppy/automation_architecture/#user-interface-architecture-front-end",
            "text": "The front end architecture is designed around input from the user as a file written in JSON format and/or optional overriding command line arguments when invoking the main executable.",
            "title": "User Interface Architecture (Front End)"
        },
        {
            "location": "/rtppy/automation_architecture/#builder",
            "text": "The Builder class is a static class that contain methods called by the main executable used to interact with the command line arguments and JSON file and most importantly create the correct \"test type\" BaseTest class instance which drives the rest of the execution.",
            "title": "Builder"
        },
        {
            "location": "/rtppy/automation_architecture/#inputparms",
            "text": "A static class that provides functionality for a class to retrieve test input parameters from the command line and/or JSON file. Also provide methods to raise an error or information message related to input parameters existence or non existence.",
            "title": "InputParms"
        },
        {
            "location": "/rtppy/automation_architecture/#basetest",
            "text": "This is the highest class in the hierarchy in which all sub classes inherit from. Methods here are not particular to any one subclass. The Base Test classes build_test super method sets global class instance variables for those parameters that are needed across all tests(e.g. LPAR, USERID, SSID, etc.). Also provides generic methods like finding a value for a test input parameter using methods in the static InputParms class.",
            "title": "BaseTest"
        },
        {
            "location": "/rtppy/automation_architecture/#history",
            "text": "The history class inherits from the BaseTest class and is the base class in the hierarchical inheritance in which all test sub classes that interact with the products historical data displays inherit from either directly or indirectly. This class handles setting certain global class instance variables from the input parameters for those required and optional parameters needed by tests.",
            "title": "History"
        },
        {
            "location": "/rtppy/automation_architecture/#aggregatefactory",
            "text": "A static class who's only responsibility is to interrogate the \"level\" input parameter for a test from the JSON file in order to determine which Aggregate Compare sub class to create an instance of so that the Builder class and main can call the correct build_test and execute_test methods.",
            "title": "AggregateFactory"
        },
        {
            "location": "/rtppy/automation_architecture/#aggregatebase",
            "text": "This class while serving as a sub class in the hierarchical inheritance structure also serves as the base in another hierarchical inheritance structure for the below mentioned sub classes. The build_test method provided here overrides the History class build_test method in which the History class method is called as a super to ensure those parameters commonly handle by its parent are present. Then handles the required and optional parameters unique to an Aggregate Compare test. The execute_method handles the logic common across all aggregate sub classes that involves using the \"back end\" functionality to interact with the product displays.  Both the build_test and execute_test methods are overridden by its sub classes however are super called by the sub classes. All sub classes also have access to methods in the History and BaseTest classes through the AggregateBase classes inheritance.",
            "title": "AggregateBase"
        },
        {
            "location": "/rtppy/automation_architecture/#aggregateplan",
            "text": "Subclass that performs an aggregation of the program data and compares it to the plan data.",
            "title": "AggregatePlan"
        },
        {
            "location": "/rtppy/automation_architecture/#aggregateprogram",
            "text": "Subclass that performs an aggregation of the statement data and compares it to the program data.",
            "title": "AggregateProgram"
        },
        {
            "location": "/rtppy/automation_architecture/#aggregatekeys",
            "text": "Subclass that can aggregate either the plan or program data against the data for a user key.",
            "title": "AggregateKeys"
        },
        {
            "location": "/rtppy/automation_architecture/#intervalcompare",
            "text": "This class inherits from the History class directly. It provides functionality that allows data at the interval summary level (i.e. View By level only) to be compared against a baseline and a current collection of the same executed SQL statements.",
            "title": "IntervalCompare"
        },
        {
            "location": "/rtppy/automation_architecture/#product-based-functionality-back-end",
            "text": "As mentioned previously the RTPPY automation uses the PTG2 framework which is a python framework that provides the ability to navigate a mainframe emulator programmatically. The RTPPY framework wrappers simple and complex PTG2 services into ISPF and product based functionality for easier development. The design and architecture of the PTG2 framework is not discussed in detail here. If more information about PTG2 is wanted see the PTG2 Architecture wiki page.  The back end architecture is designed around providing classes and methods that encapsulate functionality around ISPF and product navigation, using the PTG2 architecture, and display data interaction.",
            "title": "Product based functionality (Back End)"
        },
        {
            "location": "/rtppy/automation_architecture/#commonnav",
            "text": "Static class that contains a variety of methods around things like simple ISPF navigation (shift left, right, up, down, max up, max down, freeze and sort columns, etc....) that are non product specific. Also includes method for using PTG2 services for capturing a whole ISPF display.",
            "title": "CommonNav"
        },
        {
            "location": "/rtppy/automation_architecture/#navrtp",
            "text": "This class contains encapsulates product functionality that is usable for all the RTP products (PDT/PSA/PTT) and is the base class that is inherited by the sub classes described below.",
            "title": "NavRtp"
        },
        {
            "location": "/rtppy/automation_architecture/#navpdt",
            "text": "Subclass of NavRtp that encapsulates product functionality specific to Detector.",
            "title": "NavPdt"
        },
        {
            "location": "/rtppy/automation_architecture/#navpsa",
            "text": "Subclass of NavRtp that encapsulates product functionality specific to Subsystem Analyzer.",
            "title": "NavPsa"
        },
        {
            "location": "/rtppy/automation_architecture/#rtpprimarykeys",
            "text": "A static class that provides information used by method(s) in the product Nav classes. The information is on the columns that should be used as primary keys when matching data rows for a specific or set of product displays.",
            "title": "RtpPrimaryKeys"
        },
        {
            "location": "/rtppy/automation_architecture/#results",
            "text": "This class is composed by a method in the product Nav classes and is retained by a test class. The Results class encapsulates functionality to extract and interact with the columns and data on the product displays which is contained in the ColumnInfo class that is composed.",
            "title": "Results"
        },
        {
            "location": "/rtppy/automation_architecture/#columninfo",
            "text": "Class composed by the Results class that encapsulates the information about the columns and the data for a dynamic data area in the product displays.",
            "title": "ColumnInfo"
        },
        {
            "location": "/help/environment-variables/",
            "text": "How to set Environment Variables\n\n\nThis guide will show you how to set environment variables in Microsoft Windows 7\n\n\nGo to my \n\"My Computer\"\n\n\n\n\nSelect \nSystem Properties\n\n\n\n\nSelect \nAdvanced system settings\n\n\n\n\nSelect \nEnvironment Variables...\n\n\n\n\nAdd a New Variable\n\n\n\n\nSpecify Name and Path\n\n\n\n\nSelect \nOk\n to save on the \nEdit User Variable\n window and the \nEnvironment Variables\n window.",
            "title": "Environment Variables"
        },
        {
            "location": "/help/environment-variables/#how-to-set-environment-variables",
            "text": "This guide will show you how to set environment variables in Microsoft Windows 7",
            "title": "How to set Environment Variables"
        },
        {
            "location": "/help/environment-variables/#go-to-my-my-computer",
            "text": "",
            "title": "Go to my \"My Computer\""
        },
        {
            "location": "/help/environment-variables/#select-system-properties",
            "text": "",
            "title": "Select System Properties"
        },
        {
            "location": "/help/environment-variables/#select-advanced-system-settings",
            "text": "",
            "title": "Select Advanced system settings"
        },
        {
            "location": "/help/environment-variables/#select-environment-variables",
            "text": "",
            "title": "Select Environment Variables..."
        },
        {
            "location": "/help/environment-variables/#add-a-new-variable",
            "text": "",
            "title": "Add a New Variable"
        },
        {
            "location": "/help/environment-variables/#specify-name-and-path",
            "text": "Select  Ok  to save on the  Edit User Variable  window and the  Environment Variables  window.",
            "title": "Specify Name and Path"
        },
        {
            "location": "/help/using-git/",
            "text": "Using Git/GitHub\n\n\nDescription:\n\n\nFrom Wikipedia:\n\n\nGit (/\u0261\u026at/) is a version control system that is widely used for software development and other version control tasks.\nIt is a distributed revision control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows.\n\n\nGitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management\n(SCM) functionality of Git as well as adding its own features. Unlike Git, which is strictly a command-line tool,\nGitHub provides a Web-based graphical interface and desktop as well as mobile integration.\nIt also provides access control and several collaboration features such as bug tracking, feature requests,\ntask management, and wikis for every project.\n\n\nDocumentation:\n\n\n1.) Pro Git book: \nhttps://git-scm.com/book/en/v2\n.  The Pro Git book is a great resource for first time git users also\nin becoming an advanced user.  Chapters 1-3 are recommended for getting started.\n\n\n2.) Official Git Documentation: \nhttps://git-scm.com/documentation\n\n\nAlso on that page are some helpful tutorial videos.\n\n\n3.) GitHub Guides: \nhttps://guides.github.com/\n\n\nGit Basic Commands:\n\n\nThe basic git commands that you will need to become familiar with include:\n\n\nGetting changes from the remote repository:\n\n\ngit fetch\n -> Pulls changes from the remote repository into the local read-only repository.\n\n\ngit merge\n -> Moves changes from the local read-only repository into the local working branch.\n\n\nSaving and commiting local changes:\n\n\ngit add\n -> Stages local changes to be committed.\n\n\ngit commit\n -> Commits changes locally.\n\n\ngit push\n -> Commits locally committed changes to the remove repository.\n\n\nHelpful Commands:\n\n\ngit status\n -> Displays the current local repository status and displays files that are committed, staged, or\nwaiting to be staged.\n\n\ngit log\n -> Displays the git log file.",
            "title": "Using Git/GitHub"
        },
        {
            "location": "/help/using-git/#using-gitgithub",
            "text": "",
            "title": "Using Git/GitHub"
        },
        {
            "location": "/help/using-git/#description",
            "text": "From Wikipedia:  Git (/\u0261\u026at/) is a version control system that is widely used for software development and other version control tasks.\nIt is a distributed revision control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows.  GitHub is a web-based Git repository hosting service. It offers all of the distributed revision control and source code management\n(SCM) functionality of Git as well as adding its own features. Unlike Git, which is strictly a command-line tool,\nGitHub provides a Web-based graphical interface and desktop as well as mobile integration.\nIt also provides access control and several collaboration features such as bug tracking, feature requests,\ntask management, and wikis for every project.",
            "title": "Description:"
        },
        {
            "location": "/help/using-git/#documentation",
            "text": "1.) Pro Git book:  https://git-scm.com/book/en/v2 .  The Pro Git book is a great resource for first time git users also\nin becoming an advanced user.  Chapters 1-3 are recommended for getting started.  2.) Official Git Documentation:  https://git-scm.com/documentation  Also on that page are some helpful tutorial videos.  3.) GitHub Guides:  https://guides.github.com/",
            "title": "Documentation:"
        },
        {
            "location": "/help/using-git/#git-basic-commands",
            "text": "The basic git commands that you will need to become familiar with include:",
            "title": "Git Basic Commands:"
        },
        {
            "location": "/help/using-git/#getting-changes-from-the-remote-repository",
            "text": "git fetch  -> Pulls changes from the remote repository into the local read-only repository.  git merge  -> Moves changes from the local read-only repository into the local working branch.",
            "title": "Getting changes from the remote repository:"
        },
        {
            "location": "/help/using-git/#saving-and-commiting-local-changes",
            "text": "git add  -> Stages local changes to be committed.  git commit  -> Commits changes locally.  git push  -> Commits locally committed changes to the remove repository.",
            "title": "Saving and commiting local changes:"
        },
        {
            "location": "/help/using-git/#helpful-commands",
            "text": "git status  -> Displays the current local repository status and displays files that are committed, staged, or\nwaiting to be staged.  git log  -> Displays the git log file.",
            "title": "Helpful Commands:"
        },
        {
            "location": "/help/create-issue/",
            "text": "Create an issue on GitHub\n\n\nHow to create an Issue:\n\n\n\n\nGo to the \nIssues tab\n of the RTP repository main page.\n\n\nClick on \nNew Issue\n in the upper right hand corner.\n\n\nFill in the Title box with a good descriptive title of your issue.\n\n\n\n\nThe \nWrite\n tab you are given by default will be prepopulated with a template that is written in markdown language. Fill in the template with your information about your issue. \n\n\na. You can preview the directions and your included information without the Markdown language at any time by clicking the \nPreview\n tab.\n\n\n\n\n\n\nClick \nSubmit new issue\n at the bottom to submit your issue.\n\n\n\n\n\n\nFAQ's\n\n\nQ: How do I know I will be notified as my issue moves along?\n\n\nA: See documentation \nAbout Notification\n in GitHub.\n\n\nQ: How can I manage my notifications?\n\n\nA: See \nManage Notification\n documentation\n\n\nQ: Can I control how I receive notifications?\n\n\nA: Yes, see \nManaging notification delivery methods",
            "title": "Creating a GitHug Issue"
        },
        {
            "location": "/help/create-issue/#create-an-issue-on-github",
            "text": "How to create an Issue:   Go to the  Issues tab  of the RTP repository main page.  Click on  New Issue  in the upper right hand corner.  Fill in the Title box with a good descriptive title of your issue.   The  Write  tab you are given by default will be prepopulated with a template that is written in markdown language. Fill in the template with your information about your issue.   a. You can preview the directions and your included information without the Markdown language at any time by clicking the  Preview  tab.    Click  Submit new issue  at the bottom to submit your issue.",
            "title": "Create an issue on GitHub"
        },
        {
            "location": "/help/create-issue/#faqs",
            "text": "Q: How do I know I will be notified as my issue moves along?  A: See documentation  About Notification  in GitHub.  Q: How can I manage my notifications?  A: See  Manage Notification  documentation  Q: Can I control how I receive notifications?  A: Yes, see  Managing notification delivery methods",
            "title": "FAQ's"
        }
    ]
}